{"version":3,"sources":["js/StatusPage.js"],"names":["currentTimestamp","Date","getTime","CreatePreviewImage","lazy","renderLoader","variant","animation","role","className","grabStatus","dateFinished","returnObj","text","class","finDaysAgo","Math","round","StatusPage","props","useState","id","data","color","comments","datefinished","daterequest","reqDaysAgo","attachment","signColor","signQuantity","height","width","thickness","dataRow","setDataRow","showPage","setShowPage","tagsAreDone","setTagsAreDone","searchValue","setSearchValue","adminPadding","setAdminPadding","h4Title","setH4Title","searchBarPlaceholder","setSearchBarPlaceholder","tagsNeedUpdate","dbUtility","mode","then","statusTags","length","setDataRowAdmin","searchForString","returnResult","useEffect","dataRowAdmin","adminMode","xs","to","placeholder","aria-label","aria-describedby","onChange","e","thisSearchValue","target","value","toLowerCase","onKeyPress","key","map","mapItem","index","md","disabled","onClick","tempIdArray","push","type","docIdArray","fallback","name","secondLine","titlecity","thirdLine","thirdline","colorCode","signcolor","requestor","requestTimestamp","grabDaysAgo","quantity"],"mappings":"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","file":"static/js/13.150e05d8.chunk.js","sourcesContent":["import React, { \r\n    useState, \r\n    useEffect,\r\n    Suspense,\r\n    lazy\r\n} from 'react';\r\nimport { \r\n    Container, \r\n    Button,\r\n    Row,\r\n    Col,\r\n    Spinner,\r\n    InputGroup,\r\n    FormControl\r\n} from 'react-bootstrap';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { dbUtility } from './dbUtility.js';\r\nimport '../css/nav.css';\r\nimport '../css/tags.css';\r\nimport '../css/admin.css';\r\n\r\n\r\n// compile time data, grab the date once, needs to be here due to scope\r\nlet date = new Date();\r\nlet currentTimestamp = date.getTime();\r\n\r\n\r\n// lazy loads\r\nconst CreatePreviewImage = lazy( () => import('./CreatePreviewImage.js'));\r\n\r\n\r\n// lazy load spinner\r\nconst renderLoader = (\r\n    <Spinner variant=\"danger\" animation=\"border\" role=\"status\">\r\n      <span className=\"sr-only\">\r\n        Loading...\r\n      </span>\r\n    </Spinner>\r\n  );\r\n\r\n\r\n// getting amount of days ago from current to requested date\r\nconst grabDaysAgo = ((requestTimestamp) => {\r\n    // then for each item in data row, grab and assign the following\r\n    let reqDaysAgo = (currentTimestamp - requestTimestamp) / 8640000;\r\n    reqDaysAgo = Math.round(reqDaysAgo) / 10;\r\n\r\n    return reqDaysAgo;\r\n});\r\n\r\n\r\n// getting status class and accompanying text\r\nconst grabStatus = (dateFinished => {\r\n    let returnObj = {};\r\n    if(dateFinished === 0){\r\n        // date finished is 0 which means unfinished\r\n        returnObj.text = \"Still Working...\";\r\n        returnObj.class = \"status-yellow\";\r\n        return returnObj;\r\n    }else{\r\n        // date not 0, which means done, so get how many days ago done\r\n\r\n        // how many days ago?\r\n        let finDaysAgo = (currentTimestamp - dateFinished) / 8640000;\r\n        finDaysAgo = Math.round(finDaysAgo) / 10;\r\n\r\n        returnObj.text = \"Finished \" + finDaysAgo + \" Days Ago!\";\r\n        returnObj.class = \"status-green\";\r\n        return returnObj;\r\n    };\r\n});\r\n\r\n\r\n\r\n\r\n\r\nfunction StatusPage(props){\r\n    // debug: props.adminMode is true or false, props.dataRowAdmin would be the dataRowAdmin\r\n    // console.log(props);\r\n\r\n    // tag rows of data, these MUST be filled with the data type or else it will freak out\r\n    const[dataRow, setDataRow] = useState([{\r\n        id: 0,\r\n        data: {\r\n            color: \"\",\r\n            comments: \"\",\r\n            datefinished: 0,\r\n            daterequest: 0,\r\n            reqDaysAgo: 0,\r\n            attachment: \"\",\r\n            signColor: \"White / Green\",\r\n            signQuantity: 1,\r\n            height: 1,\r\n            width: 1,\r\n            thickness: \"\"\r\n        }\r\n    }]);\r\n\r\n    // this is to show and hide a load spinner, for some reason suspense isn't working with the tags not showing up\r\n    const[showPage, setShowPage] = useState(false);\r\n\r\n    // display all tags system done tag\r\n    const[tagsAreDone, setTagsAreDone] = useState(false);\r\n\r\n    // search value\r\n    const[searchValue, setSearchValue] = useState(\"\");\r\n\r\n    // container width padding, empty for normal mode, \"px-0\" for admin mode\r\n    const[adminPadding, setAdminPadding] = useState(\"\");\r\n\r\n    // h4 title\r\n    const[h4Title, setH4Title] = useState(\"STATUS for UNFINISHED TAGS:\");\r\n\r\n    // search bar placeholder\r\n    const[searchBarPlaceholder, setSearchBarPlaceholder] = useState(\"Search Already Ordered Tags\");\r\n\r\n    // function for done or undo button clicked, only on admin page\r\n    const tagsNeedUpdate = () => {\r\n        // immediately set the loader\r\n        setShowPage(false);\r\n        \r\n\r\n        // check if something was searched\r\n        if(searchValue === \"\"){\r\n            // empty string means no search query, so just read all mode\r\n\r\n            // read everything again\r\n            dbUtility({\r\n                mode: \"read_all\"\r\n            })\r\n            .then((statusTags) => {\r\n                // debug: this is what the promise resolved from in dbUtility()\r\n                // console.log(statusTags);\r\n\r\n                // setDataRow to the value of the db read\r\n                setDataRow(statusTags);\r\n                \r\n\r\n                // if statusTags are empty, set the tags to show\r\n                if(statusTags.length === 0){\r\n                    setTagsAreDone(true);\r\n                }\r\n\r\n                // hide manual non suspense spinner\r\n                setShowPage(true);\r\n\r\n                // update lift state up for admin page\r\n                props.setDataRowAdmin(statusTags);\r\n            });\r\n            \r\n        }else{\r\n            // anything else means search query, so search for mode\r\n            // console.log(searchValue);\r\n\r\n            // immediately show loader spinner\r\n            setH4Title(renderLoader);\r\n\r\n            // this is only for the admin page\r\n            dbUtility({\r\n                mode: \"read_all\"\r\n            })\r\n            .then((statusTags) => {\r\n                // update lift state up for admin page\r\n                props.setDataRowAdmin(statusTags);\r\n\r\n            })\r\n            .then(() => {\r\n\r\n                // this is for the status page, but only when it is on admin mode\r\n                dbUtility({\r\n                    mode: \"search_for\",\r\n                    searchForString: searchValue\r\n                }).then((returnResult) => {\r\n                    // returnResult is an array of documents that match\r\n                    setDataRow(returnResult);\r\n    \r\n                    \r\n                }).then(() => {\r\n                    // show result\r\n                    setShowPage(true);\r\n\r\n                    // immediately show loader spinner\r\n                    setH4Title(\"Results for: \" + searchValue);\r\n                });\r\n            });\r\n\r\n        };\r\n\r\n        \r\n    };\r\n\r\n\r\n    // run once only on mount\r\n    useEffect(() => {\r\n        \r\n\r\n        // grab all the unfinished tags using dbUtility promise\r\n        dbUtility({\r\n            mode: \"read_all\"\r\n        })\r\n        .then((statusTags) => {\r\n            // debug: this is what the promise resolved from in dbUtility()\r\n            // console.log(statusTags);\r\n\r\n            // setDataRow to the value of the db read\r\n            // a console.log here will NOT work!\r\n            setDataRow(statusTags);\r\n\r\n            // if statusTags are empty, set the tags to show\r\n            if(statusTags.length === 0){\r\n                setTagsAreDone(true);\r\n            }\r\n\r\n            // hide manual non suspense spinner\r\n            setShowPage(true);\r\n        });\r\n    },[]);\r\n\r\n    // run when dataRowAdmin updates\r\n    useEffect(() => {\r\n        // debug: did passing state down work?\r\n        // console.log(\"456\");\r\n\r\n        // now update itself to reflect changes\r\n        dbUtility({\r\n            mode: \"read_all\"\r\n        })\r\n        .then((statusTags) => {\r\n            // debug: this is what the promise resolved from in dbUtility()\r\n            // console.log(statusTags);\r\n\r\n            // setDataRow to the value of the db read\r\n            // a console.log here will NOT work!\r\n            setDataRow(statusTags);\r\n\r\n            // if statusTags are empty, set the tags to show\r\n            if(statusTags.length === 0){\r\n                setTagsAreDone(true);\r\n            }\r\n\r\n            // hide manual non suspense spinner\r\n            setShowPage(true);\r\n        });\r\n    },[props.dataRowAdmin]);\r\n\r\n\r\n    useEffect(() => {\r\n        // set h4 title and search bar placeholder on adminmode\r\n        if(props.adminMode){\r\n            setH4Title(\"Edit Individual Tag Status\");\r\n            setSearchBarPlaceholder(\"Search for Specific Tags\");\r\n            setAdminPadding(\"px-0\");\r\n        }\r\n    },[props.adminMode]);\r\n\r\n\r\n    useEffect(() => {\r\n        // console.log(dataRow);\r\n    },[dataRow]);\r\n\r\n\r\n    // return\r\n    return (\r\n        <Container className={ adminPadding }>\r\n            <Row className=\"justify-content-between mt-1 nav-h4-bar-bg print-hide\">\r\n                {\r\n                    !props.adminMode &&\r\n                    <Col xs=\"auto\" className=\"p-0\">\r\n                        <NavLink to=\"/\">\r\n                            <Button>\r\n                                BACK\r\n                            </Button>\r\n                        </NavLink>\r\n                    </Col>\r\n                }\r\n                <Col xs=\"auto\">\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        { h4Title }\r\n                    </h4>\r\n                </Col>\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                <InputGroup id=\"status-search-bar\">\r\n                    <FormControl\r\n                        placeholder={ searchBarPlaceholder }\r\n                        aria-label=\"Search\"\r\n                        aria-describedby=\"basic-addon1\"\r\n                        onChange={ (e) => {\r\n                            // on value change set searchValue to string\r\n                            let thisSearchValue = e.target.value;\r\n\r\n                            // lower casify it\r\n                            thisSearchValue = thisSearchValue.toLowerCase();\r\n\r\n                            setSearchValue(thisSearchValue);\r\n                        }}\r\n                        onKeyPress={ (e) => {\r\n                            if(e.key === 'Enter'){\r\n                                // if enter was pressed\r\n                                // console.log(searchValue);\r\n\r\n                                // if search value is empty, reset\r\n                                if(searchValue === \"\"){\r\n                                    // set the h4 title\r\n                                    setH4Title(\"Edit Individual Tag Status\");\r\n\r\n                                    dbUtility({\r\n                                        mode: \"read_all\"\r\n                                    })\r\n                                    .then((statusTags) => {\r\n                                        // debug: this is what the promise resolved from in dbUtility()\r\n                                        // console.log(statusTags);\r\n                            \r\n                                        // setDataRow to the value of the db read\r\n                                        // a console.log here will NOT work!\r\n                                        setDataRow(statusTags);\r\n                            \r\n                                        // if statusTags are empty, set the tags to show\r\n                                        if(statusTags.length === 0){\r\n                                            setTagsAreDone(true);\r\n                                        }\r\n                            \r\n                                        // hide manual non suspense spinner\r\n                                        setShowPage(true);\r\n                                    });\r\n                                }else{\r\n                                    // immediately show loader spinner\r\n                                    setH4Title(renderLoader);\r\n    \r\n    \r\n                                    // search using dbUtility\r\n                                    dbUtility({\r\n                                        mode: \"search_for\",\r\n                                        searchForString: searchValue\r\n                                    }).then((returnResult) => {\r\n                                        // returnResult is an array of documents that match\r\n                                        setDataRow(returnResult);\r\n    \r\n                                        // set the h4 title\r\n                                        setH4Title(\"Results for: \" + searchValue);\r\n                                    });\r\n                                };\r\n                            }\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n                </Col>\r\n            </Row>\r\n            {\r\n            (!showPage) &&\r\n            <Row>\r\n                <Spinner variant=\"danger\" animation=\"border\" role=\"status\">\r\n                    <span className=\"sr-only\">\r\n                        Loading...\r\n                    </span>\r\n                </Spinner>\r\n            </Row>\r\n            }\r\n            {\r\n                (tagsAreDone && !props.adminMode) &&\r\n                <Row className=\"justify-content-center mt-2\">\r\n                    <h5 className=\"green-text mt-2\">All tags in the system are done.</h5>\r\n                </Row>\r\n            }\r\n            {\r\n                showPage &&\r\n                dataRow.map((mapItem, index) => \r\n                    <Row className=\"mt-1 justify-content-between status-row\" key={ \"status-\" + mapItem.id }>\r\n                        {\r\n                            props.adminMode &&\r\n                            <Col xs={ 12 } md={ 1 } className=\"px-0\">\r\n                                <Row className=\"justify-content-center mt-1\">\r\n                                    <Col xs=\"auto\">\r\n                                        <Button \r\n                                            variant=\"success\" \r\n                                            className=\"admin-change-status-button\"\r\n                                            disabled={ \r\n                                                grabStatus(mapItem.data.datefinished).class === \"status-green\" ? true : false \r\n                                            }\r\n                                            onClick={ () => {\r\n                                                // update the entry with DONE\r\n                                                let tempIdArray = [];\r\n                                                tempIdArray.push(mapItem.id);\r\n                                                dbUtility({\r\n                                                    mode: \"update_entry\",\r\n                                                    type: \"done\",\r\n                                                    docIdArray: tempIdArray\r\n                                                }).then(() => {\r\n                                                    // somehow need to re-update\r\n\r\n                                                    tagsNeedUpdate();\r\n                                                });\r\n                                            }}>\r\n                                            &#10004;\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"justify-content-center mt-1\">\r\n                                    <Col xs=\"auto\">\r\n                                        <Button \r\n                                            variant=\"warning\" \r\n                                            className=\"admin-change-status-button\"\r\n                                            disabled={ \r\n                                            grabStatus(mapItem.data.datefinished).class === \"status-yellow\" ? true : false \r\n                                        }\r\n                                        onClick={ () => {\r\n                                            // debug: grab id of item clicked on\r\n                                            // console.log(mapItem.id);\r\n                                            let tempIdArray = [];\r\n                                            tempIdArray.push(mapItem.id);\r\n\r\n                                            // update the entry with UNDO / notdone\r\n                                            dbUtility({\r\n                                                mode: \"update_entry\",\r\n                                                type: \"notdone\",\r\n                                                docIdArray: tempIdArray\r\n                                            }).then(() => {\r\n                                                // somehow need to re-update\r\n                                                tagsNeedUpdate();\r\n                                            });\r\n                                        }}>\r\n                                            &#10226;\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                        }\r\n                        <Col xs={ 12 } md={ props.adminMode ? 5 : 6 } className=\"px-0\">\r\n                            <Suspense fallback={ renderLoader }>\r\n                                {\r\n                                    (mapItem.data.color !== 5) &&\r\n                                    <CreatePreviewImage data={{ \r\n                                        name: mapItem.data.name,\r\n                                        secondLine: mapItem.data.titlecity,\r\n                                        thirdLine: mapItem.data.thirdline,\r\n                                        colorCode: mapItem.data.color\r\n                                    }} />\r\n                                }\r\n                                {\r\n                                    (mapItem.data.color === 5) &&\r\n                                    <CreatePreviewImage data={{ \r\n                                        name: mapItem.data.name,\r\n                                        colorCode: 5,\r\n                                        signColor: mapItem.data.signcolor,\r\n                                        attachment: mapItem.data.attachment,\r\n                                        height: mapItem.data.height,\r\n                                        width: mapItem.data.width\r\n                                    }} />\r\n                                }\r\n                            </Suspense>\r\n                        </Col>\r\n                        <Col xs={ 12 } md={ 4 } className=\"px-0\">\r\n                            <Row>\r\n                                <Col>\r\n                                    <p className=\"status-b-col-text\">Requestor: { mapItem.data.requestor }</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p className=\"status-b-col-text\">Requested: { grabDaysAgo(mapItem.data.daterequest) } Days Ago</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    {\r\n                                        (mapItem.data.color !== 5) &&\r\n                                        <p className=\"status-b-col-text\">Quantity: { mapItem.data.quantity }</p>\r\n                                    }\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p className=\"status-b-col-text\">Comments: { mapItem.data.comments }</p>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col xs={ 12 } md={ 2 } className={ grabStatus(mapItem.data.datefinished).class }>\r\n                            <p>STATUS: { grabStatus(mapItem.data.datefinished).text }</p>\r\n                        </Col>\r\n                    </Row>\r\n                )\r\n            }\r\n        </Container>\r\n    );\r\n  }\r\n  \r\n  export default StatusPage;"],"sourceRoot":""}