{"version":3,"sources":["js/NavPage.js","js/App.js","serviceWorker.js","index.js"],"names":["NavPage","Container","className","Navbar","id","to","Button","HomePage","lazy","StatusPage","AdminPage","CustomSignPage","CreateTagPage","CreateMultiTagPage","renderLoader","Spinner","variant","animation","role","App","PrintProvider","exact","path","fallback","adminMode","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8SA4BiBA,MAvBjB,WACI,OACI,kBAACC,EAAA,EAAD,CAAWC,UAAU,qCACjB,kBAACC,EAAA,EAAD,CAAQC,GAAG,gBACP,wBAAIA,GAAG,aAAP,wBAGA,uBAAGA,GAAG,gBAAN,mBAGA,uBAAGA,GAAG,aAGN,kBAAC,IAAD,CAASC,GAAG,UACR,kBAACC,EAAA,EAAD,CAAQF,GAAG,2B,+BCHzBG,EAAWC,gBAAM,kBAAM,8DACvBC,EAAaD,gBAAM,kBAAM,8DACzBE,EAAYF,gBAAM,kBAAM,8DACxBG,EAAiBH,gBAAM,kBAAM,sEAC7BI,EAAgBJ,gBAAM,kBAAM,8DAC5BK,EAAqBL,gBAAM,kBAAM,qEAGjCM,EACJ,kBAACC,EAAA,EAAD,CAASC,QAAQ,SAASC,UAAU,SAASC,KAAK,UAChD,0BAAMhB,UAAU,WAAhB,eAsDWiB,MA/Cf,WAIE,OACE,kBAACC,EAAA,EAAD,KACA,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAACnB,EAAA,EAAD,CAAWG,GAAG,0BACZ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOiB,OAAK,EAACC,KAAK,KAChB,kBAAC,WAAD,CAAUC,SAAWT,GACnB,kBAACP,EAAD,QAGJ,kBAAC,IAAD,CAAOe,KAAK,WACV,kBAAC,WAAD,CAAUC,SAAWT,GACnB,kBAACL,EAAD,CAAYe,WAAY,MAG5B,kBAAC,IAAD,CAAOF,KAAK,UACV,kBAAC,WAAD,CAAUC,SAAWT,GACnB,kBAACJ,EAAD,QAGJ,kBAAC,IAAD,CAAOY,KAAK,eACV,kBAAC,WAAD,CAAUC,SAAWT,GACnB,kBAACF,EAAD,QAGJ,kBAAC,IAAD,CAAOU,KAAK,SACV,kBAAC,WAAD,CAAUC,SAAWT,GACnB,kBAACH,EAAD,QAGJ,kBAAC,IAAD,CAAOW,KAAK,uBACV,kBAAC,WAAD,CAAUC,SAAWT,GACnB,kBAACD,EAAD,aC1DMY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.83d71c84.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Navbar, Container, Button } from 'react-bootstrap';\r\nimport '../css/nav.css';\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nfunction NavPage() {\r\n    return (\r\n        <Container className=\"title-banner-container print-hide\">\r\n            <Navbar id=\"title-banner\">\r\n                <h3 id=\"banner-h3\">\r\n                    Deer Valley Nametags\r\n                </h3>\r\n                <p id=\"under-banner\">\r\n                    Empire Signshop\r\n                </p>\r\n                <p id=\"advisory\">\r\n                    \r\n                </p>\r\n                <NavLink to=\"/admin\">\r\n                    <Button id=\"admin-login-button\">\r\n\r\n                    </Button>\r\n                </NavLink>\r\n            </Navbar>\r\n        </Container>\r\n    );\r\n  }\r\n  \r\n  export default NavPage;\r\n  ","import React, { lazy, Suspense } from 'react';\nimport '../css/app.css';\nimport NavPage from './NavPage.js';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { \n  Container,\n  Spinner\n} from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport PrintProvider from 'react-easy-print';\n\n// lazy imports\nconst HomePage = lazy( () => import('./HomePage.js'));\nconst StatusPage = lazy( () => import('./StatusPage.js'));\nconst AdminPage = lazy( () => import('./AdminPage.js'));\nconst CustomSignPage = lazy( () => import('./CustomSignPage.js'));\nconst CreateTagPage = lazy( () => import('./CreateTagPage.js'));\nconst CreateMultiTagPage = lazy( () => import('./CreateMultiTagPage.js'));\n\n// lazy load spinner\nconst renderLoader = (\n  <Spinner variant=\"danger\" animation=\"border\" role=\"status\">\n    <span className=\"sr-only\">\n      Loading...\n    </span>\n  </Spinner>\n);\n\n// start main app: mainly routing\nfunction App() {\n  \n\n\n  return (\n    <PrintProvider>\n    <Router>\n      <NavPage />\n      <Container id=\"main-content-container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Suspense fallback={ renderLoader }>\n              <HomePage />\n            </Suspense>\n          </Route>\n          <Route path=\"/status\">\n            <Suspense fallback={ renderLoader }>\n              <StatusPage adminMode={ false } />\n            </Suspense>\n          </Route>\n          <Route path=\"/admin\">\n            <Suspense fallback={ renderLoader }>\n              <AdminPage />\n            </Suspense>\n          </Route>\n          <Route path=\"/create/:id\">\n            <Suspense fallback={ renderLoader }>\n              <CreateTagPage />\n            </Suspense>\n          </Route>\n          <Route path=\"/sign\">\n            <Suspense fallback={ renderLoader }>\n              <CustomSignPage />\n            </Suspense>\n          </Route>\n          <Route path=\"/createmultiple/:id\">\n            <Suspense fallback={ renderLoader }>\n              <CreateMultiTagPage />\n            </Suspense>\n          </Route>\n        </Switch>\n      </Container>\n    </Router>\n    </PrintProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './js/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}