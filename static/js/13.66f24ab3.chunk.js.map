{"version":3,"sources":["js/CreateSignColor.js","js/CustomSignPage.js"],"names":["CreateSignColor","data","textToDisplay","color","toUpperCase","slice","bg","Container","className","CustomSignPage","history","useHistory","useState","requestor","comments","attachment","name","signColor","signQuantity","height","width","thickness","submitArray","setSubmitArray","modifySubmitArray","property","value","validation","validatedText","textValidation","priorSubmitObj","useEffect","setSubmitGrey","setStatusTextIndex","console","log","submitGrey","statusTextIndex","Row","Col","xs","to","Button","CreatePreviewImage","colorCode","InputGroup","FormControl","placeholder","aria-label","onChange","e","target","as","md","Dropdown","Toggle","Menu","title","map","mapItem","index","Item","key","onClick","lg","type","disabled","dbUtility","mode","writeData","then","statusBack","push"],"mappings":"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","file":"static/js/13.66f24ab3.chunk.js","sourcesContent":["import React from 'react';\r\nimport { \r\n    Container\r\n} from 'react-bootstrap';\r\nimport '../css/signcolor.css';\r\n\r\nfunction CreateSignColor(data) {\r\n    /*\r\n    data use format: \r\n    <CreateSignColor data={ \r\n        color: \"\",\r\n        bg: \"\"\r\n    } />\r\n    -\r\n    appropriate string values for color and bg(lowercase):\r\n    black\r\n    bronze\r\n    red\r\n    white\r\n    green\r\n    brown\r\n    silver\r\n    blue\r\n    orange\r\n    yellow\r\n    */\r\n    // console.log(data);\r\n\r\n    // text, mainly, capitalize first letter, then combine with a '/'\r\n    const textToDisplay = (data.data.color[0].toUpperCase()) + (data.data.color.slice(1)) + \" / \" + (data.data.bg[0].toUpperCase()) + (data.data.bg.slice(1));\r\n\r\n    // return page with compiled data\r\n    return (\r\n    <Container className={ \"color-\" + data.data.color + \" bg-\" + data.data.bg + \" bg-basic\" }>\r\n        { textToDisplay }\r\n    </Container>\r\n    );\r\n}\r\n\r\nexport default CreateSignColor;","import React, { useState, useEffect } from 'react';\r\nimport { useHistory, NavLink } from \"react-router-dom\";\r\n\r\n// layout import\r\nimport { \r\n    Container, \r\n    Button,\r\n    Row,\r\n    Col,\r\n    InputGroup,\r\n    FormControl,\r\n    Dropdown\r\n} from 'react-bootstrap';\r\nimport '../css/nav.css';\r\nimport '../css/signcolor.css';\r\n\r\n// utility import\r\nimport CreateSignColor from './CreateSignColor.js';\r\nimport CreatePreviewImage from './CreatePreviewImage.js';\r\nimport { textValidation } from './textValidation.js';\r\nimport { dbUtility } from './dbUtility.js';\r\n\r\n\r\n// start page\r\nconst CustomSignPage = () => {\r\n    // this is to be able to load status window when tag created\r\n    let history = useHistory();\r\n    \r\n\r\n    // set the submit array(same data format as multi tag) to default values\r\n    const[ submitArray, setSubmitArray ] = useState([{\r\n        color: 5,\r\n        requestor: \"\",\r\n        comments: \"\",\r\n        attachment: \"Attachment Style\",\r\n        name: \"\",\r\n        signColor: \"White / Green\",\r\n        signQuantity: 1,\r\n        height: \"Height(Inches)(Max 8.5\\\")\",\r\n        width: \"Width(Inches)(Max 12\\\")\",\r\n        thickness: \"Thickness\"\r\n    }]);\r\n\r\n\r\n    // set the sign color data\r\n    const signColorData = [{\r\n        color: \"white\",\r\n        bg: \"green\",\r\n        title: \"White / Green\"\r\n    },{\r\n        color: \"white\",\r\n        bg: \"blue\",\r\n        title: \"White / Blue\"\r\n    },{\r\n        color: \"black\",\r\n        bg: \"bronze\",\r\n        title: \"Black / Bronze\"\r\n    },{\r\n        color: \"black\",\r\n        bg: \"orange\",\r\n        title: \"Black / Orange\"\r\n    },{\r\n        color: \"white\",\r\n        bg: \"brown\",\r\n        title: \"White / Brown\"\r\n    },{\r\n        color: \"black\",\r\n        bg: \"yellow\",\r\n        title: \"Black / Yellow\"\r\n    },{\r\n        color: \"white\",\r\n        bg: \"red\",\r\n        title: \"White / Red\"\r\n    },{\r\n        color: \"black\",\r\n        bg: \"red\",\r\n        title: \"Black / Red\"\r\n    },{\r\n        color: \"black\",\r\n        bg: \"white\",\r\n        title: \"Black / White\"\r\n    },{\r\n        color: \"black\",\r\n        bg: \"silver\",\r\n        title: \"Black / Silver\"\r\n    },{\r\n        color: \"white\",\r\n        bg: \"black\",\r\n        title: \"White / Black\"\r\n    }];\r\n\r\n\r\n    // submit button on request\r\n    const submitRequest = () => {\r\n        // check to make sure user hasn't done in-browser html magic to bypass disabled submit button\r\n        // an empty or invalid request\r\n        if(submitGrey === false){\r\n            // pass, as its unlikely to change a react page variable in browser unless superuser\r\n\r\n            // change status text to loading\r\n            setStatusTextIndex(3);\r\n\r\n            // db new entry\r\n            dbUtility({\r\n                mode: \"new_entry\",\r\n                writeData: submitArray\r\n            }).then(function(statusBack){\r\n                // console.log(statusBack)\r\n                // on success, navigate to /status\r\n                history.push(\"/status\");\r\n            });\r\n        }else{\r\n            // failed, this shouldn't happen though\r\n        };\r\n    }\r\n\r\n    /*\r\n    // debug: what is submitArray on update\r\n    useEffect(() => {\r\n        console.log(submitArray);\r\n    },[submitArray]);\r\n    */\r\n\r\n    // modify one element of the array\r\n    const modifySubmitArray = (property, value, validation) => {\r\n        // console.log(validation);\r\n        // text validate if it wants it\r\n        let validatedText;\r\n        if(validation){\r\n            validatedText = textValidation(value, 3);\r\n        }else{\r\n            validatedText = value;\r\n        }\r\n\r\n        // grab prior values except for changed element\r\n        let priorSubmitObj = submitArray[0];\r\n        priorSubmitObj[property] = validatedText;\r\n        setSubmitArray([priorSubmitObj]);\r\n    };\r\n\r\n\r\n    // update the status text and disable/enable button\r\n    useEffect(() => {\r\n        // also update the submission status, e.g. you need X or Y to submit\r\n        // if empty string or 0\r\n        if(submitArray[0].name === \"\" && submitArray[0].requestor === \"\"){\r\n            // false due to name AND requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(0);\r\n        }else if(submitArray[0].name === \"\"){\r\n            // false only to name\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(2);\r\n        }else if(submitArray[0].requestor === \"\"){\r\n            // false only to requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(1);\r\n        }else if(submitArray[0].name !== \"\" && submitArray[0].requestor !== \"\"){\r\n            // true only if name AND requestor are not empty strings set from textValidation\r\n            setSubmitGrey(false);\r\n            setStatusTextIndex(4);\r\n        }else{\r\n            // some other condition\r\n            console.log(\"updateSubmitGrey() ran into some other condition on validation!\");\r\n        };\r\n\r\n        // console.log(submitArray);\r\n\r\n    },[submitArray]);\r\n\r\n\r\n    // submit grey button text and status text\r\n    const[ submitGrey, setSubmitGrey ] = useState(true);\r\n    // for the status text, only the index of it changes, not the actual string [4] is empty string\r\n    const statusText = [\r\n        \"There must be a requestor, Sign Content must be at least 3 characters.\",\r\n        \"There must be a requestor.\",\r\n        \"Sign Content must be at least 3 characters.\",\r\n        \"Submitting...\",\r\n        \"\"\r\n    ];\r\n    const[ statusTextIndex, setStatusTextIndex ] = useState(0);\r\n\r\n    // setting layout sizes\r\n    const xsSize = 12;\r\n    const mdSize = 6;\r\n\r\n    // return\r\n    return (\r\n        <Container>\r\n            <Row className=\"justify-content-between nav-h4-bar-bg\">\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    <NavLink to=\"/\">\r\n                        <Button>\r\n                            BACK\r\n                        </Button>\r\n                    </NavLink>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW CUSTOM SIGN\r\n                    </h4>\r\n                </Col>\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    \r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mt-3 px-0 justify-content-center\">\r\n                Preview:\r\n            </Row>\r\n            <Row className=\"mt-3 px-0 justify-content-center\">\r\n                <Col xs=\"auto\">\r\n                    <CreatePreviewImage data={{ \r\n                        colorCode: 5, \r\n                        name: submitArray[0].name,\r\n                        height: submitArray[0].height,\r\n                        width: submitArray[0].width,\r\n                        attachment: submitArray[0].attachment,\r\n                        signColor: submitArray[0].signColor\r\n                    }} />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-4\">\r\n                    <FormControl\r\n                        placeholder=\"Requestor (or: WHO to Mail it to)\"\r\n                        aria-label=\"Requestor\"\r\n                        onChange={ e => { modifySubmitArray(\"requestor\", e.target.value, true); }} \r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        as=\"textarea\"\r\n                        placeholder=\"Sign Contents\"\r\n                        aria-label=\"Sign\"\r\n                        onChange={ e => { modifySubmitArray(\"name\", e.target.value, true); }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={ 12 } md={ 4 } className=\"px-0\">\r\n                    <InputGroup className=\"mt-3\">\r\n                        <FormControl\r\n                            placeholder={ submitArray[0].height }\r\n                            aria-label=\"Height\"\r\n                            onChange={ e => { modifySubmitArray(\"height\", e.target.value, false); }}\r\n                        />\r\n                    </InputGroup>\r\n                </Col>\r\n                <Col xs={ 12 } md={ 4 } className=\"px-0 pl-md-2\">\r\n                    <InputGroup className=\"mt-3\">\r\n                        <FormControl\r\n                            placeholder={ submitArray[0].width }\r\n                            aria-label=\"Width\"\r\n                            onChange={ e => { modifySubmitArray(\"width\", e.target.value, false); }}\r\n                        />\r\n                    </InputGroup>\r\n                </Col>\r\n                <Col xs={ 12 } md={ 4 } className=\"px-0 pl-md-2\">\r\n                    <InputGroup className=\"mt-3\">\r\n                        <Dropdown className=\"w-100\">\r\n                            <Dropdown.Toggle>\r\n                                { submitArray[0].signColor }\r\n                            </Dropdown.Toggle>\r\n                            <Dropdown.Menu>\r\n                                {\r\n                                    signColorData.map( (mapItem, index) =>\r\n                                        <Dropdown.Item \r\n                                            key={ index }\r\n                                            onClick={ () => { modifySubmitArray(\"signColor\", mapItem.title, false); }}>\r\n                                            <CreateSignColor data={{ color: mapItem.color, bg: mapItem.bg }} />\r\n                                        </Dropdown.Item>\r\n                                    )\r\n                                }\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </InputGroup>\r\n                </Col>\r\n                \r\n            </Row>\r\n            <Row>\r\n                <Col xs={ 12 } md={ 4 } className=\"px-0\">\r\n                    <InputGroup className=\"mt-3\">\r\n                        <Dropdown className=\"w-100\">\r\n                            <Dropdown.Toggle>\r\n                                { submitArray[0].thickness }\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item onClick={ e => { modifySubmitArray(\"thickness\", \"Thin\", false); }}>Thin</Dropdown.Item>\r\n                                <Dropdown.Item onClick={ e => { modifySubmitArray(\"thickness\", \"Normal\", false); }}>Normal</Dropdown.Item>\r\n                                <Dropdown.Item onClick={ e => { modifySubmitArray(\"thickness\", \"Thick\", false); }}>Thick</Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </InputGroup>\r\n                </Col>\r\n                <Col xs={ 12 } md={ 4 } className=\"px-0 pl-md-2\">\r\n                    <InputGroup className=\"mt-3\">\r\n                        <Dropdown className=\"w-100\">\r\n                            <Dropdown.Toggle>\r\n                                { submitArray[0].attachment }\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item onClick={ e => { modifySubmitArray(\"attachment\", \"Velcro\", false); }}>Velcro</Dropdown.Item>\r\n                                <Dropdown.Item onClick={ e => { modifySubmitArray(\"attachment\", \"Holes\", false); }}>Holes</Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </InputGroup>\r\n                </Col>\r\n                <Col xs={ 12 } md={ 4 } className=\"px-0 pl-md-2\">\r\n                    <InputGroup className=\"mt-3\">\r\n                        <FormControl\r\n                            placeholder=\"Quantity\"\r\n                            aria-label=\"Sign Quantity\"\r\n                            onChange={ e => { modifySubmitArray(\"signQuantity\", e.target.value, false); }}\r\n                        />\r\n                    </InputGroup>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        as=\"textarea\"\r\n                        placeholder=\"Comments\"\r\n                        aria-label=\"Comments\"\r\n                        onChange={ e => { modifySubmitArray(\"comments\", e.target.value, false); }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row className=\"mt-3 justify-content-end\">\r\n                <Col xs={xsSize} md={mdSize} lg=\"auto\">\r\n                    <p className=\"mt-2\">{ statusText[statusTextIndex] }</p>\r\n                </Col>\r\n                <Col xs={xsSize} md={mdSize} lg=\"auto\">\r\n                    <Button type=\"submit\" disabled={ submitGrey } onClick={ submitRequest }>Submit Request</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CustomSignPage;"],"sourceRoot":""}