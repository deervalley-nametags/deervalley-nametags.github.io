{"version":3,"sources":["js/dbUtility.js","js/StatusPage.js"],"names":["namesRef","promiseReturn","loginAs","user","pass","Promise","resolve","reject","firebase","auth","setPersistence","Auth","Persistence","NONE","then","signInWithEmailAndPassword","catch","error","errorCode","code","errorMessage","message","msg","checkAuth","onAuthStateChanged","console","log","email","dbUtility","utilityObj","apps","initializeApp","apiKey","authDomain","projectId","db","firestore","collection","sqrtNonPattern","Math","sqrt","mode","authUser","authPass","returned","where","get","querySnapshot","forEach","doc","findIndex","obj","id","push","data","searchForString","writeData","arrayItem","index","tagName","name","tagRequestor","requestor","prependNameArray","toLowerCase","prependRequestorArray","nameArray","split","requestorArray","unshift","currentTimestamp","Date","getTime","color","add","namearray","attachment","signcolor","signColor","signquantity","signQuantity","height","width","thickness","requestorarray","comments","daterequest","datefinished","titlecity","secondLine","thirdline","thirdLine","quantity","type","date","docIdArray","item","update","CreatePreviewImage","lazy","renderLoader","variant","animation","role","className","grabStatus","dateFinished","returnObj","text","class","finDaysAgo","round","StatusPage","props","useState","reqDaysAgo","dataRow","setDataRow","showPage","setShowPage","tagsAreDone","setTagsAreDone","searchValue","setSearchValue","adminPadding","setAdminPadding","h4Title","setH4Title","searchBarPlaceholder","setSearchBarPlaceholder","tagsNeedUpdate","statusTags","length","setDataRowAdmin","returnResult","useEffect","dataRowAdmin","adminMode","xs","to","placeholder","aria-label","aria-describedby","onChange","e","thisSearchValue","target","value","onKeyPress","key","map","mapItem","md","disabled","onClick","tempIdArray","fallback","colorCode","requestTimestamp","grabDaysAgo"],"mappings":"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","file":"static/js/12.a67be8b1.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\n// highest order variables\r\nlet namesRef; // db reference\r\nlet promiseReturn;\r\n\r\nfunction loginAs(user, pass){\r\n    return new Promise((resolve, reject) => {\r\n        \r\n        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\r\n        .then(function() {\r\n            // persistence types:\r\n            // .NONE = reload will not keep session\r\n            // .SESSION = reload will keep session, but closing and reopening will not\r\n            \r\n            return firebase.auth().signInWithEmailAndPassword(user, pass);\r\n        })\r\n        .then(function(){\r\n            resolve(true);\r\n        })\r\n        .catch(function(error) {\r\n            //  Handle Errors here.\r\n            let errorCode = error.code;\r\n            let errorMessage = error.message;\r\n            // console.log(errorCode + \" -1- \" + errorMessage);\r\n\r\n            reject({\r\n                code: errorCode,\r\n                msg: errorMessage\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nfunction checkAuth(){\r\n    // check auth\r\n    return new Promise((resolve, reject) => {\r\n        firebase.auth().onAuthStateChanged(function(user) {\r\n            if(user){\r\n                //  User is signed in.\r\n                console.log(\"checkAuth() passed with user: \" + user.email);\r\n        \r\n                resolve(user.email);\r\n            }else{\r\n                //  No user is signed in.\r\n                console.log(\"checkAuth() failed: no credentials.\");\r\n            };\r\n        });\r\n\r\n    });\r\n};\r\n\r\nexport function dbUtility(utilityObj){\r\n    /*\r\n    this is a master use-all use-anywhere connect to db PROMISE\r\n    so if you are switching from firebase to something else, you know\r\n    exactly what needs to be replaced\r\n    -\r\n    its a promise because it relies on waiting on the authentication mainly\r\n    so can use it like dbUtility({mode:\"\"}).then(() => { // do stuff here });\r\n    -\r\n    utilityObj has the following data structure for its different modes:\r\n    {\r\n        mode: \"auth\",\r\n        authUser: \"\",\r\n        authPass: \"\"\r\n    }\r\n    {\r\n        mode: \"new_entry\",\r\n        writeData: [{name:,requestor:,etc},{},// etc]\r\n    }\r\n    {\r\n        mode: \"search_for\", // returns array full of found tags\r\n        searchForString: \"string to search\"\r\n    }\r\n    {\r\n        mode: \"read_all\" // returns array full of objects full of tags\r\n    }\r\n    {\r\n        mode: \"update_entry\",\r\n        type: \"done\" or \"notdone\"\r\n        docIdArray: [\"id\",\"id\",\"id\",// etc]\r\n    }\r\n    */\r\n   \r\n\r\n    // if not yet initialized, initialize\r\n    // debug: typeof firebase.apps[0] comes undefined if not previously init, or object if init\r\n    // console.dir(typeof firebase.apps[0]);\r\n    if(typeof firebase.apps[0] == \"undefined\"){\r\n       // not init yet\r\n       \r\n       // firebase init using firestore\r\n       firebase.initializeApp({\r\n           apiKey: 'AIzaSyA1uPdDnmLSWqkuEkFlGH5YF7UvxvszceU',\r\n           authDomain: 'nametags-4019a.firebaseapp.com',\r\n           projectId: 'nametags-4019a'\r\n        });\r\n        \r\n        // creation of db\r\n        const db = firebase.firestore();\r\n        namesRef = db.collection(\"names\");\r\n        \r\n        // db authenticate as anon\r\n        // bad obfuscation time\r\n        let sqrtNonPattern = Math.sqrt(4356);\r\n        sqrtNonPattern = \"iamanonymous\" + sqrtNonPattern;\r\n        sqrtNonPattern = sqrtNonPattern + \"6\";\r\n        loginAs(\"anonymous@deervalley.com\",sqrtNonPattern);\r\n        \r\n    }\r\n    \r\n\r\n    // authenticate\r\n    if(utilityObj.mode === \"auth\"){\r\n        return new Promise((resolve, reject) => {\r\n            // first login, must wait so it is a promise\r\n            loginAs(utilityObj.authUser, utilityObj.authPass).then( () => {\r\n                // now we need to use check auth in order to grab the user\r\n                checkAuth().then( returned => {\r\n                    // only if user is admin, resolve\r\n                    // console.log(\"pio \" + returned);\r\n                    resolve(returned);\r\n                }).catch( error => {\r\n                    \r\n                });\r\n            }).catch( error => {\r\n                reject(error);\r\n            });\r\n        });\r\n    };\r\n    \r\n\r\n    // mode check\r\n    if(utilityObj.mode === \"read_all\"){\r\n        /*\r\n        read all mode, but because of read limits on google firebase free version, only\r\n        grab the unfinished tags\r\n        -\r\n        set return type to array before pushing\r\n        */\r\n        promiseReturn = [];\r\n        \r\n        // return promise\r\n        return new Promise((resolve, reject) => {\r\n\r\n            // check auth before getting doc data\r\n            checkAuth().then(function(){\r\n                namesRef.where(\"datefinished\", \"==\", 0).get().then(function(querySnapshot){\r\n                    querySnapshot.forEach(function(doc){\r\n                        // for each document found as unfinished, array push the following\r\n\r\n                        // search for any matching id's in promiseReturn\r\n                        // this section is because for some reason it was duplicating, so now it only does one once\r\n                        let priorExistingId = promiseReturn.findIndex(obj => obj.id === doc.id);\r\n                        if(priorExistingId === -1){\r\n                            // -1 means it did not find a prior id, so go ahead\r\n                            // array push the following\r\n                            promiseReturn.push({\r\n                                id: doc.id,\r\n                                data: doc.data()\r\n                            });\r\n                        }else{\r\n                            // anything else means if found something prior, so do nothing\r\n                        }\r\n                    });\r\n                    resolve(promiseReturn);\r\n                });\r\n            });\r\n\r\n        });\r\n\r\n\r\n    }else if(utilityObj.mode === \"search_for\"){\r\n        // search mode\r\n        let promiseReturn = [];\r\n\r\n        // return promise\r\n        return new Promise((resolve, reject) => {\r\n            // check auth before getting doc data\r\n            checkAuth().then(function(){\r\n                // grab results where name is being searched for\r\n                namesRef.where(\"namearray\", \"array-contains-any\", [utilityObj.searchForString]).get().then(function(querySnapshot){\r\n                    querySnapshot.forEach(function(doc){\r\n                        // for each document found, array push the following\r\n                        promiseReturn.push({\r\n                            id: doc.id,\r\n                            data: doc.data()\r\n                        });\r\n                    });\r\n                }).then(function(){\r\n                    // now grab all results where requestor could be searched for, this allows duplicate results\r\n                    namesRef.where(\"requestorarray\", \"array-contains-any\", [utilityObj.searchForString]).get().then(function(querySnapshot){\r\n                        querySnapshot.forEach(function(doc){\r\n                            // for each document found\r\n                            \r\n                            // search for any matching id's in promiseReturn\r\n                            let priorExistingId = promiseReturn.findIndex(obj => obj.id === doc.id);\r\n                            if(priorExistingId === -1){\r\n                                // -1 means it did not find a prior id, so go ahead\r\n                                // array push the following\r\n                                promiseReturn.push({\r\n                                    id: doc.id,\r\n                                    data: doc.data()\r\n                                });\r\n                            }else{\r\n                                // anything else means if found something prior, so do nothing\r\n                            }\r\n                        });\r\n                        resolve(promiseReturn);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }else if(utilityObj.mode === \"new_entry\"){\r\n        /*\r\n        used for new entries\r\n        data in:\r\n        array[{name:\"\",requestor:\"\",secondLine:\"\",thirdLine:\"\",requestor:\"\",comments:\"\"},{},{},etc]\r\n        -\r\n        set return type to array before pushing\r\n        */\r\n        promiseReturn = [];\r\n\r\n        // debug: what does writeData come in as\r\n        // console.log(utilityObj.writeData);\r\n\r\n        // return promise\r\n        return new Promise((resolve, reject) => {\r\n            // check auth before submitting\r\n            checkAuth().then(function(){\r\n                utilityObj.writeData.forEach(function(arrayItem, index){\r\n                    // console.log(arrayItem);\r\n\r\n                    // lower casify and split name to an array, searching can be done easilyer\r\n                    let tagName = arrayItem.name;\r\n                    let tagRequestor = arrayItem.requestor;\r\n                    let prependNameArray = tagName.toLowerCase();\r\n                    let prependRequestorArray = tagRequestor.toLowerCase();\r\n            \r\n                    // before split, add temp var and prepend name to array, so \"Jake Smith\"\r\n                    // looks like [\"jake smith\",\"jake\",\"smith\"]\r\n                    let nameArray = prependNameArray.split(\" \");\r\n                    let requestorArray = prependRequestorArray.split(\" \");\r\n                    nameArray.unshift(prependNameArray);\r\n                    requestorArray.unshift(prependRequestorArray);\r\n                    \r\n                    // grab current timestamp\r\n                    let date = new Date();\r\n                    let currentTimestamp = date.getTime();\r\n            \r\n                    // if sign, add only sign stuff\r\n                    if(arrayItem.color === 5){\r\n                        // sign\r\n                        // make a new document in db, auto gen id\r\n                        namesRef.add({\r\n                            name: tagName,\r\n                            namearray: nameArray,\r\n                            color: 5,\r\n                            attachment: arrayItem.attachment,\r\n                            signcolor: arrayItem.signColor,\r\n                            signquantity: arrayItem.signQuantity,\r\n                            height: arrayItem.height,\r\n                            width: arrayItem.width,\r\n                            thickness: arrayItem.thickness,\r\n                            requestor: tagRequestor,\r\n                            requestorarray: requestorArray,\r\n                            comments: arrayItem.comments,\r\n                            daterequest: currentTimestamp,\r\n                            datefinished: 0\r\n                        }).then(function(){\r\n                            // debug when writing is successful\r\n                            // console.log(\"writing good\");\r\n                            resolve(true);\r\n                        });\r\n                    }else{\r\n                        // anything other than sign\r\n                        // make a new document in db, auto gen id\r\n                        namesRef.add({\r\n                            name: tagName,\r\n                            namearray: nameArray,\r\n                            color: arrayItem.color,\r\n                            titlecity: arrayItem.secondLine,\r\n                            thirdline: arrayItem.thirdLine,\r\n                            requestor: tagRequestor,\r\n                            requestorarray: requestorArray,\r\n                            comments: arrayItem.comments,\r\n                            daterequest: currentTimestamp,\r\n                            datefinished: 0,\r\n                            quantity: arrayItem.quantity\r\n                        }).then(function(){\r\n                            // debug when writing is successful\r\n                            // console.log(\"writing good\");\r\n                            resolve(true);\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n    }else if(utilityObj.mode === \"auth\"){\r\n        // if auth is called here, just do nothing, as there is a section above that handles it,\r\n        // but if this was empty it would throw some form of error\r\n    }else if(utilityObj.mode === \"update_entry\"){\r\n        // return promise\r\n        return new Promise((resolve, reject) => {\r\n\r\n            // update entry, mainly used to update if admin finished or unfinished a tag\r\n            let currentTimestamp;\r\n\r\n            // handle types\r\n            if(utilityObj.type === \"done\"){\r\n                // update to done\r\n                // grab current timestamp\r\n                let date = new Date();\r\n                currentTimestamp = date.getTime();\r\n\r\n            }else if(utilityObj.type === \"notdone\"){\r\n                // update to not done, aka undo\r\n                currentTimestamp = 0;\r\n            }else{\r\n                // mode not supported\r\n            }\r\n\r\n            // now update db for each\r\n            utilityObj.docIdArray.forEach((item, index) => {\r\n                // debug: does item come out as the doc Id?\r\n                // console.log(item);\r\n                \r\n                namesRef.doc(item).update({\r\n                    datefinished: currentTimestamp\r\n                })\r\n                .then(function() {\r\n                    console.log(\"Document successfully written on update_entry()!\");\r\n                    resolve(true);\r\n                })\r\n                .catch(function(error) {\r\n                    console.error(\"Error writing document on update_entry(): \", error);\r\n                });\r\n\r\n            });\r\n        });\r\n    }else{\r\n        // something else encountered\r\n        console.log(\"dbUtility() was called using a non supported utilityObj mode.\");\r\n        console.log(\"supported modes are 'read_all', 'search_for', 'new_entry', 'update_entry', or 'auth'.\");\r\n        console.log(utilityObj.mode);\r\n    };\r\n\r\n};\r\n","import React, { \r\n    useState, \r\n    useEffect,\r\n    Suspense,\r\n    lazy\r\n} from 'react';\r\nimport { \r\n    Container, \r\n    Button,\r\n    Row,\r\n    Col,\r\n    Spinner,\r\n    InputGroup,\r\n    FormControl\r\n} from 'react-bootstrap';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { dbUtility } from './dbUtility.js';\r\nimport '../css/nav.css';\r\nimport '../css/tags.css';\r\nimport '../css/admin.css';\r\n\r\n\r\n// compile time data, grab the date once, needs to be here due to scope\r\nlet date = new Date();\r\nlet currentTimestamp = date.getTime();\r\n\r\n\r\n// lazy loads\r\nconst CreatePreviewImage = lazy( () => import('./CreatePreviewImage.js'));\r\n\r\n\r\n// lazy load spinner\r\nconst renderLoader = (\r\n    <Spinner variant=\"danger\" animation=\"border\" role=\"status\">\r\n      <span className=\"sr-only\">\r\n        Loading...\r\n      </span>\r\n    </Spinner>\r\n  );\r\n\r\n\r\n// getting amount of days ago from current to requested date\r\nconst grabDaysAgo = ((requestTimestamp) => {\r\n    // then for each item in data row, grab and assign the following\r\n    let reqDaysAgo = (currentTimestamp - requestTimestamp) / 8640000;\r\n    reqDaysAgo = Math.round(reqDaysAgo) / 10;\r\n\r\n    return reqDaysAgo;\r\n});\r\n\r\n\r\n// getting status class and accompanying text\r\nconst grabStatus = (dateFinished => {\r\n    let returnObj = {};\r\n    if(dateFinished === 0){\r\n        // date finished is 0 which means unfinished\r\n        returnObj.text = \"Still Working...\";\r\n        returnObj.class = \"status-yellow\";\r\n        return returnObj;\r\n    }else{\r\n        // date not 0, which means done, so get how many days ago done\r\n\r\n        // how many days ago?\r\n        let finDaysAgo = (currentTimestamp - dateFinished) / 8640000;\r\n        finDaysAgo = Math.round(finDaysAgo) / 10;\r\n\r\n        returnObj.text = \"Finished \" + finDaysAgo + \" Days Ago!\";\r\n        returnObj.class = \"status-green\";\r\n        return returnObj;\r\n    };\r\n});\r\n\r\n\r\n\r\n\r\n\r\nfunction StatusPage(props){\r\n    // debug: props.adminMode is true or false, props.dataRowAdmin would be the dataRowAdmin\r\n    // console.log(props);\r\n\r\n    // tag rows of data, these MUST be filled with the data type or else it will freak out\r\n    const[dataRow, setDataRow] = useState([{\r\n        id: 0,\r\n        data: {\r\n            color: \"\",\r\n            comments: \"\",\r\n            datefinished: 0,\r\n            daterequest: 0,\r\n            reqDaysAgo: 0,\r\n            attachment: \"\",\r\n            signColor: \"White / Green\",\r\n            signQuantity: 1,\r\n            height: 1,\r\n            width: 1,\r\n            thickness: \"\"\r\n        }\r\n    }]);\r\n\r\n    // this is to show and hide a load spinner, for some reason suspense isn't working with the tags not showing up\r\n    const[showPage, setShowPage] = useState(false);\r\n\r\n    // display all tags system done tag\r\n    const[tagsAreDone, setTagsAreDone] = useState(false);\r\n\r\n    // search value\r\n    const[searchValue, setSearchValue] = useState(\"\");\r\n\r\n    // container width padding, empty for normal mode, \"px-0\" for admin mode\r\n    const[adminPadding, setAdminPadding] = useState(\"\");\r\n\r\n    // h4 title\r\n    const[h4Title, setH4Title] = useState(\"STATUS for UNFINISHED TAGS:\");\r\n\r\n    // search bar placeholder\r\n    const[searchBarPlaceholder, setSearchBarPlaceholder] = useState(\"Search Already Ordered Tags\");\r\n\r\n    // function for done or undo button clicked, only on admin page\r\n    const tagsNeedUpdate = () => {\r\n        // immediately set the loader\r\n        setShowPage(false);\r\n        \r\n\r\n        // check if something was searched\r\n        if(searchValue === \"\"){\r\n            // empty string means no search query, so just read all mode\r\n\r\n            // read everything again\r\n            dbUtility({\r\n                mode: \"read_all\"\r\n            })\r\n            .then((statusTags) => {\r\n                // debug: this is what the promise resolved from in dbUtility()\r\n                // console.log(statusTags);\r\n\r\n                // setDataRow to the value of the db read\r\n                setDataRow(statusTags);\r\n                \r\n\r\n                // if statusTags are empty, set the tags to show\r\n                if(statusTags.length === 0){\r\n                    setTagsAreDone(true);\r\n                }\r\n\r\n                // hide manual non suspense spinner\r\n                setShowPage(true);\r\n\r\n                // update lift state up for admin page\r\n                props.setDataRowAdmin(statusTags);\r\n            });\r\n            \r\n        }else{\r\n            // anything else means search query, so search for mode\r\n            // console.log(searchValue);\r\n\r\n            // immediately show loader spinner\r\n            setH4Title(renderLoader);\r\n\r\n            // this is only for the admin page\r\n            dbUtility({\r\n                mode: \"read_all\"\r\n            })\r\n            .then((statusTags) => {\r\n                // update lift state up for admin page\r\n                props.setDataRowAdmin(statusTags);\r\n\r\n            })\r\n            .then(() => {\r\n\r\n                // this is for the status page, but only when it is on admin mode\r\n                dbUtility({\r\n                    mode: \"search_for\",\r\n                    searchForString: searchValue\r\n                }).then((returnResult) => {\r\n                    // returnResult is an array of documents that match\r\n                    setDataRow(returnResult);\r\n    \r\n                    \r\n                }).then(() => {\r\n                    // show result\r\n                    setShowPage(true);\r\n\r\n                    // immediately show loader spinner\r\n                    setH4Title(\"Results for: \" + searchValue);\r\n                });\r\n            });\r\n\r\n        };\r\n\r\n        \r\n    };\r\n\r\n\r\n    // run once only on mount\r\n    useEffect(() => {\r\n        \r\n\r\n        // grab all the unfinished tags using dbUtility promise\r\n        dbUtility({\r\n            mode: \"read_all\"\r\n        })\r\n        .then((statusTags) => {\r\n            // debug: this is what the promise resolved from in dbUtility()\r\n            // console.log(statusTags);\r\n\r\n            // setDataRow to the value of the db read\r\n            // a console.log here will NOT work!\r\n            setDataRow(statusTags);\r\n\r\n            // if statusTags are empty, set the tags to show\r\n            if(statusTags.length === 0){\r\n                setTagsAreDone(true);\r\n            }\r\n\r\n            // hide manual non suspense spinner\r\n            setShowPage(true);\r\n        });\r\n    },[]);\r\n\r\n    // run when dataRowAdmin updates\r\n    useEffect(() => {\r\n        // debug: did passing state down work?\r\n        // console.log(\"456\");\r\n\r\n        // now update itself to reflect changes\r\n        dbUtility({\r\n            mode: \"read_all\"\r\n        })\r\n        .then((statusTags) => {\r\n            // debug: this is what the promise resolved from in dbUtility()\r\n            // console.log(statusTags);\r\n\r\n            // setDataRow to the value of the db read\r\n            // a console.log here will NOT work!\r\n            setDataRow(statusTags);\r\n\r\n            // if statusTags are empty, set the tags to show\r\n            if(statusTags.length === 0){\r\n                setTagsAreDone(true);\r\n            }\r\n\r\n            // hide manual non suspense spinner\r\n            setShowPage(true);\r\n        });\r\n    },[props.dataRowAdmin]);\r\n\r\n\r\n    useEffect(() => {\r\n        // set h4 title and search bar placeholder on adminmode\r\n        if(props.adminMode){\r\n            setH4Title(\"Edit Individual Tag Status\");\r\n            setSearchBarPlaceholder(\"Search for Specific Tags\");\r\n            setAdminPadding(\"px-0\");\r\n        }\r\n    },[props.adminMode]);\r\n\r\n\r\n    useEffect(() => {\r\n        // console.log(dataRow);\r\n    },[dataRow]);\r\n\r\n\r\n    // return\r\n    return (\r\n        <Container className={ adminPadding }>\r\n            <Row className=\"justify-content-between mt-1 nav-h4-bar-bg print-hide\">\r\n                {\r\n                    !props.adminMode &&\r\n                    <Col xs=\"auto\" className=\"p-0\">\r\n                        <NavLink to=\"/\">\r\n                            <Button>\r\n                                BACK\r\n                            </Button>\r\n                        </NavLink>\r\n                    </Col>\r\n                }\r\n                <Col xs=\"auto\">\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        { h4Title }\r\n                    </h4>\r\n                </Col>\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                <InputGroup id=\"status-search-bar\">\r\n                    <FormControl\r\n                        placeholder={ searchBarPlaceholder }\r\n                        aria-label=\"Search\"\r\n                        aria-describedby=\"basic-addon1\"\r\n                        onChange={ (e) => {\r\n                            // on value change set searchValue to string\r\n                            let thisSearchValue = e.target.value;\r\n\r\n                            // lower casify it\r\n                            thisSearchValue = thisSearchValue.toLowerCase();\r\n\r\n                            setSearchValue(thisSearchValue);\r\n                        }}\r\n                        onKeyPress={ (e) => {\r\n                            if(e.key === 'Enter'){\r\n                                // if enter was pressed\r\n                                // console.log(searchValue);\r\n\r\n                                // if search value is empty, reset\r\n                                if(searchValue === \"\"){\r\n                                    // set the h4 title\r\n                                    setH4Title(\"Edit Individual Tag Status\");\r\n\r\n                                    dbUtility({\r\n                                        mode: \"read_all\"\r\n                                    })\r\n                                    .then((statusTags) => {\r\n                                        // debug: this is what the promise resolved from in dbUtility()\r\n                                        // console.log(statusTags);\r\n                            \r\n                                        // setDataRow to the value of the db read\r\n                                        // a console.log here will NOT work!\r\n                                        setDataRow(statusTags);\r\n                            \r\n                                        // if statusTags are empty, set the tags to show\r\n                                        if(statusTags.length === 0){\r\n                                            setTagsAreDone(true);\r\n                                        }\r\n                            \r\n                                        // hide manual non suspense spinner\r\n                                        setShowPage(true);\r\n                                    });\r\n                                }else{\r\n                                    // immediately show loader spinner\r\n                                    setH4Title(renderLoader);\r\n    \r\n    \r\n                                    // search using dbUtility\r\n                                    dbUtility({\r\n                                        mode: \"search_for\",\r\n                                        searchForString: searchValue\r\n                                    }).then((returnResult) => {\r\n                                        // sort by not done first, so admin page is easier to match tags\r\n                                        console.log(returnResult);\r\n\r\n                                        // returnResult is an array of documents that match\r\n                                        setDataRow(returnResult);\r\n    \r\n                                        // set the h4 title\r\n                                        setH4Title(\"Results for: \" + searchValue);\r\n                                    });\r\n                                };\r\n                            }\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n                </Col>\r\n            </Row>\r\n            {\r\n            (!showPage) &&\r\n            <Row>\r\n                <Spinner variant=\"danger\" animation=\"border\" role=\"status\">\r\n                    <span className=\"sr-only\">\r\n                        Loading...\r\n                    </span>\r\n                </Spinner>\r\n            </Row>\r\n            }\r\n            {\r\n                (tagsAreDone && !props.adminMode) &&\r\n                <Row className=\"justify-content-center mt-2\">\r\n                    <h5 className=\"green-text mt-2\">All tags in the system are done.</h5>\r\n                </Row>\r\n            }\r\n            {\r\n                showPage &&\r\n                dataRow.map((mapItem, index) => \r\n                    <Row className=\"mt-1 justify-content-between status-row\" key={ \"status-\" + mapItem.id }>\r\n                        {\r\n                            props.adminMode &&\r\n                            <Col xs={ 12 } md={ 1 } className=\"px-0\">\r\n                                <Row className=\"justify-content-center mt-1\">\r\n                                    <Col xs=\"auto\">\r\n                                        <Button \r\n                                            variant=\"success\" \r\n                                            className=\"admin-change-status-button\"\r\n                                            disabled={ \r\n                                                grabStatus(mapItem.data.datefinished).class === \"status-green\" ? true : false \r\n                                            }\r\n                                            onClick={ () => {\r\n                                                // update the entry with DONE\r\n                                                let tempIdArray = [];\r\n                                                tempIdArray.push(mapItem.id);\r\n                                                dbUtility({\r\n                                                    mode: \"update_entry\",\r\n                                                    type: \"done\",\r\n                                                    docIdArray: tempIdArray\r\n                                                }).then(() => {\r\n                                                    // somehow need to re-update\r\n\r\n                                                    tagsNeedUpdate();\r\n                                                });\r\n                                            }}>\r\n                                            &#10004;\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"justify-content-center mt-1\">\r\n                                    <Col xs=\"auto\">\r\n                                        <Button \r\n                                            variant=\"warning\" \r\n                                            className=\"admin-change-status-button\"\r\n                                            disabled={ \r\n                                            grabStatus(mapItem.data.datefinished).class === \"status-yellow\" ? true : false \r\n                                        }\r\n                                        onClick={ () => {\r\n                                            // debug: grab id of item clicked on\r\n                                            // console.log(mapItem.id);\r\n                                            let tempIdArray = [];\r\n                                            tempIdArray.push(mapItem.id);\r\n\r\n                                            // update the entry with UNDO / notdone\r\n                                            dbUtility({\r\n                                                mode: \"update_entry\",\r\n                                                type: \"notdone\",\r\n                                                docIdArray: tempIdArray\r\n                                            }).then(() => {\r\n                                                // somehow need to re-update\r\n                                                tagsNeedUpdate();\r\n                                            });\r\n                                        }}>\r\n                                            &#10226;\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                        }\r\n                        <Col xs={ 12 } md={ props.adminMode ? 5 : 6 } className=\"px-0\">\r\n                            <Suspense fallback={ renderLoader }>\r\n                                {\r\n                                    (mapItem.data.color !== 5) &&\r\n                                    <CreatePreviewImage data={{ \r\n                                        name: mapItem.data.name,\r\n                                        secondLine: mapItem.data.titlecity,\r\n                                        thirdLine: mapItem.data.thirdline,\r\n                                        colorCode: mapItem.data.color\r\n                                    }} />\r\n                                }\r\n                                {\r\n                                    (mapItem.data.color === 5) &&\r\n                                    <CreatePreviewImage data={{ \r\n                                        name: mapItem.data.name,\r\n                                        colorCode: 5,\r\n                                        signColor: mapItem.data.signcolor,\r\n                                        attachment: mapItem.data.attachment,\r\n                                        height: mapItem.data.height,\r\n                                        width: mapItem.data.width\r\n                                    }} />\r\n                                }\r\n                            </Suspense>\r\n                        </Col>\r\n                        <Col xs={ 12 } md={ 4 } className=\"px-0\">\r\n                            <Row>\r\n                                <Col>\r\n                                    <p className=\"status-b-col-text\">Requestor: { mapItem.data.requestor }</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p className=\"status-b-col-text\">Requested: { grabDaysAgo(mapItem.data.daterequest) } Days Ago</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    {\r\n                                        (mapItem.data.color !== 5) &&\r\n                                        <p className=\"status-b-col-text\">Quantity: { mapItem.data.quantity }</p>\r\n                                    }\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p className=\"status-b-col-text\">Comments: { mapItem.data.comments }</p>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col xs={ 12 } md={ 2 } className={ grabStatus(mapItem.data.datefinished).class }>\r\n                            <p>STATUS: { grabStatus(mapItem.data.datefinished).text }</p>\r\n                        </Col>\r\n                    </Row>\r\n                )\r\n            }\r\n        </Container>\r\n    );\r\n  }\r\n  \r\n  export default StatusPage;"],"sourceRoot":""}