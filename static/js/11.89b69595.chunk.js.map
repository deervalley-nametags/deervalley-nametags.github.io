{"version":3,"sources":["js/CreateSignColor.js","js/CustomSignPage.js","js/CreatePreviewImage.js","js/textValidation.js"],"names":["CreateSignColor","data","textToDisplay","color","toUpperCase","slice","bg","Container","className","CustomSignPage","history","useHistory","useState","requestor","comments","attachment","name","signColor","signQuantity","height","width","thickness","submitArray","setSubmitArray","modifySubmitArray","property","value","validation","validatedText","textValidation","priorSubmitObj","useEffect","setSubmitGrey","setStatusTextIndex","console","log","submitGrey","statusTextIndex","Row","Col","xs","to","Button","CreatePreviewImage","colorCode","InputGroup","FormControl","placeholder","aria-label","onChange","e","target","as","md","Dropdown","Toggle","Menu","title","map","mapItem","index","Item","key","onClick","lg","type","disabled","dbUtility","mode","writeData","then","statusBack","push","pixelHeight","pixelWidth","tagType","img","defName","defSecond","quantity","colorCodeToClass","splitClasses","newLineContents","split","toLowerCase","parseFloat","secondLine","thirdLine","style","textAlign","margin","display","flexDirection","inputString","minChar","strictMode","outputString","string","regex","undefined","match","join","regexDelete","length","splicedString","stateAbbv","splitString","lastIndex","replace","tempPossibleState","pop","tempJoinString","stateSearch","indexOf","innerStateSearch","stateToAbbv","combinedString","word","firstChar","titleCapsify","stringSelection","addCommaSpaces"],"mappings":"uOAkDeA,MA5Cf,SAAyBC,GAkCrB,IAAMC,EAAiBD,EAAKA,KAAKE,MAAM,GAAGC,cAAkBH,EAAKA,KAAKE,MAAME,MAAM,GAAM,MAASJ,EAAKA,KAAKK,GAAG,GAAGF,cAAkBH,EAAKA,KAAKK,GAAGD,MAAM,GAGtJ,OACA,kBAACE,EAAA,EAAD,CAAWC,UAAY,SAAWP,EAAKA,KAAKE,MAAQ,OAASF,EAAKA,KAAKK,GAAK,aACtEJ,I,wBC2SKO,UAhUQ,WAEnB,IAAIC,EAAUC,cAFW,EAMcC,mBAAS,CAAC,CAC7CT,MAAO,EACPU,UAAW,GACXC,SAAU,GACVC,WAAY,mBACZC,KAAM,GACNC,UAAW,gBACXC,aAAc,EACdC,OAAQ,2BACRC,MAAO,yBACPC,UAAW,eAhBU,mBAMlBC,EANkB,KAMLC,EANK,KAoGnBC,EAAoB,SAACC,EAAUC,EAAOC,GAGxC,IAAIC,EAEAA,EADDD,EACiBE,YAAeH,EAAO,GAEtBA,EAIpB,IAAII,EAAiBR,EAAY,GACjCQ,EAAeL,GAAYG,EAC3BL,EAAe,CAACO,KAKpBC,qBAAU,WAGqB,KAAxBT,EAAY,GAAGN,MAA4C,KAA7BM,EAAY,GAAGT,WAE5CmB,GAAc,GACdC,EAAmB,IACU,KAAxBX,EAAY,GAAGN,MAEpBgB,GAAc,GACdC,EAAmB,IACe,KAA7BX,EAAY,GAAGT,WAEpBmB,GAAc,GACdC,EAAmB,IACU,KAAxBX,EAAY,GAAGN,MAA4C,KAA7BM,EAAY,GAAGT,WAElDmB,GAAc,GACdC,EAAmB,IAGnBC,QAAQC,IAAI,qEAKlB,CAACb,IAhJsB,MAoJYV,oBAAS,GApJrB,mBAoJlBwB,EApJkB,KAoJNJ,EApJM,OA6JsBpB,mBAAS,GA7J/B,mBA6JlByB,EA7JkB,KA6JDJ,EA7JC,KAoKzB,OACI,kBAAC1B,EAAA,EAAD,KACI,kBAAC+B,EAAA,EAAD,CAAK9B,UAAU,yCACX,kBAAC+B,EAAA,EAAD,CAAKC,GAAG,OAAOhC,UAAU,OACrB,kBAAC,IAAD,CAASiC,GAAG,KACR,kBAACC,EAAA,EAAD,eAKR,kBAACH,EAAA,EAAD,CAAKC,GAAG,QACJ,wBAAIhC,UAAU,cAAd,6BAIJ,kBAAC+B,EAAA,EAAD,CAAKC,GAAG,OAAOhC,UAAU,SAI7B,kBAAC8B,EAAA,EAAD,CAAK9B,UAAU,oCAAf,YAGA,kBAAC8B,EAAA,EAAD,CAAK9B,UAAU,oCACX,kBAAC+B,EAAA,EAAD,CAAKC,GAAG,QACJ,kBAACG,EAAA,QAAD,CAAoB1C,KAAM,CACtB2C,UAAW,EACX5B,KAAMM,EAAY,GAAGN,KACrBG,OAAQG,EAAY,GAAGH,OACvBC,MAAOE,EAAY,GAAGF,MACtBL,WAAYO,EAAY,GAAGP,WAC3BE,UAAWK,EAAY,GAAGL,eAItC,kBAACqB,EAAA,EAAD,KACI,kBAACO,EAAA,EAAD,CAAYrC,UAAU,QAClB,kBAACsC,EAAA,EAAD,CACIC,YAAY,oCACZC,aAAW,YACXC,SAAW,SAAAC,GAAO1B,EAAkB,YAAa0B,EAAEC,OAAOzB,OAAO,QAI7E,kBAACY,EAAA,EAAD,KACI,kBAACO,EAAA,EAAD,CAAYrC,UAAU,QAClB,kBAACsC,EAAA,EAAD,CACIM,GAAG,WACHL,YAAY,gBACZC,aAAW,OACXC,SAAW,SAAAC,GAAO1B,EAAkB,OAAQ0B,EAAEC,OAAOzB,OAAO,QAIxE,kBAACY,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAK,GAAKa,GAAK,EAAI7C,UAAU,QAC9B,kBAACqC,EAAA,EAAD,CAAYrC,UAAU,QAClB,kBAACsC,EAAA,EAAD,CACIC,YAAczB,EAAY,GAAGH,OAC7B6B,aAAW,SACXC,SAAW,SAAAC,GAAO1B,EAAkB,SAAU0B,EAAEC,OAAOzB,OAAO,QAI1E,kBAACa,EAAA,EAAD,CAAKC,GAAK,GAAKa,GAAK,EAAI7C,UAAU,gBAC9B,kBAACqC,EAAA,EAAD,CAAYrC,UAAU,QAClB,kBAACsC,EAAA,EAAD,CACIC,YAAczB,EAAY,GAAGF,MAC7B4B,aAAW,QACXC,SAAW,SAAAC,GAAO1B,EAAkB,QAAS0B,EAAEC,OAAOzB,OAAO,QAIzE,kBAACa,EAAA,EAAD,CAAKC,GAAK,GAAKa,GAAK,EAAI7C,UAAU,gBAC9B,kBAACqC,EAAA,EAAD,CAAYrC,UAAU,QAClB,kBAAC8C,EAAA,EAAD,CAAU9C,UAAU,SAChB,kBAAC8C,EAAA,EAASC,OAAV,KACMjC,EAAY,GAAGL,WAErB,kBAACqC,EAAA,EAASE,KAAV,KA7NF,CAAC,CACnBrD,MAAO,QACPG,GAAI,QACJmD,MAAO,iBACT,CACEtD,MAAO,QACPG,GAAI,OACJmD,MAAO,gBACT,CACEtD,MAAO,QACPG,GAAI,SACJmD,MAAO,kBACT,CACEtD,MAAO,QACPG,GAAI,SACJmD,MAAO,kBACT,CACEtD,MAAO,QACPG,GAAI,QACJmD,MAAO,iBACT,CACEtD,MAAO,QACPG,GAAI,SACJmD,MAAO,kBACT,CACEtD,MAAO,QACPG,GAAI,MACJmD,MAAO,eACT,CACEtD,MAAO,QACPG,GAAI,MACJmD,MAAO,eACT,CACEtD,MAAO,QACPG,GAAI,QACJmD,MAAO,iBACT,CACEtD,MAAO,QACPG,GAAI,SACJmD,MAAO,kBACT,CACEtD,MAAO,QACPG,GAAI,QACJmD,MAAO,kBAoLmCC,KAAK,SAACC,EAASC,GAAV,OACf,kBAACN,EAAA,EAASO,KAAV,CACIC,IAAMF,EACNG,QAAU,WAAQvC,EAAkB,YAAamC,EAAQF,OAAO,KAChE,kBAAC,EAAD,CAAiBxD,KAAM,CAAEE,MAAOwD,EAAQxD,MAAOG,GAAIqD,EAAQrD,eAU3F,kBAACgC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAKC,GAAK,GAAKa,GAAK,EAAI7C,UAAU,QAC9B,kBAACqC,EAAA,EAAD,CAAYrC,UAAU,QAClB,kBAAC8C,EAAA,EAAD,CAAU9C,UAAU,SAChB,kBAAC8C,EAAA,EAASC,OAAV,KACMjC,EAAY,GAAGD,WAGrB,kBAACiC,EAAA,EAASE,KAAV,KACI,kBAACF,EAAA,EAASO,KAAV,CAAeE,QAAU,SAAAb,GAAO1B,EAAkB,YAAa,QAAQ,KAAvE,QACA,kBAAC8B,EAAA,EAASO,KAAV,CAAeE,QAAU,SAAAb,GAAO1B,EAAkB,YAAa,UAAU,KAAzE,UACA,kBAAC8B,EAAA,EAASO,KAAV,CAAeE,QAAU,SAAAb,GAAO1B,EAAkB,YAAa,SAAS,KAAxE,aAKhB,kBAACe,EAAA,EAAD,CAAKC,GAAK,GAAKa,GAAK,EAAI7C,UAAU,gBAC9B,kBAACqC,EAAA,EAAD,CAAYrC,UAAU,QAClB,kBAAC8C,EAAA,EAAD,CAAU9C,UAAU,SAChB,kBAAC8C,EAAA,EAASC,OAAV,KACMjC,EAAY,GAAGP,YAGrB,kBAACuC,EAAA,EAASE,KAAV,KACI,kBAACF,EAAA,EAASO,KAAV,CAAeE,QAAU,SAAAb,GAAO1B,EAAkB,aAAc,UAAU,KAA1E,cAMhB,kBAACe,EAAA,EAAD,CAAKC,GAAK,GAAKa,GAAK,EAAI7C,UAAU,gBAC9B,kBAACqC,EAAA,EAAD,CAAYrC,UAAU,QAClB,kBAACsC,EAAA,EAAD,CACIC,YAAY,WACZC,aAAW,gBACXC,SAAW,SAAAC,GAAO1B,EAAkB,eAAgB0B,EAAEC,OAAOzB,OAAO,SAKpF,kBAACY,EAAA,EAAD,KACI,kBAACO,EAAA,EAAD,CAAYrC,UAAU,QAClB,kBAACsC,EAAA,EAAD,CACIM,GAAG,WACHL,YAAY,WACZC,aAAW,WACXC,SAAW,SAAAC,GAAO1B,EAAkB,WAAY0B,EAAEC,OAAOzB,OAAO,QAI5E,kBAACY,EAAA,EAAD,CAAK9B,UAAU,4BACX,kBAAC+B,EAAA,EAAD,CAAKC,GArJF,GAqJca,GApJd,EAoJ0BW,GAAG,QAC5B,uBAAGxD,UAAU,QAhKV,CACf,yEACA,6BACA,8CACA,gBACA,IA2J6C6B,KAErC,kBAACE,EAAA,EAAD,CAAKC,GAxJF,GAwJca,GAvJd,EAuJ0BW,GAAG,QAC5B,kBAACtB,EAAA,EAAD,CAAQuB,KAAK,SAASC,SAAW9B,EAAa2B,QApPxC,YAGA,IAAf3B,IAICH,EAAmB,GAGnBkC,YAAU,CACNC,KAAM,YACNC,UAAW/C,IACZgD,MAAK,SAASC,GAGb7D,EAAQ8D,KAAK,iBAoOT,uB,qDCjVpB,iEA4Ne7B,UAvGf,SAA4B1C,GAsBxB,IAKIwE,EACAC,EANAC,EAlIR,SAA0B/B,GAYtB,IAAI+B,EAAU,CACVrE,GAAI,GACJsE,IAAK,aACLC,QAAS,OACTC,UAAW,WACXC,SAAU,MAuFd,OAnFiB,IAAdnC,EAGC+B,EAAQrE,GAAK,YACM,IAAdsC,GAGL+B,EAAQrE,GAAK,eACbqE,EAAQC,IAAM,cACK,IAAdhC,GAGL+B,EAAQrE,GAAK,aACbqE,EAAQC,IAAM,eACK,IAAdhC,GAGL+B,EAAQrE,GAAK,cACbqE,EAAQC,IAAM,cACdD,EAAQI,SAAW,MACA,IAAdnC,GAGL+B,EAAQrE,GAAK,WACbqE,EAAQE,QAAU,OAClBF,EAAQG,UAAY,8BACpBH,EAAQI,SAAW,IACA,IAAdnC,GAGL+B,EAAQrE,GAAK,YACbqE,EAAQG,UAAY,SACD,IAAdlC,GAGL+B,EAAQrE,GAAK,eACbqE,EAAQC,IAAM,aACdD,EAAQG,UAAY,SACD,IAAdlC,GAGL+B,EAAQrE,GAAK,aACbqE,EAAQC,IAAM,cACdD,EAAQG,UAAY,SACD,KAAdlC,GAGL+B,EAAQrE,GAAK,cACbqE,EAAQG,UAAY,QACpBH,EAAQI,SAAW,MACA,KAAdnC,GAGL+B,EAAQrE,GAAK,aACbqE,EAAQE,QAAU,oEAClBF,EAAQG,UAAY,2EACpBH,EAAQI,SAAW,IACA,KAAdnC,GAGL+B,EAAQrE,GAAK,aACbqE,EAAQC,IAAM,eACdD,EAAQI,SAAW,MACA,KAAdnC,GAGL+B,EAAQrE,GAAK,iBACbqE,EAAQI,SAAW,MACA,KAAdnC,GAGL+B,EAAQrE,GAAK,mBACbqE,EAAQC,IAAM,qBACdD,EAAQI,SAAW,MACA,KAAdnC,IAKL+B,EAAQrE,GAAK,aAIVqE,EA0BOK,CAAiB/E,EAAKA,KAAK2C,WAEzC+B,EAAQrE,GAAKqE,EAAQrE,GAAK,4BAK1B,IAAI2E,EAAe,GACfC,EAAkBjF,EAAKA,KAAKe,KAyBhC,OAtB2B,IAAxBf,EAAKA,KAAK2C,aAGTqC,EAAehF,EAAKA,KAAKgB,UAAUkE,MAAM,QAC5B,GAAK,SAAWF,EAAa,GAAGG,cAC7CH,EAAa,GAAK,MAAQA,EAAa,GAAGG,cAE1CX,EAAcY,WAAWpF,EAAKA,KAAKkB,QACnCuD,EAAaW,WAAWpF,EAAKA,KAAKmB,OAGlCqD,GAAe,GACfC,GAAc,GACdD,GAA4B,KAC5BC,GAA0B,KAE1BQ,EAAkBA,EAAgBC,MAAM,OAOxC,kBAAC,IAAD,CAAK3C,GAAI,GAAIa,GAAI,EAAGW,GAAI,EAAGxD,UAAU,QAEJ,IAAxBP,EAAKA,KAAK2C,WACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKpC,UAAYmE,EAAQrE,MAEC,eAAhBqE,EAAQC,MACV,yBAAKpE,UAAYmE,EAAQC,MAG7B,yBAAKpE,UAAU,gBACX,yBAAKA,UAAU,qCACTP,EAAKA,KAAKe,MAEhB,yBAAKR,UAAU,uCACTP,EAAKA,KAAKqF,YAEhB,yBAAK9E,UAAU,uCACTP,EAAKA,KAAKsF,cAOH,IAAxBtF,EAAKA,KAAK2C,WACX,kBAAC,IAAD,CAAW4C,MAAO,CACdpE,MAAOsD,EACPvD,OAAQsD,EACRgB,UAAW,SACXC,OAAQ,OACRC,QAAS,OACTC,cAAe,OAChBpF,UAAYyE,EAAa,GAAK,IAAMA,EAAa,GAAK,aACrD,yBAAKO,MAAO,CAAEG,QAAS,OAAQC,cAAe,SAAUF,OAAQ,SAExDR,EAAgBxB,KAAI,SAACC,EAASC,GAAV,OAChB,kBAAC,IAAD,CAAKpD,UAAU,yBAAyBsD,IAAMF,GAAUD,W,gCClNjF,SAAS9B,EAAegE,EAAaC,EAASC,GAoBjD,IAAIC,EAsBR,SAAqBC,EAAQF,GAGzB,IAAIG,EAGAA,OAFcC,IAAfJ,IAA2C,IAAfA,EAEnB,gEAIA,4EAKZ,MAAY,KAATE,EAEQ,GAGKA,EAAOG,MAAMF,GAIEG,KAAK,IA9CjBC,CAAYT,EAAaE,GAI5C,OADmBF,EAAYU,OACbT,EAEP,GAUXE,EAqGJ,SAAqBH,GAEjB,IAeIW,EAdEC,EAAY,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAKpQC,EAAcb,EAAYV,MAAM,KAGhCwB,EAAYD,EAAYH,OAAS,EACrCG,EAAYC,GAAaD,EAAYC,GAAWC,QAAQ,iBAAkB,IAMhD,IAAvBF,EAAYH,SAEXC,EAAgBE,EAAY,GAAGrG,MAAM,IAIzC,GAA0B,IAAvBqG,EAAYH,OAAa,CAKxB,IAAIM,GAHJH,EAAcA,EAAY,GAAGvB,MAAM,MAGCuB,EAAYH,OAAS,GAGzDG,EAAYI,MAGZ,IAAIC,EAAiB,GACrBA,EAAe,GAAKL,EAAYL,KAAK,KAGrCU,EAAevC,KAAKqC,GAIpBL,GAHAE,EAAcK,GAGc,GAKhC,IAAIC,EA9Cc,CAAC,UAAW,SAAS,UAAU,WAAW,aAAa,WAAW,cAAc,WAAW,uBAAuB,UAAU,SAAS,QAAQ,WAAW,UAAU,OAAO,SAAS,WAAW,YAAY,QAAQ,WAAW,gBAAgB,WAAW,YAAY,cAAc,WAAW,UAAU,WAAW,SAAS,gBAAgB,aAAa,aAAa,WAAW,iBAAiB,eAAe,OAAO,WAAW,SAAS,eAAe,eAAe,iBAAiB,eAAe,YAAY,QAAQ,OAAO,UAAU,WAAW,aAAa,gBAAgB,YAAY,WA8CvjBC,QAAQT,GACpC,IAAoB,IAAjBQ,EAEC,OAAON,EAAY,GAAK,KAAOD,EAAUO,GAKzC,IAAIE,EApDmB,CAAC,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAoDnOD,QAAQT,GAClD,OAAyB,IAAtBU,EAEQR,EAAY,GAAK,KAAOD,EAAUS,GAGlCrB,EAnKAsB,CAHfnB,EAsEJ,SAAsBH,GAKlB,IAAIa,EAAcb,EAAYV,MAAM,KAKO,KAAxCuB,EAAYA,EAAYH,OAAS,IAEhCG,EAAYI,MAGhB,IAAIM,EAAiBV,EAAYhD,KAAI,SAAS2D,GAE1C,IAAIC,EAAYD,EAAK,GAAGjH,cAQxB,OADAiH,EAAOC,EAAY,IAHnBD,EAAOA,EAAKhH,MAAM,OAUtB,OAFA+G,EAAiBA,EAAef,KAAK,KAnGtBkB,CAHfvB,EA4CJ,SAAwBH,GAIpB,IAAIa,EAAcb,EAAYV,MAAM,KAGpC,GAAGuB,EAAYH,OAAS,EAAE,CAEtB,IAAIiB,EAAkBd,EAAY,GAYlC,OAPIA,EAFsB,MAAvBc,EAAgB,GAEDd,EAAYL,KAAK,KAGjBK,EAAYL,KAAK,MAOnC,OAAOR,EApEI4B,CAAezB,KA9BlC","file":"static/js/11.89b69595.chunk.js","sourcesContent":["import React from 'react';\r\nimport { \r\n    Container\r\n} from 'react-bootstrap';\r\nimport '../css/signcolor.css';\r\n\r\nfunction CreateSignColor(data) {\r\n    /*\r\n    data use format: \r\n    <CreateSignColor data={ \r\n        color: \"\",\r\n        bg: \"\"\r\n    } />\r\n    -\r\n    appropriate string values for color and bg(lowercase):\r\n    black\r\n    bronze\r\n    red\r\n    white\r\n    green\r\n    brown\r\n    silver\r\n    blue\r\n    orange\r\n    yellow\r\n    -\r\n    tag id:s\r\n    1: regular green\r\n    2: green tag with gold deer head\r\n    3: bronze with white deer head\r\n    4: new: outdoor black bg with white deer head\r\n    11: engraved sign\r\n    12: outdoor patrol white bg with black cross and border\r\n    13: old mtn ops uniform black card tags\r\n    14: black diamond lodge silver\r\n    deprecated: 5, 6, 7, 8, 9\r\n    */\r\n    // console.log(data);\r\n\r\n    // text, mainly, capitalize first letter, then combine with a '/'\r\n    const textToDisplay = (data.data.color[0].toUpperCase()) + (data.data.color.slice(1)) + \" / \" + (data.data.bg[0].toUpperCase()) + (data.data.bg.slice(1));\r\n\r\n    // return page with compiled data\r\n    return (\r\n    <Container className={ \"color-\" + data.data.color + \" bg-\" + data.data.bg + \" bg-basic\" }>\r\n        { textToDisplay }\r\n    </Container>\r\n    );\r\n}\r\n\r\nexport default CreateSignColor;","import React, { useState, useEffect } from 'react';\r\nimport { useHistory, NavLink } from \"react-router-dom\";\r\n\r\n// layout import\r\nimport { \r\n    Container, \r\n    Button,\r\n    Row,\r\n    Col,\r\n    InputGroup,\r\n    FormControl,\r\n    Dropdown\r\n} from 'react-bootstrap';\r\nimport '../css/nav.css';\r\nimport '../css/signcolor.css';\r\n\r\n// utility import\r\nimport CreateSignColor from './CreateSignColor.js';\r\nimport CreatePreviewImage from './CreatePreviewImage.js';\r\nimport { textValidation } from './textValidation.js';\r\nimport { dbUtility } from './dbUtility.js';\r\n\r\n\r\n// start page\r\nconst CustomSignPage = () => {\r\n    // this is to be able to load status window when tag created\r\n    let history = useHistory();\r\n    \r\n\r\n    // set the submit array(same data format as multi tag) to default values\r\n    const[ submitArray, setSubmitArray ] = useState([{\r\n        color: 5,\r\n        requestor: \"\",\r\n        comments: \"\",\r\n        attachment: \"Attachment Style\",\r\n        name: \"\",\r\n        signColor: \"White / Green\",\r\n        signQuantity: 1,\r\n        height: \"Height(Inches)(Max 8.5\\\")\",\r\n        width: \"Width(Inches)(Max 12\\\")\",\r\n        thickness: \"Thickness\"\r\n    }]);\r\n\r\n\r\n    // set the sign color data\r\n    const signColorData = [{\r\n        color: \"white\",\r\n        bg: \"green\",\r\n        title: \"White / Green\"\r\n    },{\r\n        color: \"white\",\r\n        bg: \"blue\",\r\n        title: \"White / Blue\"\r\n    },{\r\n        color: \"black\",\r\n        bg: \"bronze\",\r\n        title: \"Black / Bronze\"\r\n    },{\r\n        color: \"black\",\r\n        bg: \"orange\",\r\n        title: \"Black / Orange\"\r\n    },{\r\n        color: \"white\",\r\n        bg: \"brown\",\r\n        title: \"White / Brown\"\r\n    },{\r\n        color: \"black\",\r\n        bg: \"yellow\",\r\n        title: \"Black / Yellow\"\r\n    },{\r\n        color: \"white\",\r\n        bg: \"red\",\r\n        title: \"White / Red\"\r\n    },{\r\n        color: \"black\",\r\n        bg: \"red\",\r\n        title: \"Black / Red\"\r\n    },{\r\n        color: \"black\",\r\n        bg: \"white\",\r\n        title: \"Black / White\"\r\n    },{\r\n        color: \"black\",\r\n        bg: \"silver\",\r\n        title: \"Black / Silver\"\r\n    },{\r\n        color: \"white\",\r\n        bg: \"black\",\r\n        title: \"White / Black\"\r\n    }];\r\n\r\n\r\n    // submit button on request\r\n    const submitRequest = () => {\r\n        // check to make sure user hasn't done in-browser html magic to bypass disabled submit button\r\n        // an empty or invalid request\r\n        if(submitGrey === false){\r\n            // pass, as its unlikely to change a react page variable in browser unless superuser\r\n\r\n            // change status text to loading\r\n            setStatusTextIndex(3);\r\n\r\n            // db new entry\r\n            dbUtility({\r\n                mode: \"new_entry\",\r\n                writeData: submitArray\r\n            }).then(function(statusBack){\r\n                // console.log(statusBack)\r\n                // on success, navigate to /status\r\n                history.push(\"/status\");\r\n            });\r\n        }else{\r\n            // failed, this shouldn't happen though\r\n        };\r\n    }\r\n\r\n    /*\r\n    // debug: what is submitArray on update\r\n    useEffect(() => {\r\n        console.log(submitArray);\r\n    },[submitArray]);\r\n    */\r\n\r\n    // modify one element of the array\r\n    const modifySubmitArray = (property, value, validation) => {\r\n        // console.log(validation);\r\n        // text validate if it wants it\r\n        let validatedText;\r\n        if(validation){\r\n            validatedText = textValidation(value, 3);\r\n        }else{\r\n            validatedText = value;\r\n        }\r\n\r\n        // grab prior values except for changed element\r\n        let priorSubmitObj = submitArray[0];\r\n        priorSubmitObj[property] = validatedText;\r\n        setSubmitArray([priorSubmitObj]);\r\n    };\r\n\r\n\r\n    // update the status text and disable/enable button\r\n    useEffect(() => {\r\n        // also update the submission status, e.g. you need X or Y to submit\r\n        // if empty string or 0\r\n        if(submitArray[0].name === \"\" && submitArray[0].requestor === \"\"){\r\n            // false due to name AND requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(0);\r\n        }else if(submitArray[0].name === \"\"){\r\n            // false only to name\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(2);\r\n        }else if(submitArray[0].requestor === \"\"){\r\n            // false only to requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(1);\r\n        }else if(submitArray[0].name !== \"\" && submitArray[0].requestor !== \"\"){\r\n            // true only if name AND requestor are not empty strings set from textValidation\r\n            setSubmitGrey(false);\r\n            setStatusTextIndex(4);\r\n        }else{\r\n            // some other condition\r\n            console.log(\"updateSubmitGrey() ran into some other condition on validation!\");\r\n        };\r\n\r\n        // console.log(submitArray);\r\n\r\n    },[submitArray]);\r\n\r\n\r\n    // submit grey button text and status text\r\n    const[ submitGrey, setSubmitGrey ] = useState(true);\r\n    // for the status text, only the index of it changes, not the actual string [4] is empty string\r\n    const statusText = [\r\n        \"There must be a requestor, Sign Content must be at least 3 characters.\",\r\n        \"There must be a requestor.\",\r\n        \"Sign Content must be at least 3 characters.\",\r\n        \"Submitting...\",\r\n        \"\"\r\n    ];\r\n    const[ statusTextIndex, setStatusTextIndex ] = useState(0);\r\n\r\n    // setting layout sizes\r\n    const xsSize = 12;\r\n    const mdSize = 6;\r\n\r\n    // return\r\n    return (\r\n        <Container>\r\n            <Row className=\"justify-content-between nav-h4-bar-bg\">\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    <NavLink to=\"/\">\r\n                        <Button>\r\n                            BACK\r\n                        </Button>\r\n                    </NavLink>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW CUSTOM ENGRAVED SIGN\r\n                    </h4>\r\n                </Col>\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    \r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mt-3 px-0 justify-content-center\">\r\n                Preview:\r\n            </Row>\r\n            <Row className=\"mt-3 px-0 justify-content-center\">\r\n                <Col xs=\"auto\">\r\n                    <CreatePreviewImage data={{ \r\n                        colorCode: 5, \r\n                        name: submitArray[0].name,\r\n                        height: submitArray[0].height,\r\n                        width: submitArray[0].width,\r\n                        attachment: submitArray[0].attachment,\r\n                        signColor: submitArray[0].signColor\r\n                    }} />\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-4\">\r\n                    <FormControl\r\n                        placeholder=\"Requestor (or: WHO to Mail it to)\"\r\n                        aria-label=\"Requestor\"\r\n                        onChange={ e => { modifySubmitArray(\"requestor\", e.target.value, true); }} \r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        as=\"textarea\"\r\n                        placeholder=\"Sign Contents\"\r\n                        aria-label=\"Sign\"\r\n                        onChange={ e => { modifySubmitArray(\"name\", e.target.value, true); }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row>\r\n                <Col xs={ 12 } md={ 4 } className=\"px-0\">\r\n                    <InputGroup className=\"mt-3\">\r\n                        <FormControl\r\n                            placeholder={ submitArray[0].height }\r\n                            aria-label=\"Height\"\r\n                            onChange={ e => { modifySubmitArray(\"height\", e.target.value, false); }}\r\n                        />\r\n                    </InputGroup>\r\n                </Col>\r\n                <Col xs={ 12 } md={ 4 } className=\"px-0 pl-md-2\">\r\n                    <InputGroup className=\"mt-3\">\r\n                        <FormControl\r\n                            placeholder={ submitArray[0].width }\r\n                            aria-label=\"Width\"\r\n                            onChange={ e => { modifySubmitArray(\"width\", e.target.value, false); }}\r\n                        />\r\n                    </InputGroup>\r\n                </Col>\r\n                <Col xs={ 12 } md={ 4 } className=\"px-0 pl-md-2\">\r\n                    <InputGroup className=\"mt-3\">\r\n                        <Dropdown className=\"w-100\">\r\n                            <Dropdown.Toggle>\r\n                                { submitArray[0].signColor }\r\n                            </Dropdown.Toggle>\r\n                            <Dropdown.Menu>\r\n                                {\r\n                                    signColorData.map( (mapItem, index) =>\r\n                                        <Dropdown.Item \r\n                                            key={ index }\r\n                                            onClick={ () => { modifySubmitArray(\"signColor\", mapItem.title, false); }}>\r\n                                            <CreateSignColor data={{ color: mapItem.color, bg: mapItem.bg }} />\r\n                                        </Dropdown.Item>\r\n                                    )\r\n                                }\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </InputGroup>\r\n                </Col>\r\n                \r\n            </Row>\r\n            <Row>\r\n                <Col xs={ 12 } md={ 4 } className=\"px-0\">\r\n                    <InputGroup className=\"mt-3\">\r\n                        <Dropdown className=\"w-100\">\r\n                            <Dropdown.Toggle>\r\n                                { submitArray[0].thickness }\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item onClick={ e => { modifySubmitArray(\"thickness\", \"Thin\", false); }}>Thin</Dropdown.Item>\r\n                                <Dropdown.Item onClick={ e => { modifySubmitArray(\"thickness\", \"Normal\", false); }}>Normal</Dropdown.Item>\r\n                                <Dropdown.Item onClick={ e => { modifySubmitArray(\"thickness\", \"Thick\", false); }}>Thick</Dropdown.Item>\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </InputGroup>\r\n                </Col>\r\n                <Col xs={ 12 } md={ 4 } className=\"px-0 pl-md-2\">\r\n                    <InputGroup className=\"mt-3\">\r\n                        <Dropdown className=\"w-100\">\r\n                            <Dropdown.Toggle>\r\n                                { submitArray[0].attachment }\r\n                            </Dropdown.Toggle>\r\n\r\n                            <Dropdown.Menu>\r\n                                <Dropdown.Item onClick={ e => { modifySubmitArray(\"attachment\", \"Velcro\", false); }}>Velcro</Dropdown.Item>\r\n                                {/*<Dropdown.Item onClick={ e => { modifySubmitArray(\"attachment\", \"Holes\", false); }}>Holes</Dropdown.Item>*/}\r\n                            </Dropdown.Menu>\r\n                        </Dropdown>\r\n                    </InputGroup>\r\n                </Col>\r\n                <Col xs={ 12 } md={ 4 } className=\"px-0 pl-md-2\">\r\n                    <InputGroup className=\"mt-3\">\r\n                        <FormControl\r\n                            placeholder=\"Quantity\"\r\n                            aria-label=\"Sign Quantity\"\r\n                            onChange={ e => { modifySubmitArray(\"signQuantity\", e.target.value, false); }}\r\n                        />\r\n                    </InputGroup>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        as=\"textarea\"\r\n                        placeholder=\"Comments\"\r\n                        aria-label=\"Comments\"\r\n                        onChange={ e => { modifySubmitArray(\"comments\", e.target.value, false); }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row className=\"mt-3 justify-content-end\">\r\n                <Col xs={xsSize} md={mdSize} lg=\"auto\">\r\n                    <p className=\"mt-2\">{ statusText[statusTextIndex] }</p>\r\n                </Col>\r\n                <Col xs={xsSize} md={mdSize} lg=\"auto\">\r\n                    <Button type=\"submit\" disabled={ submitGrey } onClick={ submitRequest }>Submit Request</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CustomSignPage;","import React from 'react';\r\nimport { \r\n    Col,\r\n    Row,\r\n    Container\r\n} from 'react-bootstrap';\r\nimport '../css/tags.css';\r\nimport '../css/signcolor.css';\r\n\r\nfunction colorCodeToClass(colorCode){\r\n    /*\r\n    tagType obj are the classes to apply and default texts on each\r\n    bg background class, \r\n    img is the deer head logo, null-space is the default class that deletes the class\r\n    in the event that there is no deer head\r\n    defName: default Name placeholder\r\n    defSecond: default second line text placeholder\r\n    quantity: the default quantity for each tag type(unchangeable, only for info purposes)\r\n    -\r\n    see CreateSignColor for tag id list\r\n    */\r\n    let tagType = {\r\n        bg: \"\",\r\n        img: \"null-space\",\r\n        defName: \"Name\",\r\n        defSecond: \"City, ST\",\r\n        quantity: \"x2\"\r\n    };\r\n\r\n    // translate color code to image type using classes\r\n    if(colorCode === 1){\r\n                \r\n        // 1: green pin no deerhead(normal nametag and default selection)\r\n        tagType.bg = \"tag-green\";\r\n    }else if(colorCode === 2){\r\n\r\n        // 2: green magnet deerhead\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n    }else if(colorCode === 3){\r\n\r\n        // 3: bronze magnet engraved deerhead\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvwhite-img\";\r\n    }else if(colorCode === 4){\r\n\r\n        // 4: outdoor tags\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.img = \"dvwhite-img\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 5){\r\n\r\n        // 5: sign, add details in comments\r\n        tagType.bg = \"tag-sign\";\r\n        tagType.defName = \"Sign\";\r\n        tagType.defSecond = \"Put details in the comments\";\r\n        tagType.quantity = \"\";\r\n    }else if(colorCode === 7){\r\n\r\n        // 7: repeat 1 but with title instead of city, st\r\n        tagType.bg = \"tag-green\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 8){\r\n\r\n        // 8: repeat 2 but with title instead of city, st\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 9){\r\n\r\n        // 9: repeat 3 but with title instead of city, st\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvwhite-img\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 10){\r\n\r\n        // 10: repeat 4 but with title instead of city, st\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.defSecond = \"Title\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 11){\r\n\r\n        // 11: basket check tag\r\n        tagType.bg = \"tag-basket\";\r\n        tagType.defName = \"<p style='font-size:60px;position:relative;top:-20%;'>&#8226;</p>\";\r\n        tagType.defSecond = \"<p style='font-size:19px;position:relative;bottom:30%;'>Basket Check</p>\";\r\n        tagType.quantity = \"\";\r\n    }else if(colorCode === 12){\r\n\r\n        // 12: outdoor tag for ski patrol\r\n        tagType.bg = \"tag-patrol\";\r\n        tagType.img = \"dvpatrol-img\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 13){\r\n\r\n        // 13: old outdoor tags that fit inside old mtn ops uniforms\r\n        tagType.bg = \"tag-oldoutdoor\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 14){\r\n\r\n        // 14: black diamond tags\r\n        tagType.bg = \"tag-blackdiamond\";\r\n        tagType.img = \"dvblackdiamond-img\";\r\n        tagType.quantity = \"x2\";\r\n    }else if(colorCode === 11){\r\n\r\n    }else{\r\n\r\n        // anything else, other, details in comments\r\n        tagType.bg = \"tag-other\";\r\n    }\r\n\r\n    // return value, e.g. tagType = { bg: tag-green, img: null-space }\r\n    return tagType;\r\n};\r\n\r\n\r\nfunction CreatePreviewImage(data) {\r\n    /*\r\n    data use format for non signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        secondLine,\r\n        colorCode,\r\n        thirdLine(if it exists)\r\n    } />\r\n    -\r\n    data use format for signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        height,\r\n        width,\r\n        signColor,\r\n        attachment,\r\n        thickness\r\n    } />\r\n    */\r\n\r\n    // console.log(data); // correct injection would be e.g. data.data.colorCode\r\n    let tagType = colorCodeToClass(data.data.colorCode);\r\n    // console.log(tagType.img);\r\n    tagType.bg = tagType.bg + \"  justify-content-between\";\r\n\r\n    // if custom sign\r\n    let pixelHeight;\r\n    let pixelWidth;\r\n    let splitClasses = [];\r\n    let newLineContents = data.data.name;\r\n    // console.log(data.data.colorCode);\r\n    \r\n    if(data.data.colorCode === 5){\r\n        // grab signcolor classes\r\n        // console.log(data.data.quantity);\r\n        splitClasses = data.data.signColor.split(\" / \");\r\n        splitClasses[0] = \"color-\" + splitClasses[0].toLowerCase();\r\n        splitClasses[1] = \"bg-\" + splitClasses[1].toLowerCase();\r\n        \r\n        pixelHeight = parseFloat(data.data.height);\r\n        pixelWidth = parseFloat(data.data.width);\r\n\r\n        // do sign maths\r\n        pixelHeight *= 50;\r\n        pixelWidth *= 50;\r\n        pixelHeight = pixelHeight + \"px\";\r\n        pixelWidth = pixelWidth + \"px\";\r\n\r\n        newLineContents = newLineContents.split(\"\\n\");\r\n        // console.log(newLineContents);\r\n    };\r\n    \r\n\r\n    // return page with compiled data\r\n    return (\r\n        <Col xs={12} md={6} lg={4} className=\"px-0\">\r\n            {\r\n                (data.data.colorCode !== 5) &&\r\n                <Container>\r\n                    <Row className={ tagType.bg }>\r\n                        {\r\n                            !(tagType.img === \"null-space\") &&\r\n                            <div className={ tagType.img }>\r\n                            </div>\r\n                        }\r\n                        <div className=\"title-parent\">\r\n                            <div className=\"title-text justify-content-center\">\r\n                                { data.data.name }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.secondLine }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.thirdLine }\r\n                            </div>\r\n                        </div>\r\n                    </Row>\r\n                </Container>\r\n            }\r\n            {\r\n                (data.data.colorCode === 5) &&\r\n                <Container style={{ \r\n                    width: pixelWidth,\r\n                    height: pixelHeight,\r\n                    textAlign: \"center\",\r\n                    margin: \"auto\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\"\r\n                }} className={ splitClasses[1] + \" \" + splitClasses[0] + \" bg-basic\" }>\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\", margin: \"auto\" }}>\r\n                        {\r\n                            newLineContents.map((mapItem, index) => \r\n                                <Row className=\"justify-content-center\" key={ index }>{ mapItem }</Row>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </Container>\r\n            }\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default CreatePreviewImage;","export function textValidation(inputString, minChar, strictMode){\r\n    //this will automatically convert input text and return with validated text\r\n    //console.log(\"textValidation called with: \" + inputString);\r\n    //console.log(strictMode);\r\n\r\n    /*\r\n    //check undefined\r\n    if(inputString == undefined){\r\n        //input was undefined\r\n        return 0;\r\n    }else if(inputString == \" \"){\r\n        //input was an empty string\r\n        return 0;\r\n    }else if(inputString == \"\"){\r\n        //input was an empty string\r\n        return 0;\r\n    };*/\r\n\r\n    //1st step: check all the string to make sure it has no special characters\r\n    //this is for db security purposes, only 0-9, a-Z, and !@.,?\r\n    let outputString = regexDelete(inputString, strictMode);\r\n\r\n    //1st and half step: check and cut short if string is under the minimum character limit\r\n    let stringLength = inputString.length;\r\n    if(stringLength < minChar){\r\n        //doesnt meet requirement\r\n        return \"\";\r\n    };\r\n\r\n    //2nd step: add spaces after commas\r\n    outputString = addCommaSpaces(outputString);\r\n\r\n    //3rd step: title caps everything\r\n    outputString = titleCapsify(outputString);\r\n\r\n    //4th step: check state names and shorten to abbreviation\r\n    outputString = stateToAbbv(outputString);\r\n\r\n    //console.log(outputString);\r\n    return outputString;\r\n};\r\n\r\nfunction regexDelete(string, strictMode){\r\n    // check if strict mode enabled, set regex accordingly\r\n\r\n    let regex;\r\n    if(strictMode !== undefined || strictMode === true){\r\n        // restricted name version\r\n        regex = /\\w|\\n|\\r|\\t|\\d|[,@ /&\"']|[A-Za-zÀ-ÖØ-öø-ÿ]/g;\r\n        //console.log(\"strict\");\r\n    }else{\r\n        // regular unrestricted version\r\n        regex = /\\w|\\n|\\r|\\t|\\d|[.!,?@ /&*()#$%-=+\"']|[A-Za-zÀ-ÖØ-öø-ÿ]/g; // old: /\\w|\\n|\\r|\\t|\\d|[.!,?@ ]/g, it did not allow accented characters nor /&'\"()#$%\r\n        //console.log(\"non-strict\");\r\n    };\r\n\r\n    //check if string is empty\r\n    if(string===\"\"){\r\n        //if empty, do nothing\r\n        return \"\";\r\n    }else{\r\n        //check an entire string for valid characters, then return only those\r\n        let found = string.match(regex);\r\n\r\n        //because it returns an array of all the characters, need to compile them into\r\n        //a string, join(\"\") works but join() nor toString() works without adding commas\r\n        let compiledString = found.join(\"\");\r\n\r\n        //console.dir(compiledString);\r\n        return compiledString;\r\n    }\r\n    \r\n};\r\n\r\nfunction addCommaSpaces(inputString){\r\n    //add appropriate spacing after commas if not exist\r\n\r\n    //split spaces into array\r\n    let splitString = inputString.split(\",\");\r\n\r\n    //check length of array, 1 for no comma, 2 for one comma\r\n    if(splitString.length > 1){\r\n        //has at least one comma\r\n        let stringSelection = splitString[1];\r\n\r\n        //check if the string on 2nd word starts with a space, delete if so\r\n        if(stringSelection[0] === \" \"){\r\n            //has space already, join only with comma\r\n            splitString = splitString.join(\",\");\r\n        }else{\r\n            //doesnt have space, add one\r\n            splitString = splitString.join(\", \");\r\n        };\r\n        //console.log(splitString);\r\n        \r\n        return splitString;\r\n    } else{\r\n        //has no commas, can just return w/ no modification\r\n        return inputString;\r\n    };\r\n    \r\n};\r\n\r\nfunction titleCapsify(inputString){\r\n    //title caps first letter of each word\r\n    //console.log(inputString);\r\n\r\n    //split spaces into array\r\n    let splitString = inputString.split(\" \");\r\n\r\n    //if the following is nothing it will throw an error, so delete it\r\n    //before it throws an error, this is a temporary state before adding another word\r\n    //console.dir(splitString[splitString.length - 1]);\r\n    if(splitString[splitString.length - 1] === \"\"){\r\n        //remove it from array\r\n        splitString.pop();\r\n    };\r\n    \r\n    let combinedString = splitString.map(function(word){\r\n        //make first character uppercase\r\n        let firstChar = word[0].toUpperCase();\r\n\r\n        //delete that first lowercase character\r\n        //slice in this case actually saves the remaining char's instead\r\n        word = word.slice(1);\r\n\r\n        //combine characters into a word\r\n        word = firstChar + \"\" + word;\r\n        return word;\r\n    });\r\n\r\n    //join all words together to form full name before returning\r\n    combinedString = combinedString.join(\" \");\r\n    //console.log(combinedString);\r\n    return combinedString;\r\n};\r\n\r\nfunction stateToAbbv(inputString){\r\n    //compile a list of all state names, but not Georgia since that could be the country, so don't correct it\r\n    const stateFull = [\"Alabama\", \"Alaska\",\"Arizona\",\"Arkansas\",\"California\",\"Colorado\",\"Connecticut\",\"Delaware\",\"District of Columbia\",\"Florida\",\"Hawaii\",\"Idaho\",\"Illinois\",\"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\"Massachusetts\",\"Michigan\",\"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\"Nebraska\",\"Nevada\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\"New York\",\"North Carolina\",\"North Dakota\",\"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\"Rhode Island\",\"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\"Wisconsin\",\"Wyoming\"];\r\n    const stateAbbv = [\"AL\",\"AK\",\"AZ\",\"AR\",\"CA\",\"CO\",\"CT\",\"DE\",\"DC\",\"FL\",\"HI\",\"ID\",\"IL\",\"IN\",\"IA\",\"KS\",\"KY\",\"LA\",\"ME\",\"MD\",\"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\"NC\",\"ND\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\"];\r\n    const stateAbbvTitleCaps = [\"Al\",\"Ak\",\"Az\",\"Ar\",\"Ca\",\"Co\",\"Ct\",\"De\",\"Dc\",\"Fl\",\"Hi\",\"Id\",\"Il\",\"In\",\"Ia\",\"Ks\",\"Ky\",\"La\",\"Me\",\"Md\",\"Ma\",\"Mi\",\"Mn\",\"Ms\",\"Mo\",\"Mt\",\"Ne\",\"Nv\",\"Nh\",\"Nj\",\"Nm\",\"Ny\",\"Nc\",\"Nd\",\"Oh\",\"Ok\",\"Or\",\"Pa\",\"Ri\",\"Sc\",\"Sd\",\"Tn\",\"Tx\",\"Ut\",\"Vt\",\"Va\",\"Wa\",\"Wv\",\"Wi\",\"Wy\"];\r\n    //console.log(stateFull.length); //stateAbbvTitleCaps is just for searching purposes\r\n\r\n    //split and grab the 2nd item in array, check to see if its a state name\r\n    let splitString = inputString.split(\",\");\r\n    \r\n    // sometimes there is an escape \\r, so regex it out so it can properly validate multi tag excel inputs\r\n    let lastIndex = splitString.length - 1;\r\n    splitString[lastIndex] = splitString[lastIndex].replace(/(\\r\\n|\\n|\\r)/gm, \"\");\r\n    //console.log(splitString);\r\n    \r\n    //get rid of the first character which is a space thanks to add comma spaces\r\n    //only if splitString[1] exists\r\n    let splicedString;\r\n    if(splitString.length === 2){\r\n        //\r\n        splicedString = splitString[1].slice(1);\r\n    };\r\n    \r\n    //if the comma isnt a thing, rearrange things so they are in data format can check for state abbrev\r\n    if(splitString.length === 1){ //\"park city utah\" no comma before state\r\n        //check the last word\r\n        splitString = splitString[0].split(\" \"); //[\"park\",\"city\",\"utah\"]\r\n\r\n        //temp save last\r\n        let tempPossibleState = splitString[splitString.length - 1];\r\n\r\n        //remove last\r\n        splitString.pop(); //[\"park\",\"city\"]\r\n        \r\n        //join all\r\n        let tempJoinString = [];\r\n        tempJoinString[0] = splitString.join(\" \"); //\"park city\"\r\n        \r\n        //now need to join the first parts and leave the last part like [\"park city\", \"utah\"]\r\n        tempJoinString.push(tempPossibleState);\r\n        splitString = tempJoinString;\r\n        //console.log(tempJoinString);\r\n\r\n        splicedString = splitString[1];\r\n    };\r\n\r\n    //console.log(splicedString);\r\n    \r\n    let stateSearch = stateFull.indexOf(splicedString); //-1 if no result, # of index if match\r\n    if(stateSearch !== -1){\r\n        //found match\r\n        return splitString[0] + \", \" + stateAbbv[stateSearch];\r\n    }else{\r\n        //no match found in the statefull\r\n\r\n        //start a new search for searching stateabbv for capitalization purposes\r\n        let innerStateSearch = stateAbbvTitleCaps.indexOf(splicedString);\r\n        if(innerStateSearch !== -1){\r\n            //found inner match\r\n            return splitString[0] + \", \" + stateAbbv[innerStateSearch];\r\n        }else{\r\n            //in 2 searches, found nothing\r\n            return inputString;\r\n        };\r\n    };\r\n};"],"sourceRoot":""}