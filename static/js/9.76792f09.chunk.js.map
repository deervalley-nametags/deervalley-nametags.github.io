{"version":3,"sources":["js/ExcelTable.js","js/CreateMultiTagPage.js","js/CreatePreviewImage.js","js/textValidation.js","img/excel5.png"],"names":["ExcelTable","data","useEffect","doCellChange","e","idX","parseInt","target","id","idY","slice","type","key","oldTableData","newValidatedValue","textValidation","value","name","secondLine","thirdLine","setData","refToFocus","document","getElementById","focus","checkAddCell","index","length","select","pasteData","dataToSplit","clipboardData","getData","preventDefault","originX","splitByRow","split","pop","forEach","rowItem","rowIndex","colItem","colIndex","validatedValue","push","className","map","item","FormControl","defaultValue","aria-label","onKeyDown","onBlur","onFocus","onPaste","CreateMultiTagPage","thisColorCode","useParams","history","useHistory","useState","showExampleModal","setShowExampleModal","tempComments","setTempComments","tempRequestor","setTempRequestor","tempQuantity","setTempQuantity","color","requestor","comments","quantity","submitArray","setSubmitArray","submitGrey","setSubmitGrey","statusTextIndex","setStatusTextIndex","tableData","setTableData","dataToPush","realIndex","console","log","Container","Row","Col","xs","to","Button","InputGroup","placeholder","aria-describedby","onChange","validatedText","lg","variant","onClick","Modal","size","show","onHide","Header","closeButton","Body","src","ExampleImg","alt","i","inputData","as","md","Prepend","Radio","defaultChecked","checked","Append","Text","CreatePreviewImage","colorCode","disabled","dbUtility","mode","writeData","then","statusBack","pixelHeight","pixelWidth","tagType","bg","img","defName","defSecond","colorCodeToClass","splitClasses","newLineContents","signColor","toLowerCase","parseFloat","height","width","style","textAlign","margin","display","flexDirection","mapItem","inputString","minChar","strictMode","outputString","string","regex","undefined","match","join","regexDelete","splicedString","stateAbbv","splitString","lastIndex","replace","tempPossibleState","tempJoinString","stateSearch","indexOf","innerStateSearch","stateToAbbv","combinedString","word","firstChar","toUpperCase","titleCapsify","stringSelection","addCommaSpaces","module","exports"],"mappings":"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","file":"static/js/9.76792f09.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { \r\n    FormControl\r\n} from 'react-bootstrap';\r\nimport '../css/datasheet.css';\r\nimport { textValidation } from './textValidation.js';\r\n\r\nfunction ExcelTable(data) {\r\n    /*\r\n    this function is for excel table stuff\r\n    -\r\n    data format:\r\n    tableData = [{\r\n        name: \"\",\r\n        secondLine: \"\",\r\n        thirdLine: \"\"\r\n    },{},{},etc]\r\n    */\r\n    //console.log(data);\r\n    //console.log(data.setData);\r\n\r\n\r\n    //debug: when data.data changes, log it\r\n    useEffect(() => {\r\n        //console.log(data.data);\r\n    },[data.data]);\r\n\r\n\r\n    //perform a cell change on key down and blur\r\n    const doCellChange = (e) => {\r\n        //console.log(e.key);\r\n        \r\n        //integerify the cell id\r\n        let idX = parseInt(e.target.id[0]);\r\n        let idY = parseInt(e.target.id.slice(2)); //need slice, because it might be multiple digits long\r\n        \r\n        //on enter, tab, or blur\r\n        if(e.type === \"blur\" || e.key === \"Enter\" || e.key === \"Tab\"){\r\n            //debug: value, then id\r\n            //console.log(\"val: \" + e.target.value);\r\n            //console.log(e.target.id);\r\n            \r\n    \r\n            //make change to cell by setting placeholder to value\r\n            //first grab current data\r\n            let oldTableData = data.data;\r\n\r\n            //text validation\r\n            let newValidatedValue = textValidation(e.target.value, 3, true);\r\n            \r\n            //translate int X(0, 1, 2) to string object version(.name, .secondLine, .thirdLine)\r\n            if(idX === 0){\r\n                //set data to name\r\n                oldTableData[idY].name = newValidatedValue;\r\n\r\n                //recursively set the cells value to what the data says it should be\r\n                e.target.value = data.data[idY].name;\r\n            }else if(idX === 1){\r\n                //set data to secondLine\r\n                oldTableData[idY].secondLine = newValidatedValue;\r\n\r\n                //recursively set the cells value to what the data says it should be\r\n                e.target.value = data.data[idY].secondLine;\r\n            }else{\r\n                //set data to thirdLine\r\n                oldTableData[idY].thirdLine = newValidatedValue;\r\n\r\n                //recursively set the cells value to what the data says it should be\r\n                e.target.value = data.data[idY].thirdLine;\r\n            }\r\n            \r\n            //now update data\r\n            //console.log(oldTableData[0].name);\r\n            data.setData([...oldTableData]);\r\n\r\n        }\r\n        \r\n        \r\n        //only if enter key pressed, refocus on input below\r\n        //tab doesnt need this because it does it by default\r\n        if(e.key === 'Enter'){\r\n            //use idY as index, grab ref+1, then strinfigy it\r\n            let refToFocus = idY + 1;\r\n            refToFocus = \"0-\" + refToFocus;\r\n\r\n            //debug: react reference was acting funny, so vanilla js focus below\r\n            //refArray.current[refToFocus].current.focus();\r\n            document.getElementById(refToFocus).focus();\r\n        };\r\n\r\n\r\n        //arrow key pressing\r\n        if(e.key === 'ArrowUp'){\r\n            //use idY as index, grab ref+1, then strinfigy it\r\n            let refToFocus = idY - 1;\r\n\r\n            //error catching\r\n            if(refToFocus < 0){\r\n                refToFocus = 0;\r\n            }\r\n\r\n            //compile id string\r\n            refToFocus = idX + \"-\" + refToFocus;\r\n\r\n\r\n            //debug: react reference was acting funny, so vanilla js focus below\r\n            //refArray.current[refToFocus].current.focus();\r\n            document.getElementById(refToFocus).focus();\r\n        }else if(e.key === 'ArrowDown'){\r\n            //use idY as index, grab ref+1, then strinfigy it\r\n            let refToFocus = idY + 1;\r\n            refToFocus = idX + \"-\" + refToFocus;\r\n\r\n            //debug: react reference was acting funny, so vanilla js focus below\r\n            //refArray.current[refToFocus].current.focus();\r\n            document.getElementById(refToFocus).focus();\r\n        }else if(e.key === 'ArrowLeft'){\r\n            //use idY as index, grab ref+1, then strinfigy it\r\n            let refToFocus = idX - 1;\r\n\r\n            //error catching\r\n            if(refToFocus < 0){\r\n                refToFocus = 2;\r\n            }\r\n\r\n            //compile id string\r\n            refToFocus = refToFocus + \"-\" + idY;\r\n\r\n            //debug: react reference was acting funny, so vanilla js focus below\r\n            //refArray.current[refToFocus].current.focus();\r\n            document.getElementById(refToFocus).focus();\r\n        }else if(e.key === 'ArrowRight'){\r\n            //use idY as index, grab ref+1, then strinfigy it\r\n            let refToFocus = idX + 1;\r\n\r\n            //error catching\r\n            if(refToFocus > 2){\r\n                refToFocus = 0;\r\n            }\r\n\r\n            //compile id string\r\n            refToFocus = refToFocus + \"-\" + idY;\r\n\r\n            //debug: react reference was acting funny, so vanilla js focus below\r\n            //refArray.current[refToFocus].current.focus();\r\n            document.getElementById(refToFocus).focus();\r\n        };\r\n    };\r\n\r\n\r\n    //on focus, it will check if it is the last row, because of focus it will throw a hard\r\n    //error if it is allowed to focus to a row that doesn't exist\r\n    //so, if it doesn't exist on focus, create another row\r\n    const checkAddCell = (e, index) => {\r\n        //console.log(index);\r\n        //console.log(data.data.length);\r\n        if((index + 1) === data.data.length){\r\n            data.setData([...data.data,{\r\n                name: \"\",\r\n                secondLine: \"\",\r\n                thirdLine: \"\"\r\n            }]);\r\n        }\r\n\r\n        //it will also select whole thing\r\n        const toSelect = document.getElementById(e.target.id);\r\n        toSelect.select();\r\n    };\r\n\r\n\r\n    //on paste\r\n    const pasteData = (e) => {\r\n        //debug: clipboard paste data\r\n        //console.log(e.clipboardData.getData('Text'));\r\n        //console.dir(e.target.value);\r\n\r\n        //grab paste data, set a mutable table data set\r\n        let dataToSplit = e.clipboardData.getData('Text');\r\n        let oldTableData = data.data;\r\n\r\n        //prevent it from actually pasting anything\r\n        e.preventDefault();\r\n\r\n        //grab origin index(X/Y index that was pasted into)\r\n        let idX = parseInt(e.target.id[0]);\r\n        let idY = parseInt(e.target.id.slice(2)); //need slice, because it might be multiple digits long\r\n\r\n        //set originX so you can restore it later\r\n        let originX = idX;\r\n        //console.log(\"X: \" + idX + \" - Y: \" + idY);\r\n\r\n\r\n        //split by new line, then delete last empty array\r\n        let splitByRow = dataToSplit.split(\"\\n\");\r\n        splitByRow.pop();\r\n\r\n        //for each row\r\n        splitByRow.forEach((rowItem, rowIndex) => {\r\n            let splitByCol = rowItem.split(\"\\t\");\r\n\r\n            //for each column within each row\r\n            splitByCol.forEach((colItem, colIndex) => {\r\n                //console.log(\"X: \" + idX + \" - Y: \" + idY + \" - \" + colItem);\r\n                \r\n                //text verify it\r\n                let validatedValue = textValidation(colItem, 3, true);\r\n                //console.log(\"X: \" + idX + \" - Y: \" + idY + \" - \" + validatedValue);\r\n                \r\n                //make the value equal to validated text\r\n                //colItem.value = validatedValue;\r\n                \r\n                //main section where items must be inserted into old table data\r\n                //translate int X(0, 1, 2) to string object version(.name, .secondLine, .thirdLine)\r\n                if(idX === 0){\r\n                    //name\r\n                    oldTableData[idY].name = validatedValue;\r\n\r\n                    //only if the cell is at origin\r\n                    if(rowIndex === 0 && colIndex === 0){\r\n                        //recursively set the cells value to what the data says it should be\r\n                        e.target.value = data.data[idY].name;\r\n                    }\r\n                }else if(idX === 1){\r\n                    //secondLine\r\n                    oldTableData[idY].secondLine = validatedValue;\r\n\r\n                    //only if the cell is at origin\r\n                    if(rowIndex === 0 && colIndex === 0){\r\n                        //recursively set the cells value to what the data says it should be\r\n                        e.target.value = data.data[idY].secondLine;\r\n                    }\r\n                }else if(idX === 2){\r\n                    //thirdLine\r\n                    oldTableData[idY].thirdLine = validatedValue;\r\n\r\n                    //only if the cell is at origin\r\n                    if(rowIndex === 0 && colIndex === 0){\r\n                        //recursively set the cells value to what the data says it should be\r\n                        e.target.value = data.data[idY].thirdLine;\r\n                    }\r\n                }else{\r\n                    //fourth column, just do nothing, this is the X overflow\r\n                }\r\n\r\n                //advance the col\r\n                idX++;\r\n            });\r\n\r\n            //add row\r\n            oldTableData.push({\r\n                name: \"\",\r\n                secondLine: \"\",\r\n                thirdLine: \"\"\r\n            });\r\n\r\n            //advance the row and reset col\r\n            idY++;\r\n            idX = originX;\r\n        });\r\n\r\n        //update data\r\n        data.setData([...oldTableData]);\r\n\r\n        //this section used to be dedicated to focusing on the row below what was pasted,\r\n        //but if that exceeded the table data length before it had a chance to update, then it would throw\r\n        //error, and it is too much effort to program in such a small feature\r\n        //console.log(splitByRow);\r\n    }\r\n    \r\n\r\n    return(\r\n        <table>\r\n            <tbody>\r\n                <tr>\r\n                    <td className=\"td-cell\">NAME / Ski-Basket Check #</td>\r\n                    <td className=\"td-cell\">City, ST / Title</td>\r\n                    <td className=\"td-cell\">Third Line</td>\r\n                </tr>\r\n                {\r\n                    data.data.map((item, index) => \r\n                        <tr key={ index }>\r\n                            <td className=\"td-cell\">\r\n                                <FormControl\r\n                                    defaultValue={ item.name }\r\n                                    className=\"cell-input\"\r\n                                    aria-label=\"cell input\"\r\n                                    id={ \"0-\" + index }\r\n                                    onKeyDown={ (e) => {doCellChange(e) }}\r\n                                    onBlur={ (e) => {doCellChange(e) }}\r\n                                    onFocus={ (e) => {checkAddCell(e, index) }}\r\n                                    onPaste={ (e) => {pasteData(e) }}\r\n                                />\r\n                            </td>\r\n                            <td className=\"td-cell\">\r\n                                <FormControl\r\n                                    defaultValue={ item.secondLine }\r\n                                    className=\"cell-input\"\r\n                                    aria-label=\"cell input\"\r\n                                    id={ \"1-\" + index }\r\n                                    onKeyDown={ (e) => {doCellChange(e) }}\r\n                                    onBlur={ (e) => {doCellChange(e) }}\r\n                                    onFocus={ (e) => {checkAddCell(e, index) }}\r\n                                    onPaste={ (e) => {pasteData(e) }}\r\n                                />\r\n                            </td>\r\n                            <td className=\"td-cell\">\r\n                                <FormControl\r\n                                    defaultValue={ item.thirdLine }\r\n                                    className=\"cell-input\"\r\n                                    aria-label=\"cell input\"\r\n                                    id={ \"2-\" + index }\r\n                                    onKeyDown={ (e) => {doCellChange(e) }}\r\n                                    onBlur={ (e) => {doCellChange(e) }}\r\n                                    onFocus={ (e) => {checkAddCell(e, index) }}\r\n                                    onPaste={ (e) => {pasteData(e) }}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                }\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default ExcelTable;","import React, { useState, useEffect } from 'react';\r\nimport { useHistory, NavLink, useParams } from \"react-router-dom\";\r\n\r\n//layout import\r\nimport { \r\n    Container, \r\n    Button,\r\n    Row,\r\n    Col,\r\n    InputGroup,\r\n    FormControl,\r\n    Modal\r\n} from 'react-bootstrap';\r\nimport '../css/nav.css';\r\nimport '../css/datasheet.css';\r\nimport ExampleImg from '../img/excel5.png';\r\n\r\n//utility import\r\nimport CreatePreviewImage from './CreatePreviewImage.js';\r\nimport ExcelTable from './ExcelTable.js';\r\nimport { textValidation } from './textValidation.js';\r\nimport { dbUtility } from './dbUtility.js';\r\n\r\n\r\n//start page\r\nconst CreateMultiTagPage = () => {\r\n    //debug: this should be the colorCode in the url e.g. /create/3 so \"3\"\r\n    //console.log(match.params.id);\r\n    //the number it grabs in the url is actually a string, so make it int\r\n    let thisColorCode = parseInt(useParams().id);\r\n\r\n\r\n    //this is to be able to load status window when tag created\r\n    let history = useHistory();\r\n\r\n\r\n    //hide/show modal\r\n    const[showExampleModal, setShowExampleModal] = useState(false);\r\n\r\n\r\n    //comments and requestor temp storage\r\n    const[tempComments, setTempComments] = useState(\"\");\r\n    const[tempRequestor, setTempRequestor] = useState(\"\");\r\n    const[tempQuantity, setTempQuantity] = useState((thisColorCode === 1) ? \"2-PINS\" : \"2-MAGNETS\");\r\n    \r\n\r\n    //set the submit array(same data format as multi tag) to default values\r\n    const[ submitArray, setSubmitArray ] = useState([{\r\n        name: \"\",\r\n        color: thisColorCode,\r\n        secondLine: \"\",\r\n        thirdLine: \"\",\r\n        requestor: \"\",\r\n        comments: \"\",\r\n        quantity: (thisColorCode === 1) ? \"2-PINS\" : \"2-MAGNETS\",\r\n    }]);\r\n\r\n\r\n    //submit button on request\r\n    const submitRequest = () => {\r\n        //check to make sure user hasn't done in-browser html magic to bypass disabled submit button\r\n        //an empty or invalid request\r\n        if(submitGrey === false){\r\n            //pass, as its unlikely to change a react page variable in browser unless superuser\r\n\r\n            //change status text to loading\r\n            setStatusTextIndex(3);\r\n\r\n            //db new entry\r\n            dbUtility({\r\n                mode: \"new_entry\",\r\n                writeData: submitArray\r\n            }).then(function(statusBack){\r\n                //console.log(statusBack)\r\n                //on success, navigate to /status\r\n                history.push(\"/status\");\r\n            });\r\n        }else{\r\n            //failed, this shouldn't happen though\r\n        };\r\n    }\r\n\r\n\r\n    //submit grey button text and status text\r\n    const[ submitGrey, setSubmitGrey ] = useState(true);\r\n    //for the status text, only the index of it changes, not the actual string [4] is empty string\r\n    const statusText = [\r\n        \"There must be a requestor, there must be at least 1 name or check #\",\r\n        \"There must be a requestor.\",\r\n        \"The Name on the tag must be at least 3 characters\",\r\n        \"Submitting...\",\r\n        \"\"\r\n    ];\r\n    const[ statusTextIndex, setStatusTextIndex ] = useState(0);\r\n\r\n\r\n    //adding rows on button click\r\n    const addRows = () => {\r\n        let i;\r\n        let inputData = [];\r\n\r\n        //add 10 rows on click\r\n        for(i = 0; i < 10; i++){\r\n            //\r\n            inputData.push({ name: \"\", secondLine: \"\", thirdLine: \"\" });\r\n        }\r\n        setTableData([...tableData,...inputData]);\r\n    }\r\n\r\n\r\n    //excel spreadsheet stuff\r\n    const[tableData, setTableData] = useState([\r\n        { name: \"\", secondLine: \"\", thirdLine: \"\" },\r\n        { name: \"\", secondLine: \"\", thirdLine: \"\" },\r\n        { name: \"\", secondLine: \"\", thirdLine: \"\" },\r\n        { name: \"\", secondLine: \"\", thirdLine: \"\" },\r\n        { name: \"\", secondLine: \"\", thirdLine: \"\" },\r\n        { name: \"\", secondLine: \"\", thirdLine: \"\" },\r\n        { name: \"\", secondLine: \"\", thirdLine: \"\" },\r\n        { name: \"\", secondLine: \"\", thirdLine: \"\" }\r\n    ]);\r\n\r\n\r\n    \r\n    //update submitArray when excel table updates\r\n    useEffect(() => {\r\n        //console.dir(tableData);\r\n        let dataToPush = [];\r\n        let realIndex = 0;\r\n\r\n        //it needs to shave off the empty lines\r\n        tableData.forEach((item, index) => {\r\n            \r\n            //check just the name column in each\r\n            if(item.name === \"\"){\r\n                //if empty do nothing\r\n            }else{\r\n                //anything else means it has data, according to .name property\r\n                \r\n                //actual push it\r\n                dataToPush.push(item);\r\n\r\n                //add extra values\r\n                dataToPush[realIndex].color = thisColorCode;\r\n                dataToPush[realIndex].comments = tempComments;\r\n                dataToPush[realIndex].requestor = tempRequestor;\r\n                dataToPush[realIndex].quantity = tempQuantity;\r\n                \r\n                realIndex++;\r\n            };\r\n        });\r\n\r\n        //update submitArray\r\n        setSubmitArray([...dataToPush]);\r\n    },[tableData,tempComments,tempRequestor,thisColorCode,tempQuantity]);\r\n    \r\n\r\n\r\n    //when submitArray updates\r\n    useEffect(() => {\r\n        //console.log(submitArray);\r\n\r\n        //check submit grey button for errors\r\n        //also update the submission status, e.g. you need X or Y to submit\r\n        //if empty string or 0\r\n        //console.log(submitArray.length);\r\n\r\n        //catch an error where it replaces the template with nothing\r\n        if(submitArray.length === 0){\r\n            //\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(0);\r\n        }else if(submitArray[0].name === \"\" && submitArray[0].requestor === \"\"){\r\n            //false due to name AND requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(0);\r\n        }else if(submitArray[0].name === \"\"){\r\n            //false only to name\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(2);\r\n        }else if(submitArray[0].requestor === \"\"){\r\n            //false only to requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(1);\r\n        }else if(submitArray[0].name !== \"\" && submitArray[0].requestor !== \"\"){\r\n            //true only if name AND requestor are not empty strings set from textValidation\r\n            setSubmitGrey(false);\r\n            setStatusTextIndex(4);\r\n        }else{\r\n            //some other condition\r\n            console.log(\"use Effect [submitArray] ran into some other condition on validation!\");\r\n        };\r\n    },[submitArray]);\r\n\r\n\r\n    //return\r\n    return (\r\n        <Container>\r\n            <Row className=\"justify-content-between nav-h4-bar-bg\">\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    <NavLink to=\"/\">\r\n                        <Button>\r\n                            BACK\r\n                        </Button>\r\n                    </NavLink>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        MULTIPLE TAGS\r\n                    </h4>\r\n                </Col>\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    \r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mt-3\">\r\n                <InputGroup>\r\n                    <FormControl\r\n                        placeholder=\"Requestor's Name and Department\"\r\n                        aria-label=\"Requestor\"\r\n                        aria-describedby=\"basic-addon1\"\r\n                        onChange={ e => {\r\n                            //text validate\r\n                            let validatedText = textValidation(e.target.value);\r\n                            \r\n                            //set temp requestor storage\r\n                            setTempRequestor(validatedText);\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row className=\"justify-content-between\">\r\n                <Col xs={  12  } lg={ 3 }>\r\n                    <Row className=\"mt-3\">\r\n                        <Button variant=\"primary\" className=\"multi-left-button\" onClick={ () => {\r\n                            setShowExampleModal(true);\r\n                        }}>\r\n                            See Example\r\n                        </Button>\r\n                        <Modal size=\"xl\" show={ showExampleModal } onHide={ () => {\r\n                            setShowExampleModal(false);\r\n                        }}>\r\n                            <Modal.Header closeButton></Modal.Header>\r\n                            <Modal.Body>\r\n\r\n                                <img id=\"example-img-id\" src={ ExampleImg } alt=\"example of how to paste from excel\" />\r\n                            </Modal.Body>\r\n                        </Modal>\r\n                    </Row>\r\n                    <Row className=\"mt-3 justify-content-between\">\r\n                        <Button className=\"multi-left-button\" onClick={ addRows }>\r\n                            Add 10 Rows\r\n                        </Button>\r\n                    </Row>\r\n                </Col>\r\n                <Col xs={  12  } lg={ 9 } className=\"px-0 mt-3\">\r\n                    <InputGroup id=\"comment-box\">\r\n                        <FormControl\r\n                            as=\"textarea\"\r\n                            placeholder=\"Comments\"\r\n                            aria-label=\"Comments\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            onChange={ e => {\r\n                                //text validate\r\n                                let validatedText = textValidation(e.target.value);\r\n\r\n                                //set temp comments storage\r\n                                setTempComments(validatedText);\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n                </Col>\r\n\r\n                \r\n            </Row>\r\n            <Row className=\"mt-3\">\r\n                <ExcelTable data={ tableData } setData={ setTableData } />\r\n            </Row>\r\n            {\r\n                (thisColorCode === 1 || thisColorCode === 2 || thisColorCode === 3) &&\r\n                <Row className=\"justify-content-between pinmag-row mt-3\">\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN\" \r\n                                        defaultChecked={ (thisColorCode === 1) ? true : false }\r\n                                        onChange={e => {\r\n                                            //if checked is true\r\n                                            if(e.target.checked){\r\n                                                //set value accordingly\r\n                                                setTempQuantity(\"2-PINS\");\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>2 PINS</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN\" \r\n                                        defaultChecked={ (thisColorCode !== 1) ? true : false }\r\n                                        onChange={e => {\r\n                                            //if checked is true\r\n                                            if(e.target.checked){\r\n                                                //set value accordingly\r\n                                                setTempQuantity(\"2-MAGNETS\");\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>2 MAGNETS</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN and MAG\" \r\n                                        onChange={e => {\r\n                                            //if checked is true\r\n                                            if(e.target.checked){\r\n                                                //set value accordingly\r\n                                                setTempQuantity(\"1-PIN + 1-MAGNET\");\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>1 PIN + 1 MAGNET</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            <Row>\r\n                <h5>Preview:</h5>\r\n\r\n            </Row>\r\n            <Row className=\"mt-3\">\r\n                {\r\n                    submitArray.map((item, index) =>\r\n                        <Col xs={ 12 } md={ 6 } lg={ 4 } key={ index }>\r\n                            <CreatePreviewImage data={{ \r\n                                colorCode: thisColorCode, \r\n                                name: item.name,\r\n                                secondLine: item.secondLine,\r\n                                thirdLine: item.thirdLine\r\n                            }} />\r\n                        </Col>\r\n                    )\r\n                }\r\n            </Row>\r\n            <Row className=\"mt-3 justify-content-end\">\r\n                <Col xs={ 12 } md={ 12 } lg=\"auto\">\r\n                    <p className=\"mt-2\">{ statusText[statusTextIndex] }</p>\r\n                </Col>\r\n                <Col xs={ 12 } md={ 12 } lg=\"auto\">\r\n                    <Button type=\"submit\" disabled={ submitGrey } onClick={ submitRequest }>Submit Request</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CreateMultiTagPage;","import React from 'react';\r\nimport { \r\n    Col,\r\n    Row,\r\n    Container\r\n} from 'react-bootstrap';\r\nimport '../css/tags.css';\r\nimport '../css/signcolor.css';\r\n\r\nfunction colorCodeToClass(colorCode){\r\n    /*\r\n    tagType obj are the classes to apply and default texts on each\r\n    bg background class, \r\n    img is the deer head logo, null-space is the default class that deletes the class\r\n    in the event that there is no deer head\r\n    defName: default Name placeholder\r\n    defSecond: default second line text placeholder\r\n    quantity: the default quantity for each tag type(unchangeable, only for info purposes)\r\n    -\r\n    see CreateSignColor for tag id list\r\n    */\r\n    let tagType = {\r\n        bg: \"\",\r\n        img: \"null-space\",\r\n        defName: \"Name\",\r\n        defSecond: \"City, ST\",\r\n        quantity: \"x2\"\r\n    };\r\n\r\n    // translate color code to image type using classes\r\n    if(colorCode === 1){\r\n                \r\n        // 1: green pin no deerhead(normal nametag and default selection)\r\n        tagType.bg = \"tag-green\";\r\n    }else if(colorCode === 2){\r\n\r\n        // 2: green magnet deerhead\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n    }else if(colorCode === 3){\r\n\r\n        // 3: bronze magnet engraved deerhead\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvwhite-img\";\r\n    }else if(colorCode === 4){\r\n\r\n        // 4: outdoor tags\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.img = \"dvwhite-img\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 5){\r\n\r\n        // 5: sign, add details in comments\r\n        tagType.bg = \"tag-sign\";\r\n        tagType.defName = \"Sign\";\r\n        tagType.defSecond = \"Put details in the comments\";\r\n        tagType.quantity = \"\";\r\n    }else if(colorCode === 7){\r\n\r\n        // 7: repeat 1 but with title instead of city, st\r\n        tagType.bg = \"tag-green\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 8){\r\n\r\n        // 8: repeat 2 but with title instead of city, st\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 9){\r\n\r\n        // 9: repeat 3 but with title instead of city, st\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvwhite-img\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 10){\r\n\r\n        // 10: repeat 4 but with title instead of city, st\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.defSecond = \"Title\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 11){\r\n\r\n        // 11: basket check tag\r\n        tagType.bg = \"tag-basket\";\r\n        tagType.defName = \"<p style='font-size:60px;position:relative;top:-20%;'>&#8226;</p>\";\r\n        tagType.defSecond = \"<p style='font-size:19px;position:relative;bottom:30%;'>Basket Check</p>\";\r\n        tagType.quantity = \"\";\r\n    }else if(colorCode === 12){\r\n\r\n        // 12: outdoor tag for ski patrol\r\n        tagType.bg = \"tag-patrol\";\r\n        tagType.img = \"dvpatrol-img\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 13){\r\n\r\n        // 13: old outdoor tags that fit inside old mtn ops uniforms\r\n        tagType.bg = \"tag-oldoutdoor\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 14){\r\n\r\n        // 14: black diamond tags\r\n        tagType.bg = \"tag-blackdiamond\";\r\n        tagType.img = \"dvblackdiamond-img\";\r\n        tagType.quantity = \"x2\";\r\n    }else if(colorCode === 11){\r\n\r\n    }else{\r\n\r\n        // anything else, other, details in comments\r\n        tagType.bg = \"tag-other\";\r\n    }\r\n\r\n    // return value, e.g. tagType = { bg: tag-green, img: null-space }\r\n    return tagType;\r\n};\r\n\r\n\r\nfunction CreatePreviewImage(data) {\r\n    /*\r\n    data use format for non signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        secondLine,\r\n        colorCode,\r\n        thirdLine(if it exists)\r\n    } />\r\n    -\r\n    data use format for signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        height,\r\n        width,\r\n        signColor,\r\n        attachment,\r\n        thickness\r\n    } />\r\n    */\r\n\r\n    // console.log(data); // correct injection would be e.g. data.data.colorCode\r\n    let tagType = colorCodeToClass(data.data.colorCode);\r\n    // console.log(tagType.img);\r\n    tagType.bg = tagType.bg + \"  justify-content-between\";\r\n\r\n    // if custom sign\r\n    let pixelHeight;\r\n    let pixelWidth;\r\n    let splitClasses = [];\r\n    let newLineContents = data.data.name;\r\n    // console.log(data.data.colorCode);\r\n    \r\n    if(data.data.colorCode === 5){\r\n        // grab signcolor classes\r\n        // console.log(data.data.quantity);\r\n        splitClasses = data.data.signColor.split(\" / \");\r\n        splitClasses[0] = \"color-\" + splitClasses[0].toLowerCase();\r\n        splitClasses[1] = \"bg-\" + splitClasses[1].toLowerCase();\r\n        \r\n        pixelHeight = parseFloat(data.data.height);\r\n        pixelWidth = parseFloat(data.data.width);\r\n\r\n        // do sign maths\r\n        pixelHeight *= 50;\r\n        pixelWidth *= 50;\r\n        pixelHeight = pixelHeight + \"px\";\r\n        pixelWidth = pixelWidth + \"px\";\r\n\r\n        newLineContents = newLineContents.split(\"\\n\");\r\n        // console.log(newLineContents);\r\n    };\r\n    \r\n\r\n    // return page with compiled data\r\n    return (\r\n        <Col xs={12} md={6} lg={4} className=\"px-0\">\r\n            {\r\n                (data.data.colorCode !== 5) &&\r\n                <Container>\r\n                    <Row className={ tagType.bg }>\r\n                        {\r\n                            !(tagType.img === \"null-space\") &&\r\n                            <div className={ tagType.img }>\r\n                            </div>\r\n                        }\r\n                        <div className=\"title-parent\">\r\n                            <div className=\"title-text justify-content-center\">\r\n                                { data.data.name }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.secondLine }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.thirdLine }\r\n                            </div>\r\n                        </div>\r\n                    </Row>\r\n                </Container>\r\n            }\r\n            {\r\n                (data.data.colorCode === 5) &&\r\n                <Container style={{ \r\n                    width: pixelWidth,\r\n                    height: pixelHeight,\r\n                    textAlign: \"center\",\r\n                    margin: \"auto\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\"\r\n                }} className={ splitClasses[1] + \" \" + splitClasses[0] + \" bg-basic\" }>\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\", margin: \"auto\" }}>\r\n                        {\r\n                            newLineContents.map((mapItem, index) => \r\n                                <Row className=\"justify-content-center\" key={ index }>{ mapItem }</Row>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </Container>\r\n            }\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default CreatePreviewImage;","export function textValidation(inputString, minChar, strictMode){\r\n    //this will automatically convert input text and return with validated text\r\n    //console.log(\"textValidation called with: \" + inputString);\r\n    //console.log(strictMode);\r\n\r\n    /*\r\n    //check undefined\r\n    if(inputString == undefined){\r\n        //input was undefined\r\n        return 0;\r\n    }else if(inputString == \" \"){\r\n        //input was an empty string\r\n        return 0;\r\n    }else if(inputString == \"\"){\r\n        //input was an empty string\r\n        return 0;\r\n    };*/\r\n\r\n    //1st step: check all the string to make sure it has no special characters\r\n    //this is for db security purposes, only 0-9, a-Z, and !@.,?\r\n    let outputString = regexDelete(inputString, strictMode);\r\n\r\n    //1st and half step: check and cut short if string is under the minimum character limit\r\n    let stringLength = inputString.length;\r\n    if(stringLength < minChar){\r\n        //doesnt meet requirement\r\n        return \"\";\r\n    };\r\n\r\n    //2nd step: add spaces after commas\r\n    outputString = addCommaSpaces(outputString);\r\n\r\n    //3rd step: title caps everything\r\n    outputString = titleCapsify(outputString);\r\n\r\n    //4th step: check state names and shorten to abbreviation\r\n    outputString = stateToAbbv(outputString);\r\n\r\n    //console.log(outputString);\r\n    return outputString;\r\n};\r\n\r\nfunction regexDelete(string, strictMode){\r\n    // check if strict mode enabled, set regex accordingly\r\n\r\n    let regex;\r\n    if(strictMode !== undefined || strictMode === true){\r\n        // restricted name version\r\n        regex = /\\w|\\n|\\r|\\t|\\d|[,@ /&\"']|[A-Za-zÀ-ÖØ-öø-ÿ]/g;\r\n        //console.log(\"strict\");\r\n    }else{\r\n        // regular unrestricted version\r\n        regex = /\\w|\\n|\\r|\\t|\\d|[.!,?@ /&*()#$%-=+\"']|[A-Za-zÀ-ÖØ-öø-ÿ]/g; // old: /\\w|\\n|\\r|\\t|\\d|[.!,?@ ]/g, it did not allow accented characters nor /&'\"()#$%\r\n        //console.log(\"non-strict\");\r\n    };\r\n\r\n    //check if string is empty\r\n    if(string===\"\"){\r\n        //if empty, do nothing\r\n        return \"\";\r\n    }else{\r\n        //check an entire string for valid characters, then return only those\r\n        let found = string.match(regex);\r\n\r\n        //because it returns an array of all the characters, need to compile them into\r\n        //a string, join(\"\") works but join() nor toString() works without adding commas\r\n        let compiledString = found.join(\"\");\r\n\r\n        //console.dir(compiledString);\r\n        return compiledString;\r\n    }\r\n    \r\n};\r\n\r\nfunction addCommaSpaces(inputString){\r\n    //add appropriate spacing after commas if not exist\r\n\r\n    //split spaces into array\r\n    let splitString = inputString.split(\",\");\r\n\r\n    //check length of array, 1 for no comma, 2 for one comma\r\n    if(splitString.length > 1){\r\n        //has at least one comma\r\n        let stringSelection = splitString[1];\r\n\r\n        //check if the string on 2nd word starts with a space, delete if so\r\n        if(stringSelection[0] === \" \"){\r\n            //has space already, join only with comma\r\n            splitString = splitString.join(\",\");\r\n        }else{\r\n            //doesnt have space, add one\r\n            splitString = splitString.join(\", \");\r\n        };\r\n        //console.log(splitString);\r\n        \r\n        return splitString;\r\n    } else{\r\n        //has no commas, can just return w/ no modification\r\n        return inputString;\r\n    };\r\n    \r\n};\r\n\r\nfunction titleCapsify(inputString){\r\n    //title caps first letter of each word\r\n    //console.log(inputString);\r\n\r\n    //split spaces into array\r\n    let splitString = inputString.split(\" \");\r\n\r\n    //if the following is nothing it will throw an error, so delete it\r\n    //before it throws an error, this is a temporary state before adding another word\r\n    //console.dir(splitString[splitString.length - 1]);\r\n    if(splitString[splitString.length - 1] === \"\"){\r\n        //remove it from array\r\n        splitString.pop();\r\n    };\r\n    \r\n    let combinedString = splitString.map(function(word){\r\n        //make first character uppercase\r\n        let firstChar = word[0].toUpperCase();\r\n\r\n        //delete that first lowercase character\r\n        //slice in this case actually saves the remaining char's instead\r\n        word = word.slice(1);\r\n\r\n        //combine characters into a word\r\n        word = firstChar + \"\" + word;\r\n        return word;\r\n    });\r\n\r\n    //join all words together to form full name before returning\r\n    combinedString = combinedString.join(\" \");\r\n    //console.log(combinedString);\r\n    return combinedString;\r\n};\r\n\r\nfunction stateToAbbv(inputString){\r\n    //compile a list of all state names, but not Georgia since that could be the country, so don't correct it\r\n    const stateFull = [\"Alabama\", \"Alaska\",\"Arizona\",\"Arkansas\",\"California\",\"Colorado\",\"Connecticut\",\"Delaware\",\"District of Columbia\",\"Florida\",\"Hawaii\",\"Idaho\",\"Illinois\",\"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\"Massachusetts\",\"Michigan\",\"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\"Nebraska\",\"Nevada\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\"New York\",\"North Carolina\",\"North Dakota\",\"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\"Rhode Island\",\"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\"Wisconsin\",\"Wyoming\"];\r\n    const stateAbbv = [\"AL\",\"AK\",\"AZ\",\"AR\",\"CA\",\"CO\",\"CT\",\"DE\",\"DC\",\"FL\",\"HI\",\"ID\",\"IL\",\"IN\",\"IA\",\"KS\",\"KY\",\"LA\",\"ME\",\"MD\",\"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\"NC\",\"ND\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\"];\r\n    const stateAbbvTitleCaps = [\"Al\",\"Ak\",\"Az\",\"Ar\",\"Ca\",\"Co\",\"Ct\",\"De\",\"Dc\",\"Fl\",\"Hi\",\"Id\",\"Il\",\"In\",\"Ia\",\"Ks\",\"Ky\",\"La\",\"Me\",\"Md\",\"Ma\",\"Mi\",\"Mn\",\"Ms\",\"Mo\",\"Mt\",\"Ne\",\"Nv\",\"Nh\",\"Nj\",\"Nm\",\"Ny\",\"Nc\",\"Nd\",\"Oh\",\"Ok\",\"Or\",\"Pa\",\"Ri\",\"Sc\",\"Sd\",\"Tn\",\"Tx\",\"Ut\",\"Vt\",\"Va\",\"Wa\",\"Wv\",\"Wi\",\"Wy\"];\r\n    //console.log(stateFull.length); //stateAbbvTitleCaps is just for searching purposes\r\n\r\n    //split and grab the 2nd item in array, check to see if its a state name\r\n    let splitString = inputString.split(\",\");\r\n    \r\n    // sometimes there is an escape \\r, so regex it out so it can properly validate multi tag excel inputs\r\n    let lastIndex = splitString.length - 1;\r\n    splitString[lastIndex] = splitString[lastIndex].replace(/(\\r\\n|\\n|\\r)/gm, \"\");\r\n    //console.log(splitString);\r\n    \r\n    //get rid of the first character which is a space thanks to add comma spaces\r\n    //only if splitString[1] exists\r\n    let splicedString;\r\n    if(splitString.length === 2){\r\n        //\r\n        splicedString = splitString[1].slice(1);\r\n    };\r\n    \r\n    //if the comma isnt a thing, rearrange things so they are in data format can check for state abbrev\r\n    if(splitString.length === 1){ //\"park city utah\" no comma before state\r\n        //check the last word\r\n        splitString = splitString[0].split(\" \"); //[\"park\",\"city\",\"utah\"]\r\n\r\n        //temp save last\r\n        let tempPossibleState = splitString[splitString.length - 1];\r\n\r\n        //remove last\r\n        splitString.pop(); //[\"park\",\"city\"]\r\n        \r\n        //join all\r\n        let tempJoinString = [];\r\n        tempJoinString[0] = splitString.join(\" \"); //\"park city\"\r\n        \r\n        //now need to join the first parts and leave the last part like [\"park city\", \"utah\"]\r\n        tempJoinString.push(tempPossibleState);\r\n        splitString = tempJoinString;\r\n        //console.log(tempJoinString);\r\n\r\n        splicedString = splitString[1];\r\n    };\r\n\r\n    //console.log(splicedString);\r\n    \r\n    let stateSearch = stateFull.indexOf(splicedString); //-1 if no result, # of index if match\r\n    if(stateSearch !== -1){\r\n        //found match\r\n        return splitString[0] + \", \" + stateAbbv[stateSearch];\r\n    }else{\r\n        //no match found in the statefull\r\n\r\n        //start a new search for searching stateabbv for capitalization purposes\r\n        let innerStateSearch = stateAbbvTitleCaps.indexOf(splicedString);\r\n        if(innerStateSearch !== -1){\r\n            //found inner match\r\n            return splitString[0] + \", \" + stateAbbv[innerStateSearch];\r\n        }else{\r\n            //in 2 searches, found nothing\r\n            return inputString;\r\n        };\r\n    };\r\n};","module.exports = __webpack_public_path__ + \"static/media/excel5.c51897f4.png\";"],"sourceRoot":""}