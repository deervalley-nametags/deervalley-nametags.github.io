{"version":3,"sources":["js/CreateTagPage.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["CreateTagPage","thisColorCode","parseInt","useParams","id","history","useHistory","useState","name","color","secondLine","thirdLine","requestor","comments","quantity","submitArray","setSubmitArray","useEffect","setSubmitGrey","setStatusTextIndex","console","log","submitGrey","statusTextIndex","className","xs","to","md","lg","data","colorCode","placeholder","aria-label","onChange","e","validatedText","textValidation","target","value","priorSubmitObj","as","Prepend","Radio","defaultChecked","checked","oldSubmitArray","Append","Text","type","disabled","onClick","dbUtility","mode","writeData","then","statusBack","push","_toConsumableArray","arr","Array","isArray","i","arr2","length","iter","Symbol","iterator","Object","prototype","toString","call","from","TypeError"],"mappings":"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","file":"static/js/12.abd60773.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useHistory, NavLink, useParams } from \"react-router-dom\";\r\n\r\n//layout import\r\nimport { \r\n    Container, \r\n    Button,\r\n    Row,\r\n    Col,\r\n    InputGroup,\r\n    FormControl\r\n} from 'react-bootstrap';\r\nimport '../css/nav.css';\r\n\r\n//utility import\r\nimport CreatePreviewImage from './CreatePreviewImage.js';\r\nimport { textValidation } from './textValidation.js';\r\nimport { dbUtility } from './dbUtility.js';\r\n\r\n\r\n//start page\r\nconst CreateTagPage = () => {\r\n    //the number it grabs in the url is actually a string, so make it int\r\n    let thisColorCode = parseInt(useParams().id);\r\n    \r\n    //debug: this should be the colorCode in the url e.g. /create/3 so \"3\"\r\n    //console.log(thisColorCode);\r\n\r\n\r\n    //this is to be able to load status window when tag created\r\n    let history = useHistory();\r\n    \r\n\r\n    //set the submit array(same data format as multi tag) to default values\r\n    const[ submitArray, setSubmitArray ] = useState([{\r\n        name: \"\",\r\n        color: thisColorCode,\r\n        secondLine: \"\",\r\n        thirdLine: \"\",\r\n        requestor: \"\",\r\n        comments: \"\",\r\n        quantity: (thisColorCode === 1) ? \"2 PINS\" : \"2 MAGNETS\"\r\n    }]);\r\n\r\n\r\n    //submit button on request\r\n    const submitRequest = () => {\r\n        //check to make sure user hasn't done in-browser html magic to bypass disabled submit button\r\n        //an empty or invalid request\r\n        if(submitGrey === false){\r\n            //pass, as its unlikely to change a react page variable in browser unless superuser\r\n\r\n            //change status text to loading\r\n            setStatusTextIndex(3);\r\n\r\n            //db new entry\r\n            dbUtility({\r\n                mode: \"new_entry\",\r\n                writeData: submitArray\r\n            }).then(function(statusBack){\r\n                //console.log(statusBack)\r\n                //on success, navigate to /status\r\n                history.push(\"/status\");\r\n            });\r\n        }else{\r\n            //failed, this shouldn't happen though\r\n        };\r\n    }\r\n\r\n    /*\r\n    //debug: what is submitArray on update\r\n    useEffect(() => {\r\n        console.log(submitArray);\r\n    },[submitArray]);\r\n    */\r\n\r\n    //update the status text and disable/enable button\r\n    useEffect(() => {\r\n        //also update the submission status, e.g. you need X or Y to submit\r\n        //if empty string or 0\r\n        if(submitArray[0].name === \"\" && submitArray[0].requestor === \"\"){\r\n            //false due to name AND requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(0);\r\n        }else if(submitArray[0].name === \"\"){\r\n            //false only to name\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(2);\r\n        }else if(submitArray[0].requestor === \"\"){\r\n            //false only to requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(1);\r\n        }else if(submitArray[0].name !== \"\" && submitArray[0].requestor !== \"\"){\r\n            //true only if name AND requestor are not empty strings set from textValidation\r\n            setSubmitGrey(false);\r\n            setStatusTextIndex(4);\r\n        }else{\r\n            //some other condition\r\n            console.log(\"updateSubmitGrey() ran into some other condition on validation!\");\r\n        };\r\n\r\n    },[submitArray]);\r\n\r\n\r\n    //submit grey button text and status text\r\n    const[ submitGrey, setSubmitGrey ] = useState(true);\r\n    //for the status text, only the index of it changes, not the actual string [4] is empty string\r\n    const statusText = [\r\n        \"There must be a requestor, The Name on the tag must be at least 3 characters\",\r\n        \"There must be a requestor.\",\r\n        \"The Name on the tag must be at least 3 characters\",\r\n        \"Submitting...\",\r\n        \"\"\r\n    ];\r\n    const[ statusTextIndex, setStatusTextIndex ] = useState(0);\r\n\r\n\r\n    //setting layout sizes\r\n    const xsSize = 12;\r\n    const mdSize = 6;\r\n    //const lgSize = 6;\r\n\r\n    //return\r\n    return (\r\n        <Container>\r\n            <Row className=\"justify-content-between nav-h4-bar-bg\">\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    <NavLink to=\"/\">\r\n                        <Button>\r\n                            BACK\r\n                        </Button>\r\n                    </NavLink>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW TAG\r\n                    </h4>\r\n                </Col>\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    <NavLink to={\"/createmultiple/\" + thisColorCode }>\r\n                        <Button>\r\n                            NEED MULTIPLES?\r\n                        </Button>\r\n                    </NavLink>\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mt-3\">\r\n                <Col xs={xsSize} md={mdSize} lg={4} className=\"justify-content-center\">\r\n                    <Row>Preview: </Row>\r\n                    <Row>\r\n                        <CreatePreviewImage data={{ \r\n                            colorCode: thisColorCode, \r\n                            name: submitArray[0].name,\r\n                            secondLine: submitArray[0].secondLine,\r\n                            thirdLine: submitArray[0].thirdLine\r\n                        }} />\r\n                    </Row>\r\n                </Col>\r\n                <Col xs={xsSize} md={mdSize} lg={8}>\r\n                    <Row>\r\n                        <InputGroup className=\"mt-4\">\r\n                            <FormControl\r\n                                placeholder=\"Requestor (or: WHO to Mail it to)\"\r\n                                aria-label=\"Requestor\"\r\n                                onChange={ e => {\r\n                                    //text validate\r\n                                    let validatedText = textValidation(e.target.value, 3);\r\n\r\n                                    //only update if not false\r\n                                    if(validatedText !== 0){\r\n                                        //grab prior values except for changed element\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.requestor = validatedText;\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }else{\r\n                                        //otherwise just set it to empty string\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.requestor = \"\";\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </InputGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <FormControl\r\n                                placeholder=\"Name on tag\"\r\n                                aria-label=\"Name\"\r\n                                onChange={ e => {\r\n                                    //text validate\r\n                                    let validatedText = textValidation(e.target.value, 3);\r\n\r\n                                    //only update if not false\r\n                                    if(validatedText !== 0){\r\n                                        //grab prior values except for changed element\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.name = validatedText;\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }else{\r\n                                        //otherwise just set it to empty string\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.name = \"\";\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </InputGroup>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        placeholder=\"Title OR: City, ST\"\r\n                        aria-label=\"Second Line\"\r\n                        onChange={ e => {\r\n                            //text validate\r\n                            let validatedText = textValidation(e.target.value);\r\n\r\n                            //grab prior values except for changed element\r\n                            let priorSubmitObj = submitArray[0];\r\n                            priorSubmitObj.secondLine = validatedText;\r\n                            setSubmitArray([priorSubmitObj]);\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        placeholder=\"Third Line(if applicable)\"\r\n                        aria-label=\"Third Line\"\r\n                        onChange={ e => {\r\n                            //text validate\r\n                            let validatedText = textValidation(e.target.value);\r\n\r\n                            //grab prior values except for changed element\r\n                            let priorSubmitObj = submitArray[0];\r\n                            priorSubmitObj.thirdLine = validatedText;\r\n                            setSubmitArray([priorSubmitObj]);\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        as=\"textarea\"\r\n                        placeholder=\"Comments\"\r\n                        aria-label=\"Comments\"\r\n                        onChange={ e => {\r\n                            //text validate\r\n                            let validatedText = textValidation(e.target.value);\r\n\r\n                            //grab prior values except for changed element\r\n                            let priorSubmitObj = submitArray[0];\r\n                            priorSubmitObj.comments = validatedText;\r\n                            setSubmitArray([priorSubmitObj]);\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            {\r\n                (thisColorCode === 1 || thisColorCode === 2 || thisColorCode === 3) &&\r\n                <Row className=\"justify-content-between pinmag-row mt-3\">\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN\" \r\n                                        defaultChecked={ (thisColorCode === 1) ? true : false }\r\n                                        onChange={e => {\r\n                                            //if checked is true\r\n                                            if(e.target.checked){\r\n                                                //set value accordingly\r\n                                                let oldSubmitArray = submitArray;\r\n                                                oldSubmitArray[0].quantity = \"2 PINS\";\r\n                                                setSubmitArray([...oldSubmitArray]);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>2 PINS</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN\" \r\n                                        defaultChecked={ (thisColorCode !== 1) ? true : false }\r\n                                        onChange={e => {\r\n                                            //if checked is true\r\n                                            if(e.target.checked){\r\n                                                //set value accordingly\r\n                                                let oldSubmitArray = submitArray;\r\n                                                oldSubmitArray[0].quantity = \"2 MAGNETS\";\r\n                                                setSubmitArray([...oldSubmitArray]);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>2 MAGNETS</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN and MAG\" \r\n                                        onChange={e => {\r\n                                            //if checked is true\r\n                                            if(e.target.checked){\r\n                                                //set value accordingly\r\n                                                let oldSubmitArray = submitArray;\r\n                                                oldSubmitArray[0].quantity = \"1 PIN + 1 MAGNET\";\r\n                                                setSubmitArray([...oldSubmitArray]);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>1 PIN + 1 MAGNET</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            <Row className=\"mt-3 justify-content-end\">\r\n                <Col xs={xsSize} md={mdSize} lg=\"auto\">\r\n                    <p className=\"mt-2\">{ statusText[statusTextIndex] }</p>\r\n                </Col>\r\n                <Col xs={xsSize} md={mdSize} lg=\"auto\">\r\n                    <Button type=\"submit\" disabled={ submitGrey } onClick={ submitRequest }>Submit Request</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\n  \r\n  export default CreateTagPage;","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}"],"sourceRoot":""}