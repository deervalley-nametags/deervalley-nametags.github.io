{"version":3,"sources":["../../../src/Print.jsx","js/PrintOutdoorTag.js","js/AdminPage.js","js/CreatePreviewImage.js","../node_modules/warning/warning.js","../node_modules/react-bootstrap/esm/InputGroup.js","../node_modules/react-bootstrap/esm/Feedback.js","../node_modules/react-bootstrap/esm/FormContext.js","../node_modules/react-bootstrap/esm/FormControl.js","js/StatusPage.js"],"names":["PropTypes","contextTypes","PrintProvider","Print","printOffsetLeft","printOffsetTop","this","props","debug","isSingle","main","context","printProvider","regPrintable","window","bodyRect","document","elem","elemRect","unregPrintable","children","single","exclusive","printOnly","main_","s","excl_","isPrint","offset_","marginTop","marginLeft","className","globalClassName","ref","style","React","Component","PrintOutdoorTag","useEffect","idString","index","printString","thirdLine","name","secondLine","Container","Button","onClick","frames","focus","print","close","id","title","srcDoc","AdminPage","useState","latestVersion","setLatestVersion","localVersion","localStorage","getItem","parseInt","console","log","location","reload","setItem","dbUtility","mode","then","appVersion","adminLabel","setAdminLabel","goodJobTag","setGoodJobTag","data","color","comments","requestor","datefinished","daterequest","reqDaysAgo","height","width","attachment","thickness","signColor","dataRowAdmin","setDataRowAdmin","adminTodoTableData","setAdminTodoTableData","adminDisplay","setAdminDisplay","copiedClipboardIndex","setCopiedClipboardIndex","inputRef","useRef","adminPassValue","setAdminPassValue","tryLogin","event","key","authUser","authPass","resolutionState","catch","error","msg","current","statusTags","addEventListener","getSelection","removeAllRanges","dataByColor","forEach","item","adminTodoCode","thirdline","colorCode","adminTodoCodeIndex","findIndex","obj","push","titlecity","signcolor","signQuantity","signquantity","length","Row","Col","xs","to","InputGroup","FormControl","placeholder","type","aria-label","aria-describedby","onChange","e","preValue","target","value","onKeyPress","Spinner","variant","animation","role","map","mapItem","node","querySelector","range","createRange","selectNodeContents","select","addRange","execCommand","copyToClipboard","lg","CreatePreviewImage","slice","md","reformattedData","docIdArray","mapItemChild","colSpan","childIndex","StatusPage","adminMode","version","adminIncrementVersion","pixelHeight","pixelWidth","tagType","bg","img","defName","defSecond","quantity","colorCodeToClass","splitClasses","newLineContents","split","toLowerCase","parseFloat","textAlign","margin","display","flexDirection","warning","module","exports","forwardRef","_ref","bsPrefix","size","_ref$as","as","_objectWithoutPropertiesLoose","useBootstrapPrefix","createElement","_extends","classNames","InputGroupAppend","createWithBsPrefix","InputGroupPrepend","InputGroupText","displayName","Text","Radio","Checkbox","Append","Prepend","propTypes","string","isRequired","elementType","Feedback","defaultProps","FormContext","createContext","controlId","undefined","classes","_classes","isValid","isInvalid","plaintext","readOnly","useContext","_classes2","_classes3","lazy","renderLoader","grabStatus","dateFinished","returnObj","text","class","finDaysAgo","Date","now","Math","round","dataRow","setDataRow","showPage","setShowPage","tagsAreDone","setTagsAreDone","searchValue","setSearchValue","adminPadding","setAdminPadding","h4Title","setH4Title","searchBarPlaceholder","setSearchBarPlaceholder","tagsNeedUpdate","searchForString","returnResult","thisSearchValue","disabled","tempIdArray","fallback","requestTimestamp","floor","grabDaysAgo"],"mappings":"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","file":"static/js/6.9a2119b6.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PrintProvider from './PrintProvider';\nimport { debug } from './common';\nimport s from './Print.css';\n\nconst propTypes = {\n  name: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  main: PropTypes.bool,\n  single: PropTypes.bool,\n  exclusive: PropTypes.bool,\n  printOnly: PropTypes.bool\n};\nconst contextTypes = PrintProvider.childContextTypes;\n\nexport default class Print extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      printOffsetLeft: 0,\n      printOffsetTop: 0\n    };\n  }\n  componentDidMount() {\n\n    if (this.props.name) {\n      debug('init printable', this.props.name);\n      const isSingle = (this.props.main || this.props.single);\n      this.context.printProvider && this.context.printProvider.regPrintable(this.props.name, <Print {...this.props} />, isSingle);\n    }\n\n    if (this.props.main || this.props.single) {\n\n      window.matchMedia('print').onchange = () => {\n        const isPrint = window.matchMedia('print').matches;\n\n        if(isPrint){\n          const bodyRect = document.body.getBoundingClientRect();\n          const elem = this.printElement;\n          const elemRect = elem && elem.getBoundingClientRect();\n          const printOffsetLeft = elemRect && (elemRect.left - bodyRect.left);\n          const printOffsetTop = elemRect && (elemRect.top - bodyRect.top);\n\n          this.setState({\n            printOffsetTop,\n            printOffsetLeft,\n          });\n        }else{\n          this.setState({\n            printOffsetTop: 0,\n            printOffsetLeft: 0\n          })\n        }\n      };\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.name) {\n      debug('remove printable', this.props.name);\n      const isSingle = (this.props.main || this.props.single);\n      this.context.printProvider && this.context.printProvider.unregPrintable(this.props.name, isSingle);\n    }\n\n    if (this.props.main || this.props.single) {\n      window.matchMedia('print').onchange = null;\n    }\n  }\n\n  render() {\n\n    const { children, main, single, exclusive, printOnly } = this.props;\n    const { printOffsetLeft, printOffsetTop } = this.state;\n    const main_ = (main || single) ? s._main : '';\n    const excl_ = (exclusive || printOnly) ? s._exclusive : '';\n    const isPrint = window.matchMedia('print').matches;\n    const offset_ = ((printOffsetTop || printOffsetLeft ) && main_ && isPrint) ? { marginTop: -printOffsetTop, marginLeft: -printOffsetLeft} : {};\n    const globalClassName = 'react-easy-print-print'; // using in hiddenAll\n    const className = `${globalClassName} ${s.root} ${main_} ${excl_}`;\n    return <div ref={ (el) => this.printElement = el } style={offset_} className={className}>{children}</div>;\n  }\n}\nPrint.propTypes = propTypes;\nPrint.contextTypes = contextTypes;\n","import React, { useEffect } from 'react';\r\nimport { \r\n    Container,\r\n    Button\r\n} from 'react-bootstrap';\r\nimport '../css/print.css';\r\nimport { Print } from 'react-easy-print';\r\n\r\n\r\n\r\nfunction PrintOutdoorTag(props){\r\n    useEffect(() => {\r\n        // debug: what is passed in as props\r\n        // console.log(props.props);\r\n        // console.log(props.index);\r\n    },[props.props]);\r\n\r\n    // combine id string\r\n    let idString = \"printframe\" + props.index;\r\n    \r\n    let printString = \"\";\r\n    // compile the final printing string, depending on third line existence\r\n    if(props.props.thirdLine === \"\"){\r\n        // empty string means two line\r\n        printString = \"<div style='text-align:center;'>\" +\r\n            \"<p style='font-size:38px;font-family:calibri;margin-bottom:0px;margin-top:35px;'>\" + props.props.name + \"</p>\" +\r\n            \"<p style='font-size:38px;font-family:calibri;margin-bottom:0px;margin-top:20px;'>\" + props.props.secondLine + \"</p>\" +\r\n        \"</div>\";\r\n    }else{\r\n        // anything else means third line\r\n        printString = \"<div style='text-align:center;'>\" +\r\n            \"<p style='font-size:30px;font-family:calibri;margin-bottom:0px;margin-top:30px;'>\" + props.props.name + \"</p>\" +\r\n            \"<p style='font-size:30px;font-family:calibri;margin-bottom:0px;margin-top:10px;'>\" + props.props.secondLine + \"</p>\" +\r\n            \"<p style='font-size:30px;font-family:calibri;margin-bottom:0px;margin-top:10px;'>\" + props.props.thirdLine + \"</p>\" +\r\n        \"</div>\";\r\n    }\r\n    \r\n\r\n    const tryPrint = () => {\r\n        window.frames[idString].focus();\r\n        window.frames[idString].print();\r\n        window.frames[idString].close();\r\n    };\r\n\r\n    return(\r\n        <Container>\r\n            <Button onClick={ tryPrint }>\r\n                PRINT\r\n            </Button>\r\n            <Print single name=\"print-class\">\r\n                <iframe id={ idString } title={ idString } name={ idString } srcDoc={ printString }>\r\n\r\n                </iframe>\r\n            </Print>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default PrintOutdoorTag;","import React, { \r\n    useState, \r\n    useRef, \r\n    useEffect\r\n} from 'react';\r\nimport { \r\n    Container, \r\n    Button,\r\n    Row,\r\n    Col,\r\n    FormControl,\r\n    InputGroup,\r\n    Spinner\r\n} from 'react-bootstrap';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport '../css/nav.css';\r\nimport '../css/admin.css';\r\nimport { dbUtility } from './dbUtility.js';\r\nimport CreatePreviewImage from './CreatePreviewImage.js';\r\nimport StatusPage from './StatusPage.js';\r\nimport PrintOutdoorTag from './PrintOutdoorTag.js';\r\n\r\n\r\nfunction copyToClipboard(id){\r\n    // this will copy to clipboard the id e.g. \"#admin-table-1\"\r\n\r\n    // convert to vanilla querySelector node\r\n    let node = document.querySelector(id);\r\n\r\n    // do range stuff, select\r\n    let range  =  document.createRange();\r\n    range.selectNodeContents(node);\r\n    let select =  window.getSelection();\r\n    select.removeAllRanges();\r\n    select.addRange(range);\r\n\r\n    // finally copy\r\n    document.execCommand('copy');\r\n\r\n    // add unselect here if wanted, but it helps to keep it selected\r\n    // window.getSelection().removeAllRanges();\r\n}\r\n\r\n\r\nfunction AdminPage() {\r\n    // ---------- VERSION CONTROL ----------\r\n    const[latestVersion, setLatestVersion] = useState(-1);\r\n    useEffect(() => {\r\n        // database came back with version\r\n\r\n        // grab localStorage\r\n        let localVersion = localStorage.getItem(\"version\");\r\n        localVersion = parseInt(localVersion);\r\n        if((localVersion !== latestVersion) && (latestVersion !== -1)){\r\n            console.log(\"wrong local version: \" + localVersion + \" of latest: \" + latestVersion);\r\n            // if versions don't match(and it isn't the initial state of -1), force refresh\r\n            window.location.reload(true);\r\n            \r\n            // update local\r\n            localStorage.setItem(\"version\", latestVersion);\r\n        }else if(localVersion === latestVersion){\r\n            console.log(\"running latest version\");\r\n        };\r\n    },[latestVersion]);\r\n\r\n    // grab appversion from \"appVersion\" tag in database\r\n    dbUtility({\r\n        mode: \"get_app_version\"\r\n    }).then((appVersion) => {\r\n        appVersion = parseInt(appVersion);\r\n        setLatestVersion(appVersion);\r\n    });\r\n    //console.log(\"version check\");\r\n\r\n\r\n\r\n    // admin title label\r\n    const[adminLabel, setAdminLabel] = useState(\"ADMIN LOGIN\");\r\n\r\n    // show or hide an 'all tags are done good job' tag\r\n    const[goodJobTag, setGoodJobTag] = useState(false);\r\n\r\n    // tag rows of data, these MUST be filled with the data type or else it will freak out\r\n    const[dataRowAdmin, setDataRowAdmin] = useState([{\r\n        id: 0,\r\n        data: {\r\n            color: \"\",\r\n            comments: \"\",\r\n            requestor: \"\",\r\n            datefinished: 0,\r\n            daterequest: 0,\r\n            reqDaysAgo: 0,\r\n            height: 1,\r\n            width: 1,\r\n            attachment: \"\",\r\n            thickness: \"\",\r\n            signColor: \"\"\r\n        }\r\n    }]);\r\n\r\n    \r\n    // rearrange rowData into dataByColor so we know what to show, and what to push where\r\n    // for some reason, using useState here screws the pooch, so do all the data processing in dataByColor,\r\n    // then at the very end update adminTodoTableData\r\n    const[adminTodoTableData, setAdminTodoTableData] = useState([]);\r\n\r\n    // admin function show/hide, true/false\r\n    const[adminDisplay, setAdminDisplay] = useState(false);\r\n\r\n    // which \"copied to clipboard\" index should it be displayed on\r\n    const[copiedClipboardIndex, setCopiedClipboardIndex] = useState(-1);\r\n\r\n    // this is used to focus on the input\r\n    const inputRef = useRef(null);\r\n\r\n    // pass value\r\n    const[adminPassValue, setAdminPassValue] = useState(\"\");\r\n\r\n\r\n    // on enter or submit, try to auth\r\n    const tryLogin = (event) => {\r\n        // first see if enter key\r\n        // submit button will pass \"enter\" to pass this\r\n        if(event.key === 'Enter' || event === \"Button\"){\r\n            // debug: what was entered\r\n            // console.log(adminPassValue);\r\n\r\n            // dbUtility auth\r\n            dbUtility({\r\n                mode: \"auth\",\r\n                authUser: \"emeqiss@deervalley.com\",\r\n                authPass: adminPassValue\r\n            }).then( resolutionState => {\r\n                // debug: proper admin auth\r\n                // console.log(resolutionState);\r\n\r\n                // switch panel views\r\n                setAdminDisplay(true);\r\n\r\n                // set the admin label\r\n                setAdminLabel(\"ADMIN CENTER\");\r\n\r\n            }).catch( error => {\r\n                // catch error and set title to the error message that traces from the tryLogin at dbUtility\r\n                // console.log(error);\r\n                setAdminLabel(error.msg);\r\n            });\r\n        };\r\n    };\r\n\r\n    // on mount\r\n    useEffect(() => {\r\n        // focus on the admin pass input\r\n        inputRef.current.focus();\r\n\r\n        // grab all the unfinished tags using dbUtility promise\r\n        dbUtility({\r\n            mode: \"read_all\"\r\n        })\r\n        .then((statusTags) => {\r\n            // debug: this is what the promise resolved from in dbUtility()\r\n            // console.log(statusTags);\r\n\r\n            // setDataRowAdmin to the value of the db read\r\n            // a console.log here will NOT work!\r\n            setDataRowAdmin(statusTags);\r\n\r\n            // escape to unfocus\r\n            document.addEventListener('keydown', function(event) {\r\n                // console.log(event.key);\r\n                if(event.key === \"Escape\"){\r\n                    // escape pressed, reset copied clip index\r\n                    setCopiedClipboardIndex(-1);\r\n\r\n                    // unselect\r\n                    window.getSelection().removeAllRanges();\r\n                };\r\n            });\r\n        });\r\n    }, []);\r\n\r\n    // when dataRowAdmin updates\r\n    // rearrange it by color\r\n    useEffect(() => {\r\n        /*\r\n        dataByColor format:\r\n        [{\r\n            adminTodoCode: x,\r\n            name: \"2 LINE\",\r\n            data: [{\r\n                id: \"zBcs54S\",\r\n                name: \"\",\r\n                secondLine: \"\",\r\n                (thirdLine: \"\",)\r\n                comments: \"\"\r\n            },{},{},etc]\r\n        },{},{},etc]\r\n        */\r\n        let dataByColor = [];\r\n       \r\n        dataRowAdmin.forEach((item, index) => {\r\n            // console.log(item);\r\n            // item is straight from the db, e.g. item.id, or item.data.comments\r\n            // adminTodoCode has the data format as a string: \"<colorCode>-<number of lines>\"\r\n            let adminTodoCode;\r\n            \r\n            // check if 2 or 3 line, create the item's adminTodoCode \r\n            if(item.data.thirdline === \"\"){\r\n                // empty string means 2 line\r\n                adminTodoCode = \"2-\" + item.data.color;\r\n            }else if(item.data.colorCode === 11){\r\n                // check here if its a ski tag, color code 11\r\n                adminTodoCode = \"1-\" + item.data.color;\r\n            }else{\r\n                // anything else means 3 line\r\n                adminTodoCode = \"3-\" + item.data.color;\r\n            }\r\n            // console.log(adminTodoCode);\r\n            \r\n            // check to see if the colorCode exists yet in dataByColor\r\n            let adminTodoCodeIndex = dataByColor.findIndex(obj => obj.adminTodoCode === adminTodoCode);\r\n            // console.log(adminTodoCodeIndex);\r\n            \r\n            if(adminTodoCodeIndex === -1){\r\n                // did not find prior existing, so add it\r\n\r\n                // if empty string, continue, who knows why it comes back with an empty string\r\n                if(item.data.color === \"\"){\r\n                    return;\r\n                }\r\n                \r\n                dataByColor.push({\r\n                    adminTodoCode: adminTodoCode,\r\n                    data: []\r\n                });\r\n\r\n            }\r\n            // grab the index which has the admin todo code we need to modify\r\n            adminTodoCodeIndex = dataByColor.findIndex(obj => obj.adminTodoCode === adminTodoCode);\r\n            \r\n            // grab the index, go to data array, then push new item into it\r\n            dataByColor[adminTodoCodeIndex].data.push({\r\n                id: item.id,\r\n                name: item.data.name,\r\n                secondLine: item.data.titlecity,\r\n                thirdLine: item.data.thirdline,\r\n                comments: item.data.comments,\r\n                requestor: item.data.requestor,\r\n                thickness: item.data.thickness,\r\n                height: item.data.height,\r\n                width: item.data.width,\r\n                attachment: item.data.attachment,\r\n                signColor: item.data.signcolor,\r\n                signQuantity: item.data.signquantity\r\n\r\n            });\r\n        });\r\n\r\n        // console.log(dataByColor);\r\n\r\n        // check to see if there are no tags still\r\n        if(dataRowAdmin.length === 0){\r\n            // update good job tag\r\n            setGoodJobTag(true);\r\n        }\r\n\r\n        // after all of that, set adminTodoTableData to reflect the changes\r\n        setAdminTodoTableData(dataByColor);\r\n    },[dataRowAdmin]);\r\n\r\n    const adminIncrementVersion = (event) => {\r\n        if(event.key === 'Enter'){\r\n            let value = event.target.value;\r\n            console.log(value);\r\n\r\n            dbUtility({\r\n                mode: \"set_app_version\",\r\n                version: value\r\n            }).then(function(){\r\n                setLatestVersion(value);\r\n            });\r\n        };\r\n    };\r\n\r\n    // return\r\n    return (\r\n        <Container className=\"p-0\">\r\n            <Row className=\"justify-content-between nav-h4-bar-bg mx-0\">\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    <NavLink to=\"/\">\r\n                        <Button>\r\n                            HOME\r\n                        </Button>\r\n                    </NavLink>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        { adminLabel }\r\n                    </h4>\r\n                </Col>\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    <NavLink to=\"/status\">\r\n                        <Button>\r\n                            STATUS\r\n                        </Button>\r\n                    </NavLink>\r\n                </Col>\r\n            </Row>\r\n            {\r\n                !adminDisplay &&\r\n                <Row className=\"mt-2 mx-0\">\r\n                    <Col xs={ 10 } className=\"pl-0 pr-2\">\r\n                        <InputGroup>\r\n                            <FormControl\r\n                                ref={ inputRef }\r\n                                placeholder=\"Password\"\r\n                                type=\"password\"\r\n                                aria-label=\"Password\"\r\n                                aria-describedby=\"basic-addon1\"\r\n                                onChange={ (e) => {\r\n                                    // grab value\r\n                                    let preValue = e.target.value;\r\n\r\n                                    // on change, reupdate admin pass value\r\n                                    setAdminPassValue( preValue );\r\n                                }}\r\n                                onKeyPress={ (e) => tryLogin(e) }\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col xs={ 2 } className=\"px-0 align-right\">\r\n                        <Button id=\"submit-admin\" onClick={ () => tryLogin(\"Button\") }>\r\n                            Submit\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            {\r\n                // debug: change to !adminDisplay && for no-login testing, adminDisplay && for final\r\n                adminDisplay &&\r\n                <Container className=\"mt-2 mb-5 pb-4 px-4 admin-top-section\">\r\n                    <Row className=\"justify-content-center mt-1\">\r\n                        <h5 className=\"grey-text\">The Following Tags Need to be Completed:</h5>\r\n                    </Row>\r\n                    {\r\n                        (adminTodoTableData.length === 0 && !goodJobTag) &&\r\n                        <Spinner variant=\"danger\" animation=\"border\" role=\"status\">\r\n                            <span className=\"sr-only\">\r\n                                Loading...\r\n                            </span>\r\n                        </Spinner>\r\n                    }\r\n                    {\r\n                        goodJobTag &&\r\n                        <Row className=\"justify-content-center\">\r\n                            <p className=\"green-text\">All tags are completed. Good job, you!</p>\r\n                        </Row>\r\n                    }\r\n                    {\r\n                        adminTodoTableData.map((mapItem, index) => \r\n                            <Row className=\"admin-todo-item mt-2 py-3\" key={ index } onClick={ () => {\r\n                                // console.log(mapItem.adminTodoCode);\r\n                                // on click, grab index and change copiedClipboardIndex\r\n                                setCopiedClipboardIndex(index);\r\n\r\n                                // copy clipboard with id, e.g. table-data-0 for index 0\r\n                                copyToClipboard(\"#table-data-\" + index);\r\n                            }}>\r\n                                <Col xs={ 12 } lg={ 4 } className=\"px-0\">\r\n                                    <Row>\r\n                                        {\r\n                                            (mapItem.adminTodoCode[3] !== \"1\" && mapItem.adminTodoCode[2] !== \"5\") &&\r\n                                            <Col>\r\n                                                <CreatePreviewImage data={{ \r\n                                                    colorCode: parseInt(mapItem.adminTodoCode.slice(2)),\r\n                                                    name: parseInt(mapItem.adminTodoCode[0]) === 2 ? \"2 LINE\" : \"3 LINE\"\r\n                                                }} />\r\n                                            </Col>\r\n                                        }\r\n                                        {\r\n                                            (mapItem.adminTodoCode[3] === \"1\") &&\r\n                                            <Col>\r\n                                                <CreatePreviewImage data={{ \r\n                                                    colorCode: parseInt(mapItem.adminTodoCode.slice(2)),\r\n                                                    name: \"SKI / BASKET TAG\"\r\n                                                }} />\r\n                                            </Col>\r\n                                        }\r\n                                    </Row>\r\n                                    {\r\n                                        (copiedClipboardIndex === index ? true : false) &&\r\n                                        <Row>\r\n                                            <Col md={ 5 } className=\"ml-2 red-text\">\r\n                                                Copied to Clipboard! ESC to unselect\r\n                                            </Col>\r\n                                            <Col md={ 5 } className=\"text-center\">\r\n                                                <p className=\"my-0\">MARK THESE AS DONE:</p>\r\n                                                <Button onClick={ () => {\r\n                                                    // debug: what index of dataByColor was clicked?\r\n                                                    // console.log(index);\r\n\r\n                                                    // need to remap data from adminTodoTableData[index].data{ id: \"\" }\r\n                                                    // to [\"id\",\"id\",\"id\"]\r\n                                                    let reformattedData = [];\r\n                                                    // console.log(adminTodoTableData[index].data);\r\n                                                    adminTodoTableData[index].data.forEach((item) => {\r\n                                                        reformattedData.push(item.id);\r\n                                                    });\r\n\r\n                                                    // console.log(reformattedData);\r\n                                                    // send to dbUtility\r\n                                                    dbUtility({\r\n                                                        mode: \"update_entry\",\r\n                                                        type: \"done\",\r\n                                                        docIdArray: reformattedData\r\n                                                    }).then(() => {\r\n                                                        // here we need to re-set the dataRowAdmin\r\n                                                        // grab all the unfinished tags using dbUtility promise\r\n                                                        dbUtility({\r\n                                                            mode: \"read_all\"\r\n                                                        })\r\n                                                        .then((statusTags) => {\r\n                                                            // debug: this is what the promise resolved from in dbUtility()\r\n                                                            // console.log(statusTags);\r\n\r\n                                                            // setDataRowAdmin to the value of the db read\r\n                                                            // a console.log here will NOT work!\r\n                                                            setDataRowAdmin(statusTags);\r\n\r\n                                                            // set copy clipboard index back to nothing\r\n                                                            setCopiedClipboardIndex(-1);\r\n                                                        });\r\n                                                    });\r\n                                                }}>&#10004;</Button>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    }\r\n                                </Col>\r\n                                <Col xs={ 6 } lg={ 4 } className=\"px-0\">\r\n                                    <table className=\"admin-table\" id={ \"table-data-\" + index }>\r\n                                        {\r\n                                            (mapItem.adminTodoCode[2] !== \"4\" && mapItem.adminTodoCode[3] !== \"1\" && mapItem.adminTodoCode[2] !== \"5\") &&\r\n                                            mapItem.data.map((mapItemChild, index) => \r\n                                                <tbody key={ mapItemChild.id }>\r\n                                                    <tr>\r\n                                                        <td className=\"admin-table-td\">{ mapItemChild.name }</td>\r\n                                                        <td className=\"admin-table-td\">{ mapItemChild.secondLine }</td>\r\n                                                        {\r\n                                                            !(mapItemChild.thirdLine === \"\") &&\r\n                                                            <td className=\"admin-table-td\">{ mapItemChild.thirdLine }</td>\r\n                                                        }\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td className=\"admin-table-td\">{ mapItemChild.name }</td>\r\n                                                        <td className=\"admin-table-td\">{ mapItemChild.secondLine }</td>\r\n                                                        {\r\n                                                            !(mapItemChild.thirdLine === \"\") &&\r\n                                                            <td className=\"admin-table-td\">{ mapItemChild.thirdLine }</td>\r\n                                                        }\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            )\r\n                                        }\r\n                                        {\r\n                                            (mapItem.adminTodoCode[2] === \"4\" || mapItem.adminTodoCode[3] === \"1\") &&\r\n                                            mapItem.data.map((mapItemChild, index) => \r\n                                                <tbody key={ mapItemChild.id }>\r\n                                                    <tr>\r\n                                                        <td className=\"admin-table-td-double\">{ mapItemChild.name }</td>\r\n                                                        {\r\n                                                            !(mapItem.adminTodoCode[3] === \"1\") &&\r\n                                                            <td className=\"admin-table-td-double\">{ mapItemChild.secondLine }</td>\r\n                                                        }\r\n                                                        {\r\n                                                            !(mapItemChild.thirdLine === \"\") &&\r\n                                                            <td className=\"admin-table-td\">{ mapItemChild.thirdLine }</td>\r\n                                                        }\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            )\r\n                                        }\r\n                                        {\r\n                                            (mapItem.adminTodoCode[2] === \"5\") &&\r\n                                            mapItem.data.map((mapItemChild, index) => \r\n                                                <tbody key={ mapItemChild.id }>\r\n                                                    <tr>\r\n                                                        <td colSpan={ 4 } className=\"admin-table-td-double\">\r\n                                                            <CreatePreviewImage data={{ \r\n                                                                colorCode: 5,\r\n                                                                name: mapItemChild.name,\r\n                                                                signColor: mapItemChild.signColor,\r\n                                                                width: mapItemChild.width,\r\n                                                                height: mapItemChild.height\r\n                                                            }} />\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td className=\"admin-table-td-double\">Thickness: { mapItemChild.thickness }</td>\r\n                                                        <td className=\"admin-table-td-double\">Attachment: { mapItemChild.attachment }</td>\r\n                                                        <td className=\"admin-table-td-double\">Height: { mapItemChild.height }\"</td>\r\n                                                        <td className=\"admin-table-td-double\">Width: { mapItemChild.width }\"</td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            )\r\n                                        }\r\n                                    </table >\r\n                                </Col>\r\n                                <Col xs={ 6 } lg={ 4 } className=\"pr-0\">\r\n                                    <table className=\"admin-table\">\r\n                                        {\r\n                                            mapItem.data.map((mapItemChild, childIndex) => \r\n                                                <tbody key={ mapItemChild.id }>\r\n                                                    <tr>\r\n                                                        {\r\n                                                            (mapItem.adminTodoCode[2] === \"4\") &&\r\n                                                            <td className=\"admin-table-td-double\">\r\n                                                                <PrintOutdoorTag props={ mapItemChild } index={ index } />\r\n                                                            </td>\r\n                                                        }\r\n                                                        <td className=\"admin-table-td-double\">{ \"Requestor: \" + mapItemChild.requestor }</td>\r\n                                                        <td className=\"admin-table-td-double\">{ \"Comments: \" + mapItemChild.comments }</td>\r\n                                                    </tr>\r\n                                                    {\r\n                                                        (mapItem.adminTodoCode[2] === \"5\") &&\r\n                                                        <tr>\r\n                                                            <td className=\"admin-table-td-double\">Quantity: { mapItemChild.signQuantity }</td>\r\n                                                            <td className=\"admin-table-td-double\">Color: { mapItemChild.signColor }</td>\r\n                                                    </tr>\r\n                                                    }\r\n                                                </tbody>\r\n                                            )\r\n                                        }\r\n                                    </table>\r\n                                </Col>\r\n                            </Row>\r\n                        )\r\n                    }\r\n                </Container>\r\n            }\r\n            {\r\n                adminDisplay &&\r\n                <Container className=\"mx-0 pb-3 px-4 pt-3 admin-bottom-section\">\r\n                    <StatusPage adminMode={ true } dataRowAdmin={ dataRowAdmin } setDataRowAdmin={ setDataRowAdmin } />\r\n                </Container>\r\n            }\r\n            {\r\n                !adminDisplay &&\r\n                <Container className=\"mt-2 mb-0 ml-2 pl-4 pb-0 pt-1\">\r\n                    <Row>\r\n                    <Col xs=\"auto\" className=\"mt-2 mr-3 p-0\">\r\n                        <p>Current Version: { latestVersion }</p>\r\n                    </Col>\r\n                        <Col xs=\"auto\" className=\"p-0\">\r\n                            <InputGroup>\r\n                                <FormControl\r\n                                    placeholder=\"App Version Write-Over\"\r\n                                    type=\"number\"\r\n                                    aria-label=\"number\"\r\n                                    aria-describedby=\"basic-addon1\"\r\n                                    onKeyPress={ (e) => adminIncrementVersion(e) }\r\n                                />\r\n                            </InputGroup>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            }\r\n        </Container>\r\n    );\r\n  }\r\n  \r\n  export default AdminPage;","import React from 'react';\r\nimport { \r\n    Col,\r\n    Row,\r\n    Container\r\n} from 'react-bootstrap';\r\nimport '../css/tags.css';\r\nimport '../css/signcolor.css';\r\n\r\nfunction colorCodeToClass(colorCode){\r\n    /*\r\n    tagType obj are the classes to apply and default texts on each\r\n    bg background class, \r\n    img is the deer head logo, null-space is the default class that deletes the class\r\n    in the event that there is no deer head\r\n    defName: default Name placeholder\r\n    defSecond: default second line text placeholder\r\n    quantity: the default quantity for each tag type(unchangeable, only for info purposes)\r\n    -\r\n    see CreateSignColor for tag id list\r\n    */\r\n    let tagType = {\r\n        bg: \"\",\r\n        img: \"null-space\",\r\n        defName: \"Name\",\r\n        defSecond: \"City, ST\",\r\n        quantity: \"x2\"\r\n    };\r\n\r\n    // translate color code to image type using classes\r\n    if(colorCode === 1){\r\n                \r\n        // 1: green pin no deerhead(normal nametag and default selection)\r\n        tagType.bg = \"tag-green\";\r\n    }else if(colorCode === 2){\r\n\r\n        // 2: green magnet deerhead\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n    }else if(colorCode === 3){\r\n\r\n        // 3: bronze magnet engraved deerhead\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvblack-img\";\r\n    }else if(colorCode === 4){\r\n\r\n        // 4: outdoor tags\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.img = \"dvwhite-img\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 5){\r\n\r\n        // 5: sign, add details in comments\r\n        tagType.bg = \"tag-sign\";\r\n        tagType.defName = \"Sign\";\r\n        tagType.defSecond = \"Put details in the comments\";\r\n        tagType.quantity = \"\";\r\n    }else if(colorCode === 7){\r\n\r\n        // 7: repeat 1 but with title instead of city, st\r\n        tagType.bg = \"tag-green\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 8){\r\n\r\n        // 8: repeat 2 but with title instead of city, st\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 9){\r\n\r\n        // 9: repeat 3 but with title instead of city, st\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvwhite-img\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 10){\r\n\r\n        // 10: repeat 4 but with title instead of city, st\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.defSecond = \"Title\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 11){\r\n\r\n        // 11: basket check tag\r\n        tagType.bg = \"tag-basket\";\r\n        tagType.defName = \"<p style='font-size:60px;position:relative;top:-20%;'>&#8226;</p>\";\r\n        tagType.defSecond = \"<p style='font-size:19px;position:relative;bottom:30%;'>Basket Check</p>\";\r\n        tagType.quantity = \"\";\r\n    }else if(colorCode === 12){\r\n\r\n        // 12: outdoor tag for ski patrol\r\n        tagType.bg = \"tag-patrol\";\r\n        tagType.img = \"dvpatrol-img\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 13){\r\n\r\n        // 13: old outdoor tags that fit inside old mtn ops uniforms\r\n        tagType.bg = \"tag-oldoutdoor\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 14){\r\n\r\n        // 14: black diamond tags\r\n        tagType.bg = \"tag-blackdiamond\";\r\n        tagType.img = \"dvblackdiamond-img\";\r\n        tagType.quantity = \"x2\";\r\n    }else if(colorCode === 15){\r\n\r\n        // 15: regular black indoor\r\n        tagType.bg = \"tag-black\";\r\n        tagType.quantity = \"x2\";\r\n    }else if(colorCode === 16){\r\n\r\n        // 16: club 1981 -- blk text, silver bg\r\n        tagType.bg = \"tag-blackdiamond\";\r\n        tagType.img = \"dvclub-img\";\r\n        tagType.quantity = \"x2\";\r\n    }else{\r\n\r\n        // anything else, other, details in comments\r\n        tagType.bg = \"tag-other\";\r\n    }\r\n\r\n    // return value, e.g. tagType = { bg: tag-green, img: null-space }\r\n    return tagType;\r\n};\r\n\r\n\r\nfunction CreatePreviewImage(data) {\r\n    /*\r\n    data use format for non signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        secondLine,\r\n        colorCode,\r\n        thirdLine(if it exists)\r\n    } />\r\n    -\r\n    data use format for signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        height,\r\n        width,\r\n        signColor,\r\n        attachment,\r\n        thickness\r\n    } />\r\n    */\r\n\r\n    // console.log(data); // correct injection would be e.g. data.data.colorCode\r\n    let tagType = colorCodeToClass(data.data.colorCode);\r\n    // console.log(tagType.img);\r\n    tagType.bg = tagType.bg + \"  justify-content-between\";\r\n\r\n    // if custom sign\r\n    let pixelHeight;\r\n    let pixelWidth;\r\n    let splitClasses = [];\r\n    let newLineContents = data.data.name;\r\n    // console.log(data.data.colorCode);\r\n    \r\n    if(data.data.colorCode === 5){\r\n        // grab signcolor classes\r\n        // console.log(data.data.quantity);\r\n        splitClasses = data.data.signColor.split(\" / \");\r\n        splitClasses[0] = \"color-\" + splitClasses[0].toLowerCase();\r\n        splitClasses[1] = \"bg-\" + splitClasses[1].toLowerCase();\r\n        \r\n        pixelHeight = parseFloat(data.data.height);\r\n        pixelWidth = parseFloat(data.data.width);\r\n\r\n        // do sign maths\r\n        pixelHeight *= 50;\r\n        pixelWidth *= 50;\r\n        pixelHeight = pixelHeight + \"px\";\r\n        pixelWidth = pixelWidth + \"px\";\r\n\r\n        newLineContents = newLineContents.split(\"\\n\");\r\n        // console.log(newLineContents);\r\n    };\r\n    \r\n\r\n    // return page with compiled data\r\n    return (\r\n        <Col xs={12} md={6} lg={4} className=\"px-0\">\r\n            {\r\n                (data.data.colorCode !== 5) &&\r\n                <Container>\r\n                    <Row className={ tagType.bg }>\r\n                        {\r\n                            !(tagType.img === \"null-space\") &&\r\n                            <div className={ tagType.img }>\r\n                            </div>\r\n                        }\r\n                        <div className=\"title-parent\">\r\n                            <div className=\"title-text justify-content-center\">\r\n                                { data.data.name }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.secondLine }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.thirdLine }\r\n                            </div>\r\n                        </div>\r\n                    </Row>\r\n                </Container>\r\n            }\r\n            {\r\n                (data.data.colorCode === 5) &&\r\n                <Container style={{ \r\n                    width: pixelWidth,\r\n                    height: pixelHeight,\r\n                    textAlign: \"center\",\r\n                    margin: \"auto\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\"\r\n                }} className={ splitClasses[1] + \" \" + splitClasses[0] + \" bg-basic\" }>\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\", margin: \"auto\" }}>\r\n                        {\r\n                            newLineContents.map((mapItem, index) => \r\n                                <Row className=\"justify-content-center\" key={ index }>{ mapItem }</Row>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </Container>\r\n            }\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default CreatePreviewImage;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n    var argIndex = 0;\n    var message = 'Warning: ' +\n      format.replace(/%s/g, function() {\n        return args[argIndex++];\n      });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  }\n\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n          'message argument'\n      );\n    }\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\n\n/**\n *\n * @property {InputGroupAppend} Append\n * @property {InputGroupPrepend} Prepend\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nvar InputGroup = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"size\", \"className\", \"as\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n  return React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix, size && bsPrefix + \"-\" + size)\n  }));\n});\nvar InputGroupAppend = createWithBsPrefix('input-group-append');\nvar InputGroupPrepend = createWithBsPrefix('input-group-prepend');\nvar InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nvar InputGroupCheckbox = function InputGroupCheckbox(props) {\n  return React.createElement(InputGroupText, null, React.createElement(\"input\", _extends({\n    type: \"checkbox\"\n  }, props)));\n};\n\nvar InputGroupRadio = function InputGroupRadio(props) {\n  return React.createElement(InputGroupText, null, React.createElement(\"input\", _extends({\n    type: \"radio\"\n  }, props)));\n};\n\nInputGroup.displayName = 'InputGroup';\nInputGroup.Text = InputGroupText;\nInputGroup.Radio = InputGroupRadio;\nInputGroup.Checkbox = InputGroupCheckbox;\nInputGroup.Append = InputGroupAppend;\nInputGroup.Prepend = InputGroupPrepend;\nexport default InputGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nvar propTypes = {\n  /**\n   * Specify whether the feedback is for valid or invalid fields\n   *\n   * @type {('valid'|'invalid')}\n   */\n  type: PropTypes.string.isRequired,\n  as: PropTypes.elementType\n};\nvar defaultProps = {\n  type: 'valid'\n};\nvar Feedback = React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\nfunction (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      type = _ref.type,\n      props = _objectWithoutPropertiesLoose(_ref, [\"as\", \"className\", \"type\"]);\n\n  return React.createElement(Component, _extends({}, props, {\n    ref: ref,\n    className: classNames(className, type && type + \"-feedback\")\n  }));\n});\nFeedback.displayName = 'Feedback';\nFeedback.propTypes = propTypes;\nFeedback.defaultProps = defaultProps;\nexport default Feedback;","import React from 'react';\nvar FormContext = React.createContext({\n  controlId: undefined\n});\nexport default FormContext;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport warning from 'warning';\nimport Feedback from './Feedback';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar FormControl = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      type = _ref.type,\n      size = _ref.size,\n      id = _ref.id,\n      className = _ref.className,\n      isValid = _ref.isValid,\n      isInvalid = _ref.isInvalid,\n      plaintext = _ref.plaintext,\n      readOnly = _ref.readOnly,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'input' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"type\", \"size\", \"id\", \"className\", \"isValid\", \"isInvalid\", \"plaintext\", \"readOnly\", \"as\"]);\n\n  var _useContext = useContext(FormContext),\n      controlId = _useContext.controlId;\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-control');\n  var classes;\n\n  if (plaintext) {\n    var _classes;\n\n    classes = (_classes = {}, _classes[bsPrefix + \"-plaintext\"] = true, _classes);\n  } else if (type === 'file') {\n    var _classes2;\n\n    classes = (_classes2 = {}, _classes2[bsPrefix + \"-file\"] = true, _classes2);\n  } else {\n    var _classes3;\n\n    classes = (_classes3 = {}, _classes3[bsPrefix] = true, _classes3[bsPrefix + \"-\" + size] = size, _classes3);\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(controlId == null || !id, '`controlId` is ignored on `<FormControl>` when `id` is specified.') : void 0;\n  return React.createElement(Component, _extends({}, props, {\n    type: type,\n    ref: ref,\n    readOnly: readOnly,\n    id: id || controlId,\n    className: classNames(className, classes, isValid && \"is-valid\", isInvalid && \"is-invalid\")\n  }));\n});\nFormControl.displayName = 'FormControl';\nFormControl.Feedback = Feedback;\nexport default FormControl;","import React, { \r\n    useState, \r\n    useEffect,\r\n    Suspense,\r\n    lazy\r\n} from 'react';\r\nimport { \r\n    Container, \r\n    Button,\r\n    Row,\r\n    Col,\r\n    Spinner,\r\n    InputGroup,\r\n    FormControl\r\n} from 'react-bootstrap';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { dbUtility } from './dbUtility.js';\r\nimport '../css/nav.css';\r\nimport '../css/tags.css';\r\nimport '../css/admin.css';\r\n\r\n\r\n\r\n\r\n\r\n// lazy loads\r\nconst CreatePreviewImage = lazy( () => import('./CreatePreviewImage.js'));\r\n\r\n\r\n// lazy load spinner\r\nconst renderLoader = (\r\n    <Spinner variant=\"danger\" animation=\"border\" role=\"status\">\r\n      <span className=\"sr-only\">\r\n        Loading...\r\n      </span>\r\n    </Spinner>\r\n  );\r\n\r\n\r\n// getting amount of days ago from current to requested date\r\nconst grabDaysAgo = ((requestTimestamp) => {\r\n    // this was once a global thing, but it was having negative day errors when going live build\r\n    let currentTimestamp = Date.now();\r\n\r\n    // then for each item in data row, grab and assign the following\r\n    let reqDaysAgo = (currentTimestamp - requestTimestamp) / 8640000;\r\n    return((Math.floor(reqDaysAgo)) / 10);\r\n});\r\n\r\n\r\n// getting status class and accompanying text\r\nconst grabStatus = (dateFinished => {\r\n    let returnObj = {};\r\n    if(dateFinished === 0){\r\n        // date finished is 0 which means unfinished\r\n        returnObj.text = \"Still Working...\";\r\n        returnObj.class = \"status-yellow\";\r\n        return returnObj;\r\n    }else if(dateFinished === -1){\r\n        // -1 indicates a marked for duplicate entry\r\n        returnObj.text = \"Marked as Duplicate\";\r\n        returnObj.class = \"status-red\";\r\n        return returnObj;\r\n    }else{\r\n        let currentTimestamp = Date.now();\r\n        \r\n        // date not 0, which means done, so get how many days ago done\r\n\r\n        // how many days ago?\r\n        let finDaysAgo = (currentTimestamp - dateFinished) / 8640000;\r\n        finDaysAgo = Math.round(finDaysAgo) / 10;\r\n\r\n        returnObj.text = \"Finished \" + finDaysAgo + \" Days Ago!\";\r\n        returnObj.class = \"status-green\";\r\n        return returnObj;\r\n    };\r\n});\r\n\r\n\r\n\r\n\r\n\r\nfunction StatusPage(props){\r\n    // ---------- VERSION CONTROL ----------\r\n    const[latestVersion, setLatestVersion] = useState(-1);\r\n    useEffect(() => {\r\n        // database came back with version\r\n\r\n        // grab localStorage\r\n        let localVersion = localStorage.getItem(\"version\");\r\n        localVersion = parseInt(localVersion);\r\n        if((localVersion !== latestVersion) && (latestVersion !== -1)){\r\n            console.log(\"wrong local version: \" + localVersion + \" of latest: \" + latestVersion);\r\n            // if versions don't match(and it isn't the initial state of -1), force refresh\r\n            window.location.reload(true);\r\n            \r\n            // update local\r\n            localStorage.setItem(\"version\", latestVersion);\r\n        }else if(localVersion === latestVersion){\r\n            console.log(\"running latest version\");\r\n        };\r\n    },[latestVersion]);\r\n\r\n    // grab appversion from \"appVersion\" tag in database\r\n    dbUtility({\r\n        mode: \"get_app_version\"\r\n    }).then((appVersion) => {\r\n        appVersion = parseInt(appVersion);\r\n        setLatestVersion(appVersion);\r\n    });\r\n\r\n\r\n    // debug: props.adminMode is true or false, props.dataRowAdmin would be the dataRowAdmin\r\n    // console.log(props);\r\n\r\n    // tag rows of data, these MUST be filled with the data type or else it will freak out\r\n    const[dataRow, setDataRow] = useState([{\r\n        id: 0,\r\n        data: {\r\n            color: \"\",\r\n            comments: \"\",\r\n            datefinished: 0,\r\n            daterequest: 0,\r\n            reqDaysAgo: 0,\r\n            attachment: \"\",\r\n            signColor: \"White / Green\",\r\n            signQuantity: 1,\r\n            height: 1,\r\n            width: 1,\r\n            thickness: \"\"\r\n        }\r\n    }]);\r\n\r\n    // this is to show and hide a load spinner, for some reason suspense isn't working with the tags not showing up\r\n    const[showPage, setShowPage] = useState(false);\r\n\r\n    // display all tags system done tag\r\n    const[tagsAreDone, setTagsAreDone] = useState(false);\r\n\r\n    // search value\r\n    const[searchValue, setSearchValue] = useState(\"\");\r\n\r\n    // container width padding, empty for normal mode, \"px-0\" for admin mode\r\n    const[adminPadding, setAdminPadding] = useState(\"\");\r\n\r\n    // h4 title\r\n    const[h4Title, setH4Title] = useState(\"STATUS for UNFINISHED TAGS:\");\r\n\r\n    // search bar placeholder\r\n    const[searchBarPlaceholder, setSearchBarPlaceholder] = useState(\"Search Already Ordered Tags\");\r\n\r\n    // function for done or undo button clicked, only on admin page\r\n    const tagsNeedUpdate = () => {\r\n        // immediately set the loader\r\n        setShowPage(false);\r\n        \r\n\r\n        // check if something was searched\r\n        if(searchValue === \"\"){\r\n            // empty string means no search query, so just read all mode\r\n\r\n            // read everything again\r\n            dbUtility({\r\n                mode: \"read_all\"\r\n            })\r\n            .then((statusTags) => {\r\n                // debug: this is what the promise resolved from in dbUtility()\r\n                // console.log(statusTags);\r\n\r\n                // setDataRow to the value of the db read\r\n                setDataRow(statusTags);\r\n                \r\n\r\n                // if statusTags are empty, set the tags to show\r\n                if(statusTags.length === 0){\r\n                    setTagsAreDone(true);\r\n                }\r\n\r\n                // hide manual non suspense spinner\r\n                setShowPage(true);\r\n\r\n                // update lift state up for admin page\r\n                props.setDataRowAdmin(statusTags);\r\n            });\r\n            \r\n        }else{\r\n            // anything else means search query, so search for mode\r\n            // console.log(searchValue);\r\n\r\n            // immediately show loader spinner\r\n            setH4Title(renderLoader);\r\n\r\n            // this is only for the admin page\r\n            dbUtility({\r\n                mode: \"read_all\"\r\n            })\r\n            .then((statusTags) => {\r\n                // update lift state up for admin page\r\n                props.setDataRowAdmin(statusTags);\r\n\r\n            })\r\n            .then(() => {\r\n\r\n                // this is for the status page, but only when it is on admin mode\r\n                dbUtility({\r\n                    mode: \"search_for\",\r\n                    searchForString: searchValue\r\n                }).then((returnResult) => {\r\n                    // returnResult is an array of documents that match\r\n                    setDataRow(returnResult);\r\n    \r\n                    \r\n                }).then(() => {\r\n                    // show result\r\n                    setShowPage(true);\r\n\r\n                    // immediately show loader spinner\r\n                    setH4Title(\"Results for: \" + searchValue);\r\n                });\r\n            });\r\n\r\n        };\r\n\r\n        \r\n    };\r\n\r\n\r\n    // run once only on mount\r\n    useEffect(() => {\r\n        \r\n\r\n        // grab all the unfinished tags using dbUtility promise\r\n        dbUtility({\r\n            mode: \"read_all\"\r\n        })\r\n        .then((statusTags) => {\r\n            // debug: this is what the promise resolved from in dbUtility()\r\n            // console.log(statusTags);\r\n\r\n            // setDataRow to the value of the db read\r\n            // a console.log here will NOT work!\r\n            setDataRow(statusTags);\r\n\r\n            // if statusTags are empty, set the tags to show\r\n            if(statusTags.length === 0){\r\n                setTagsAreDone(true);\r\n            }\r\n\r\n            // hide manual non suspense spinner\r\n            setShowPage(true);\r\n        });\r\n    },[]);\r\n\r\n    // run when dataRowAdmin updates\r\n    useEffect(() => {\r\n        // debug: did passing state down work?\r\n        // console.log(\"456\");\r\n\r\n        // now update itself to reflect changes\r\n        dbUtility({\r\n            mode: \"read_all\"\r\n        })\r\n        .then((statusTags) => {\r\n            // debug: this is what the promise resolved from in dbUtility()\r\n            // console.log(statusTags);\r\n\r\n            // setDataRow to the value of the db read\r\n            // a console.log here will NOT work!\r\n            setDataRow(statusTags);\r\n\r\n            // if statusTags are empty, set the tags to show\r\n            if(statusTags.length === 0){\r\n                setTagsAreDone(true);\r\n            }\r\n\r\n            // hide manual non suspense spinner\r\n            setShowPage(true);\r\n        });\r\n    },[props.dataRowAdmin]);\r\n\r\n\r\n    useEffect(() => {\r\n        // set h4 title and search bar placeholder on adminmode\r\n        if(props.adminMode){\r\n            setH4Title(\"Edit Individual Tag Status\");\r\n            setSearchBarPlaceholder(\"Search for Specific Tags\");\r\n            setAdminPadding(\"px-0\");\r\n        }\r\n    },[props.adminMode]);\r\n\r\n\r\n    useEffect(() => {\r\n        // console.log(dataRow);\r\n    },[dataRow]);\r\n\r\n\r\n    // return\r\n    return (\r\n        <Container className={ adminPadding }>\r\n            <Row className=\"justify-content-between mt-1 nav-h4-bar-bg print-hide\">\r\n                {\r\n                    !props.adminMode &&\r\n                    <Col xs=\"auto\" className=\"p-0\">\r\n                        <NavLink to=\"/\">\r\n                            <Button>\r\n                                BACK\r\n                            </Button>\r\n                        </NavLink>\r\n                    </Col>\r\n                }\r\n                <Col xs=\"auto\">\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        { h4Title }\r\n                    </h4>\r\n                </Col>\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                <InputGroup id=\"status-search-bar\">\r\n                    <FormControl\r\n                        placeholder={ searchBarPlaceholder }\r\n                        aria-label=\"Search\"\r\n                        aria-describedby=\"basic-addon1\"\r\n                        id=\"status-search-bar-inner\"\r\n                        onChange={ (e) => {\r\n                            // on value change set searchValue to string\r\n                            let thisSearchValue = e.target.value;\r\n\r\n                            // lower casify it\r\n                            thisSearchValue = thisSearchValue.toLowerCase();\r\n\r\n                            setSearchValue(thisSearchValue);\r\n                        }}\r\n                        onKeyPress={ (e) => {\r\n                            if(e.key === 'Enter'){\r\n                                // if enter was pressed\r\n                                // console.log(searchValue);\r\n\r\n                                // if search value is empty, reset\r\n                                if(searchValue === \"\"){\r\n                                    // set the h4 title\r\n                                    setH4Title(\"Edit Individual Tag Status\");\r\n\r\n                                    dbUtility({\r\n                                        mode: \"read_all\"\r\n                                    })\r\n                                    .then((statusTags) => {\r\n                                        // debug: this is what the promise resolved from in dbUtility()\r\n                                        // console.log(statusTags);\r\n                            \r\n                                        // setDataRow to the value of the db read\r\n                                        // a console.log here will NOT work!\r\n                                        setDataRow(statusTags);\r\n                            \r\n                                        // if statusTags are empty, set the tags to show\r\n                                        if(statusTags.length === 0){\r\n                                            setTagsAreDone(true);\r\n                                        }\r\n                            \r\n                                        // hide manual non suspense spinner\r\n                                        setShowPage(true);\r\n                                    });\r\n                                }else{\r\n                                    // immediately show loader spinner\r\n                                    setH4Title(renderLoader);\r\n    \r\n    \r\n                                    // search using dbUtility\r\n                                    dbUtility({\r\n                                        mode: \"search_for\",\r\n                                        searchForString: searchValue\r\n                                    }).then((returnResult) => {\r\n                                        // sort by not done first, so admin page is easier to match tags\r\n                                        console.log(returnResult);\r\n\r\n                                        // returnResult is an array of documents that match\r\n                                        setDataRow(returnResult);\r\n    \r\n                                        // set the h4 title\r\n                                        setH4Title(\"Results for: \" + searchValue);\r\n                                    });\r\n                                };\r\n                            }\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n                </Col>\r\n            </Row>\r\n            {\r\n            (!showPage) &&\r\n            <Row>\r\n                <Spinner variant=\"danger\" animation=\"border\" role=\"status\">\r\n                    <span className=\"sr-only\">\r\n                        Loading...\r\n                    </span>\r\n                </Spinner>\r\n            </Row>\r\n            }\r\n            {\r\n                (tagsAreDone && !props.adminMode) &&\r\n                <Row className=\"justify-content-center mt-2\">\r\n                    <h5 className=\"green-text mt-2\">All tags in the system are done.</h5>\r\n                </Row>\r\n            }\r\n            {\r\n                showPage &&\r\n                dataRow.map((mapItem, index) => \r\n                    <Row className=\"mt-1 justify-content-between status-row\" key={ \"status-\" + mapItem.id }>\r\n                        {\r\n                            props.adminMode &&\r\n                            <Col xs={ 12 } md={ 1 } className=\"px-0\">\r\n                                <Row className=\"justify-content-center mt-1\">\r\n                                    <Col xs=\"auto\">\r\n                                        <Button \r\n                                            variant=\"success\" \r\n                                            className=\"admin-change-status-button\"\r\n                                            disabled={ \r\n                                                grabStatus(mapItem.data.datefinished).class === \"status-green\" ? true : false \r\n                                            }\r\n                                            onClick={ () => {\r\n                                                // update the entry with DONE\r\n                                                let tempIdArray = [];\r\n                                                tempIdArray.push(mapItem.id);\r\n                                                dbUtility({\r\n                                                    mode: \"update_entry\",\r\n                                                    type: \"done\",\r\n                                                    docIdArray: tempIdArray\r\n                                                }).then(() => {\r\n                                                    // somehow need to re-update\r\n\r\n                                                    tagsNeedUpdate();\r\n                                                });\r\n                                            }}>\r\n                                            &#10004;\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"justify-content-center mt-1\">\r\n                                    <Col xs=\"auto\">\r\n                                        <Button \r\n                                            variant=\"danger\" \r\n                                            className=\"admin-change-status-button\"\r\n                                            disabled={ \r\n                                                grabStatus(mapItem.data.datefinished).class === \"status-green\" ? true : false \r\n                                            }\r\n                                            onClick={ () => {\r\n                                                // update the entry with DONE\r\n                                                let tempIdArray = [];\r\n                                                tempIdArray.push(mapItem.id);\r\n                                                dbUtility({\r\n                                                    mode: \"update_entry\",\r\n                                                    type: \"duplicate\",\r\n                                                    docIdArray: tempIdArray\r\n                                                }).then(() => {\r\n                                                    // somehow need to re-update\r\n\r\n                                                    tagsNeedUpdate();\r\n                                                });\r\n                                            }}>\r\n                                            &#x2398;\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"justify-content-center mt-1\">\r\n                                    <Col xs=\"auto\">\r\n                                        <Button \r\n                                            variant=\"warning\" \r\n                                            className=\"admin-change-status-button\"\r\n                                            disabled={ \r\n                                            grabStatus(mapItem.data.datefinished).class === \"status-yellow\" ? true : false \r\n                                        }\r\n                                        onClick={ () => {\r\n                                            // debug: grab id of item clicked on\r\n                                            // console.log(mapItem.id);\r\n                                            let tempIdArray = [];\r\n                                            tempIdArray.push(mapItem.id);\r\n\r\n                                            // update the entry with UNDO / notdone\r\n                                            dbUtility({\r\n                                                mode: \"update_entry\",\r\n                                                type: \"notdone\",\r\n                                                docIdArray: tempIdArray\r\n                                            }).then(() => {\r\n                                                // somehow need to re-update\r\n                                                tagsNeedUpdate();\r\n                                            });\r\n                                        }}>\r\n                                            &#10226;\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                        }\r\n                        <Col xs={ 12 } md={ props.adminMode ? 5 : 6 } className=\"px-0\">\r\n                            <Suspense fallback={ renderLoader }>\r\n                                {\r\n                                    (mapItem.data.color !== 5) &&\r\n                                    <CreatePreviewImage data={{ \r\n                                        name: mapItem.data.name,\r\n                                        secondLine: mapItem.data.titlecity,\r\n                                        thirdLine: mapItem.data.thirdline,\r\n                                        colorCode: mapItem.data.color\r\n                                    }} />\r\n                                }\r\n                                {\r\n                                    (mapItem.data.color === 5) &&\r\n                                    <CreatePreviewImage data={{ \r\n                                        name: mapItem.data.name,\r\n                                        colorCode: 5,\r\n                                        signColor: mapItem.data.signcolor,\r\n                                        attachment: mapItem.data.attachment,\r\n                                        height: mapItem.data.height,\r\n                                        width: mapItem.data.width\r\n                                    }} />\r\n                                }\r\n                            </Suspense>\r\n                        </Col>\r\n                        <Col xs={ 12 } md={ 4 } className=\"px-0\">\r\n                            <Row>\r\n                                <Col>\r\n                                    <p className=\"status-b-col-text\">Requestor: { mapItem.data.requestor }</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p className=\"status-b-col-text\">Requested: { grabDaysAgo(mapItem.data.daterequest) } Days Ago</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    {\r\n                                        (mapItem.data.color !== 5) &&\r\n                                        <p className=\"status-b-col-text\">Quantity: { mapItem.data.quantity }</p>\r\n                                    }\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p className=\"status-b-col-text\">Comments: { mapItem.data.comments }</p>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col xs={ 12 } md={ 2 } className={ grabStatus(mapItem.data.datefinished).class }>\r\n                            <p>STATUS: { grabStatus(mapItem.data.datefinished).text }</p>\r\n                        </Col>\r\n                    </Row>\r\n                )\r\n            }\r\n        </Container>\r\n    );\r\n  }\r\n  \r\n  export default StatusPage;"],"sourceRoot":""}