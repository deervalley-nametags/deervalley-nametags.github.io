{"version":3,"sources":["js/CreateTagPage.js","js/CreatePreviewImage.js","js/dbUtility.js","js/textValidation.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["CreateTagPage","thisColorCode","parseInt","useParams","id","history","useHistory","useState","name","color","secondLine","thirdLine","requestor","comments","quantity","submitArray","setSubmitArray","useEffect","setSubmitGrey","setStatusTextIndex","console","log","submitGrey","statusTextIndex","className","xs","to","md","lg","data","colorCode","placeholder","aria-label","onChange","e","validatedText","textValidation","target","value","priorSubmitObj","as","Prepend","Radio","defaultChecked","checked","oldSubmitArray","Append","Text","type","disabled","onClick","dbUtility","mode","writeData","then","statusBack","push","CreatePreviewImage","pixelHeight","pixelWidth","tagType","bg","img","defName","defSecond","colorCodeToClass","splitClasses","newLineContents","signColor","split","toLowerCase","parseFloat","height","width","style","textAlign","margin","display","flexDirection","map","mapItem","index","key","namesRef","promiseReturn","loginAs","user","pass","Promise","resolve","reject","firebase","auth","setPersistence","Auth","Persistence","NONE","signInWithEmailAndPassword","catch","error","errorCode","code","errorMessage","message","msg","checkAuth","onAuthStateChanged","email","utilityObj","apps","initializeApp","apiKey","authDomain","projectId","db","firestore","collection","sqrtNonPattern","Math","sqrt","authUser","authPass","returned","where","get","querySnapshot","forEach","doc","findIndex","obj","searchForString","arrayItem","tagName","tagRequestor","prependNameArray","prependRequestorArray","nameArray","requestorArray","unshift","currentTimestamp","Date","getTime","add","namearray","attachment","signcolor","signquantity","signQuantity","thickness","requestorarray","daterequest","datefinished","titlecity","thirdline","date","docIdArray","item","update","inputString","minChar","strictMode","outputString","string","regex","undefined","match","join","regexDelete","length","splicedString","stateAbbv","splitString","lastIndex","replace","slice","tempPossibleState","pop","tempJoinString","stateSearch","indexOf","innerStateSearch","stateToAbbv","combinedString","word","firstChar","toUpperCase","titleCapsify","stringSelection","addCommaSpaces","_toConsumableArray","arr","Array","isArray","i","arr2","iter","Symbol","iterator","Object","prototype","toString","call","from","TypeError"],"mappings":"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","file":"static/js/8.176e14b2.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useHistory, NavLink, useParams } from \"react-router-dom\";\r\n\r\n// layout import\r\nimport { \r\n    Container, \r\n    Button,\r\n    Row,\r\n    Col,\r\n    InputGroup,\r\n    FormControl\r\n} from 'react-bootstrap';\r\nimport '../css/nav.css';\r\n\r\n// utility import\r\nimport CreatePreviewImage from './CreatePreviewImage.js';\r\nimport { textValidation } from './textValidation.js';\r\nimport { dbUtility } from './dbUtility.js';\r\n\r\n\r\n// start page\r\nconst CreateTagPage = () => {\r\n    // the number it grabs in the url is actually a string, so make it int\r\n    let thisColorCode = parseInt(useParams().id);\r\n    \r\n    // debug: this should be the colorCode in the url e.g. /create/3 so \"3\"\r\n    // console.log(thisColorCode);\r\n\r\n\r\n    // this is to be able to load status window when tag created\r\n    let history = useHistory();\r\n    \r\n\r\n    // set the submit array(same data format as multi tag) to default values\r\n    const[ submitArray, setSubmitArray ] = useState([{\r\n        name: \"\",\r\n        color: thisColorCode,\r\n        secondLine: \"\",\r\n        thirdLine: \"\",\r\n        requestor: \"\",\r\n        comments: \"\",\r\n        quantity: (() => { // new version of default quantity setter is an 'immediately invoked function expression'\r\n            if(thisColorCode === 1){\r\n\r\n                // plain green tag\r\n                return \"2-PINS\";\r\n            }else if(thisColorCode === 4 || thisColorCode === 12){\r\n\r\n                // ski patrol and black outdoor tag with deerhead\r\n                return \"3-VELCRO\"\r\n            }else if(thisColorCode ===  13){\r\n\r\n                // old mtn ops window tag\r\n                return \"3-CARDS\"\r\n            }else{\r\n\r\n                // everything else\r\n                return \"2-MAGNETS\"\r\n            };\r\n        })(),\r\n        // old quantity setter was a ternary: (thisColorCode === 1) ? \"2 PINS\" : \"2 MAGNETS\"\r\n    }]);\r\n\r\n\r\n    // submit button on request\r\n    const submitRequest = () => {\r\n        // check to make sure user hasn't done in-browser html magic to bypass disabled submit button\r\n        // an empty or invalid request\r\n        if(submitGrey === false){\r\n            // pass, as its unlikely to change a react page variable in browser unless superuser\r\n\r\n            // change status text to loading\r\n            setStatusTextIndex(3);\r\n\r\n            // db new entry\r\n            dbUtility({\r\n                mode: \"new_entry\",\r\n                writeData: submitArray\r\n            }).then(function(statusBack){\r\n                // console.log(statusBack)\r\n                // on success, navigate to /status\r\n                history.push(\"/status\");\r\n            });\r\n        }else{\r\n            // failed, this shouldn't happen though\r\n        };\r\n    }\r\n\r\n    /*\r\n    // debug: what is submitArray on update\r\n    useEffect(() => {\r\n        console.log(submitArray);\r\n    },[submitArray]);\r\n    */\r\n\r\n    // update the status text and disable/enable button\r\n    useEffect(() => {\r\n        // also update the submission status, e.g. you need X or Y to submit\r\n        // if empty string or 0\r\n        if(submitArray[0].name === \"\" && submitArray[0].requestor === \"\"){\r\n            // false due to name AND requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(0);\r\n        }else if(submitArray[0].name === \"\"){\r\n            // false only to name\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(2);\r\n        }else if(submitArray[0].requestor === \"\"){\r\n            // false only to requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(1);\r\n        }else if(submitArray[0].name !== \"\" && submitArray[0].requestor !== \"\"){\r\n            // true only if name AND requestor are not empty strings set from textValidation\r\n            setSubmitGrey(false);\r\n            setStatusTextIndex(4);\r\n        }else{\r\n            // some other condition\r\n            console.log(\"updateSubmitGrey() ran into some other condition on validation!\");\r\n        };\r\n\r\n    },[submitArray]);\r\n\r\n\r\n    // submit grey button text and status text\r\n    const[ submitGrey, setSubmitGrey ] = useState(true);\r\n    // for the status text, only the index of it changes, not the actual string [4] is empty string\r\n    const statusText = [\r\n        \"There must be a requestor, The Name on the tag must be at least 3 characters\",\r\n        \"There must be a requestor.\",\r\n        \"The Name on the tag must be at least 3 characters\",\r\n        \"Submitting...\",\r\n        \"\"\r\n    ];\r\n    const[ statusTextIndex, setStatusTextIndex ] = useState(0);\r\n\r\n\r\n    // setting layout sizes\r\n    const xsSize = 12;\r\n    const mdSize = 6;\r\n    // const lgSize = 6;\r\n\r\n    // return\r\n    return (\r\n        <Container>\r\n            <Row className=\"justify-content-between nav-h4-bar-bg\">\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    <NavLink to=\"/\">\r\n                        <Button>\r\n                            BACK\r\n                        </Button>\r\n                    </NavLink>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                {\r\n                    // color codes and their titles in the navbar\r\n                    thisColorCode === 1 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW GREEN TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    thisColorCode === 2 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW GREEN DEERHEAD TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    thisColorCode === 3 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW BRONZE TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    thisColorCode === 14 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW BLACK DIAMOND LODGE TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    thisColorCode === 4 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW REGULAR OUTDOOR TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    thisColorCode === 12 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW OUTDOOR SKI PATROL TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    thisColorCode === 13 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW WINDOW TAG FOR UNDERARMOUR\r\n                    </h4>\r\n                }\r\n                </Col>\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    <NavLink to={\"/createmultiple/\" + thisColorCode }>\r\n                        <Button>\r\n                            NEED MULTIPLES?\r\n                        </Button>\r\n                    </NavLink>\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mt-3\">\r\n                <Col xs={xsSize} md={mdSize} lg={4} className=\"justify-content-center\">\r\n                    <Row>Preview: </Row>\r\n                    <Row>\r\n                        <CreatePreviewImage data={{ \r\n                            colorCode: thisColorCode, \r\n                            name: submitArray[0].name,\r\n                            secondLine: submitArray[0].secondLine,\r\n                            thirdLine: submitArray[0].thirdLine\r\n                        }} />\r\n                    </Row>\r\n                </Col>\r\n                <Col xs={xsSize} md={mdSize} lg={8}>\r\n                    <Row>\r\n                        <InputGroup className=\"mt-4\">\r\n                            <FormControl\r\n                                placeholder=\"Requestor's Name and Department\"\r\n                                aria-label=\"Requestor\"\r\n                                onChange={ e => {\r\n                                    // text validate\r\n                                    let validatedText = textValidation(e.target.value, 3);\r\n\r\n                                    // only update if not false\r\n                                    if(validatedText !== 0){\r\n                                        // grab prior values except for changed element\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.requestor = validatedText;\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }else{\r\n                                        // otherwise just set it to empty string\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.requestor = \"\";\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </InputGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <FormControl\r\n                                placeholder=\"Name on tag\"\r\n                                aria-label=\"Name\"\r\n                                onChange={ e => {\r\n                                    // text validate\r\n                                    let validatedText = textValidation(e.target.value, 3, true);\r\n\r\n                                    // only update if not false\r\n                                    if(validatedText !== 0){\r\n                                        // grab prior values except for changed element\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.name = validatedText;\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }else{\r\n                                        // otherwise just set it to empty string\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.name = \"\";\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </InputGroup>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        placeholder=\"Title OR: City, ST\"\r\n                        aria-label=\"Second Line\"\r\n                        onChange={ e => {\r\n                            // text validate\r\n                            let validatedText = textValidation(e.target.value, 3, true);\r\n\r\n                            // grab prior values except for changed element\r\n                            let priorSubmitObj = submitArray[0];\r\n                            priorSubmitObj.secondLine = validatedText;\r\n                            setSubmitArray([priorSubmitObj]);\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        placeholder=\"Third Line(if applicable)\"\r\n                        aria-label=\"Third Line\"\r\n                        onChange={ e => {\r\n                            // text validate\r\n                            let validatedText = textValidation(e.target.value, 3, true);\r\n\r\n                            // grab prior values except for changed element\r\n                            let priorSubmitObj = submitArray[0];\r\n                            priorSubmitObj.thirdLine = validatedText;\r\n                            setSubmitArray([priorSubmitObj]);\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        as=\"textarea\"\r\n                        placeholder=\"Comments\"\r\n                        aria-label=\"Comments\"\r\n                        onChange={ e => {\r\n                            // text validate\r\n                            let validatedText = textValidation(e.target.value);\r\n\r\n                            // grab prior values except for changed element\r\n                            let priorSubmitObj = submitArray[0];\r\n                            priorSubmitObj.comments = validatedText;\r\n                            setSubmitArray([priorSubmitObj]);\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            {\r\n                (thisColorCode === 1 || thisColorCode === 2 || thisColorCode === 3) &&\r\n                <Row className=\"justify-content-between pinmag-row mt-3\">\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN\" \r\n                                        defaultChecked={ (thisColorCode === 1) ? true : false }\r\n                                        onChange={e => {\r\n                                            // if checked is true\r\n                                            if(e.target.checked){\r\n                                                // set value accordingly\r\n                                                let oldSubmitArray = submitArray;\r\n                                                oldSubmitArray[0].quantity = \"2-PINS\";\r\n                                                setSubmitArray([...oldSubmitArray]);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>2 PINS</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN\" \r\n                                        defaultChecked={ (thisColorCode !== 1) ? true : false }\r\n                                        onChange={e => {\r\n                                            // if checked is true\r\n                                            if(e.target.checked){\r\n                                                // set value accordingly\r\n                                                let oldSubmitArray = submitArray;\r\n                                                oldSubmitArray[0].quantity = \"2-MAGNETS\";\r\n                                                setSubmitArray([...oldSubmitArray]);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>2 MAGNETS</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN and MAG\" \r\n                                        onChange={e => {\r\n                                            // if checked is true\r\n                                            if(e.target.checked){\r\n                                                // set value accordingly\r\n                                                let oldSubmitArray = submitArray;\r\n                                                oldSubmitArray[0].quantity = \"1-PIN + 1-MAGNET\";\r\n                                                setSubmitArray([...oldSubmitArray]);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>1 PIN + 1 MAGNET</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            {\r\n                (thisColorCode === 12 || thisColorCode === 4) &&\r\n                <Row>\r\n                    <Col>\r\n                        <p className=\"mt-2 red-text\">\r\n                            Each name ordered will come with 3 outdoor tags with velcro.\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            {\r\n                (thisColorCode === 13) &&\r\n                <Row>\r\n                    <Col>\r\n                        <p className=\"mt-2 red-text\">\r\n                            Each name ordered will come with 3 outdoor tags that should slip right into the window of the uniform.\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            {\r\n                (thisColorCode === 1 || thisColorCode === 2 || thisColorCode === 3 || thisColorCode === 14) &&\r\n                <Row>\r\n                    <Col>\r\n                        <p className=\"mt-2 red-text\">\r\n                            Pins may be provided if magnet supply is low or out!\r\n                            <br />\r\n                            Deer Heads: Managers, Supervisors, Guest Svc, Directors, VPs, Attendants, Bronze Tags, Lodges, Fireside, and Chefs\r\n                            <br />\r\n                            Plain Tag: Everybody else\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            <Row className=\"mt-3 justify-content-end\">\r\n                <Col xs={xsSize} md={mdSize} lg=\"auto\">\r\n                    <p className=\"mt-2\">{ statusText[statusTextIndex] }</p>\r\n                </Col>\r\n                <Col xs={xsSize} md={mdSize} lg=\"auto\">\r\n                    <Button type=\"submit\" disabled={ submitGrey } onClick={ submitRequest }>Submit Request</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\n  \r\n  export default CreateTagPage;","import React from 'react';\r\nimport { \r\n    Col,\r\n    Row,\r\n    Container\r\n} from 'react-bootstrap';\r\nimport '../css/tags.css';\r\nimport '../css/signcolor.css';\r\n\r\nfunction colorCodeToClass(colorCode){\r\n    /*\r\n    tagType obj are the classes to apply and default texts on each\r\n    bg background class, \r\n    img is the deer head logo, null-space is the default class that deletes the class\r\n    in the event that there is no deer head\r\n    defName: default Name placeholder\r\n    defSecond: default second line text placeholder\r\n    quantity: the default quantity for each tag type(unchangeable, only for info purposes)\r\n    -\r\n    see CreateSignColor for tag id list\r\n    */\r\n    let tagType = {\r\n        bg: \"\",\r\n        img: \"null-space\",\r\n        defName: \"Name\",\r\n        defSecond: \"City, ST\",\r\n        quantity: \"x2\"\r\n    };\r\n\r\n    // translate color code to image type using classes\r\n    if(colorCode === 1){\r\n                \r\n        // 1: green pin no deerhead(normal nametag and default selection)\r\n        tagType.bg = \"tag-green\";\r\n    }else if(colorCode === 2){\r\n\r\n        // 2: green magnet deerhead\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n    }else if(colorCode === 3){\r\n\r\n        // 3: bronze magnet engraved deerhead\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvwhite-img\";\r\n    }else if(colorCode === 4){\r\n\r\n        // 4: outdoor tags\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.img = \"dvwhite-img\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 5){\r\n\r\n        // 5: sign, add details in comments\r\n        tagType.bg = \"tag-sign\";\r\n        tagType.defName = \"Sign\";\r\n        tagType.defSecond = \"Put details in the comments\";\r\n        tagType.quantity = \"\";\r\n    }else if(colorCode === 7){\r\n\r\n        // 7: repeat 1 but with title instead of city, st\r\n        tagType.bg = \"tag-green\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 8){\r\n\r\n        // 8: repeat 2 but with title instead of city, st\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 9){\r\n\r\n        // 9: repeat 3 but with title instead of city, st\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvwhite-img\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 10){\r\n\r\n        // 10: repeat 4 but with title instead of city, st\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.defSecond = \"Title\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 11){\r\n\r\n        // 11: basket check tag\r\n        tagType.bg = \"tag-basket\";\r\n        tagType.defName = \"<p style='font-size:60px;position:relative;top:-20%;'>&#8226;</p>\";\r\n        tagType.defSecond = \"<p style='font-size:19px;position:relative;bottom:30%;'>Basket Check</p>\";\r\n        tagType.quantity = \"\";\r\n    }else if(colorCode === 12){\r\n\r\n        // 12: outdoor tag for ski patrol\r\n        tagType.bg = \"tag-patrol\";\r\n        tagType.img = \"dvpatrol-img\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 13){\r\n\r\n        // 13: old outdoor tags that fit inside old mtn ops uniforms\r\n        tagType.bg = \"tag-oldoutdoor\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 14){\r\n\r\n        // 14: black diamond tags\r\n        tagType.bg = \"tag-blackdiamond\";\r\n        tagType.img = \"dvblackdiamond-img\";\r\n        tagType.quantity = \"x2\";\r\n    }else if(colorCode === 11){\r\n\r\n    }else{\r\n\r\n        // anything else, other, details in comments\r\n        tagType.bg = \"tag-other\";\r\n    }\r\n\r\n    // return value, e.g. tagType = { bg: tag-green, img: null-space }\r\n    return tagType;\r\n};\r\n\r\n\r\nfunction CreatePreviewImage(data) {\r\n    /*\r\n    data use format for non signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        secondLine,\r\n        colorCode,\r\n        thirdLine(if it exists)\r\n    } />\r\n    -\r\n    data use format for signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        height,\r\n        width,\r\n        signColor,\r\n        attachment,\r\n        thickness\r\n    } />\r\n    */\r\n\r\n    // console.log(data); // correct injection would be e.g. data.data.colorCode\r\n    let tagType = colorCodeToClass(data.data.colorCode);\r\n    // console.log(tagType.img);\r\n    tagType.bg = tagType.bg + \"  justify-content-between\";\r\n\r\n    // if custom sign\r\n    let pixelHeight;\r\n    let pixelWidth;\r\n    let splitClasses = [];\r\n    let newLineContents = data.data.name;\r\n    // console.log(data.data.colorCode);\r\n    \r\n    if(data.data.colorCode === 5){\r\n        // grab signcolor classes\r\n        // console.log(data.data.quantity);\r\n        splitClasses = data.data.signColor.split(\" / \");\r\n        splitClasses[0] = \"color-\" + splitClasses[0].toLowerCase();\r\n        splitClasses[1] = \"bg-\" + splitClasses[1].toLowerCase();\r\n        \r\n        pixelHeight = parseFloat(data.data.height);\r\n        pixelWidth = parseFloat(data.data.width);\r\n\r\n        // do sign maths\r\n        pixelHeight *= 50;\r\n        pixelWidth *= 50;\r\n        pixelHeight = pixelHeight + \"px\";\r\n        pixelWidth = pixelWidth + \"px\";\r\n\r\n        newLineContents = newLineContents.split(\"\\n\");\r\n        // console.log(newLineContents);\r\n    };\r\n    \r\n\r\n    // return page with compiled data\r\n    return (\r\n        <Col xs={12} md={6} lg={4} className=\"px-0\">\r\n            {\r\n                (data.data.colorCode !== 5) &&\r\n                <Container>\r\n                    <Row className={ tagType.bg }>\r\n                        {\r\n                            !(tagType.img === \"null-space\") &&\r\n                            <div className={ tagType.img }>\r\n                            </div>\r\n                        }\r\n                        <div className=\"title-parent\">\r\n                            <div className=\"title-text justify-content-center\">\r\n                                { data.data.name }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.secondLine }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.thirdLine }\r\n                            </div>\r\n                        </div>\r\n                    </Row>\r\n                </Container>\r\n            }\r\n            {\r\n                (data.data.colorCode === 5) &&\r\n                <Container style={{ \r\n                    width: pixelWidth,\r\n                    height: pixelHeight,\r\n                    textAlign: \"center\",\r\n                    margin: \"auto\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\"\r\n                }} className={ splitClasses[1] + \" \" + splitClasses[0] + \" bg-basic\" }>\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\", margin: \"auto\" }}>\r\n                        {\r\n                            newLineContents.map((mapItem, index) => \r\n                                <Row className=\"justify-content-center\" key={ index }>{ mapItem }</Row>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </Container>\r\n            }\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default CreatePreviewImage;","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\n// highest order variables\r\nlet namesRef; // db reference\r\nlet promiseReturn;\r\n\r\nfunction loginAs(user, pass){\r\n    return new Promise((resolve, reject) => {\r\n        \r\n        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\r\n        .then(function() {\r\n            // persistence types:\r\n            // .NONE = reload will not keep session\r\n            // .SESSION = reload will keep session, but closing and reopening will not\r\n            \r\n            return firebase.auth().signInWithEmailAndPassword(user, pass);\r\n        })\r\n        .then(function(){\r\n            resolve(true);\r\n        })\r\n        .catch(function(error) {\r\n            //  Handle Errors here.\r\n            let errorCode = error.code;\r\n            let errorMessage = error.message;\r\n            // console.log(errorCode + \" -1- \" + errorMessage);\r\n\r\n            reject({\r\n                code: errorCode,\r\n                msg: errorMessage\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nfunction checkAuth(){\r\n    // check auth\r\n    return new Promise((resolve, reject) => {\r\n        firebase.auth().onAuthStateChanged(function(user) {\r\n            if(user){\r\n                //  User is signed in.\r\n                console.log(\"checkAuth() passed with user: \" + user.email);\r\n        \r\n                resolve(user.email);\r\n            }else{\r\n                //  No user is signed in.\r\n                console.log(\"checkAuth() failed: no credentials.\");\r\n            };\r\n        });\r\n\r\n    });\r\n};\r\n\r\nexport function dbUtility(utilityObj){\r\n    /*\r\n    this is a master use-all use-anywhere connect to db PROMISE\r\n    so if you are switching from firebase to something else, you know\r\n    exactly what needs to be replaced\r\n    -\r\n    its a promise because it relies on waiting on the authentication mainly\r\n    so can use it like dbUtility({mode:\"\"}).then(() => { // do stuff here });\r\n    -\r\n    utilityObj has the following data structure for its different modes:\r\n    {\r\n        mode: \"auth\",\r\n        authUser: \"\",\r\n        authPass: \"\"\r\n    }\r\n    {\r\n        mode: \"new_entry\",\r\n        writeData: [{name:,requestor:,etc},{},// etc]\r\n    }\r\n    {\r\n        mode: \"search_for\", // returns array full of found tags\r\n        searchForString: \"string to search\"\r\n    }\r\n    {\r\n        mode: \"read_all\" // returns array full of objects full of tags\r\n    }\r\n    {\r\n        mode: \"update_entry\",\r\n        type: \"done\" or \"notdone\"\r\n        docIdArray: [\"id\",\"id\",\"id\",// etc]\r\n    }\r\n    */\r\n   \r\n\r\n    // if not yet initialized, initialize\r\n    // debug: typeof firebase.apps[0] comes undefined if not previously init, or object if init\r\n    // console.dir(typeof firebase.apps[0]);\r\n    if(typeof firebase.apps[0] == \"undefined\"){\r\n       // not init yet\r\n       \r\n       // firebase init using firestore\r\n       firebase.initializeApp({\r\n           apiKey: 'AIzaSyA1uPdDnmLSWqkuEkFlGH5YF7UvxvszceU',\r\n           authDomain: 'nametags-4019a.firebaseapp.com',\r\n           projectId: 'nametags-4019a'\r\n        });\r\n        \r\n        // creation of db\r\n        const db = firebase.firestore();\r\n        namesRef = db.collection(\"names\");\r\n        \r\n        // db authenticate as anon\r\n        // bad obfuscation time\r\n        let sqrtNonPattern = Math.sqrt(4356);\r\n        sqrtNonPattern = \"iamanonymous\" + sqrtNonPattern;\r\n        sqrtNonPattern = sqrtNonPattern + \"6\";\r\n        loginAs(\"anonymous@deervalley.com\",sqrtNonPattern);\r\n        \r\n    }\r\n    \r\n\r\n    // authenticate\r\n    if(utilityObj.mode === \"auth\"){\r\n        return new Promise((resolve, reject) => {\r\n            // first login, must wait so it is a promise\r\n            loginAs(utilityObj.authUser, utilityObj.authPass).then( () => {\r\n                // now we need to use check auth in order to grab the user\r\n                checkAuth().then( returned => {\r\n                    // only if user is admin, resolve\r\n                    // console.log(\"pio \" + returned);\r\n                    resolve(returned);\r\n                }).catch( error => {\r\n                    \r\n                });\r\n            }).catch( error => {\r\n                reject(error);\r\n            });\r\n        });\r\n    };\r\n    \r\n\r\n    // mode check\r\n    if(utilityObj.mode === \"read_all\"){\r\n        /*\r\n        read all mode, but because of read limits on google firebase free version, only\r\n        grab the unfinished tags\r\n        -\r\n        set return type to array before pushing\r\n        */\r\n        promiseReturn = [];\r\n        \r\n        // return promise\r\n        return new Promise((resolve, reject) => {\r\n\r\n            // check auth before getting doc data\r\n            checkAuth().then(function(){\r\n                namesRef.where(\"datefinished\", \"==\", 0).get().then(function(querySnapshot){\r\n                    querySnapshot.forEach(function(doc){\r\n                        // for each document found as unfinished, array push the following\r\n\r\n                        // search for any matching id's in promiseReturn\r\n                        // this section is because for some reason it was duplicating, so now it only does one once\r\n                        let priorExistingId = promiseReturn.findIndex(obj => obj.id === doc.id);\r\n                        if(priorExistingId === -1){\r\n                            // -1 means it did not find a prior id, so go ahead\r\n                            // array push the following\r\n                            promiseReturn.push({\r\n                                id: doc.id,\r\n                                data: doc.data()\r\n                            });\r\n                        }else{\r\n                            // anything else means if found something prior, so do nothing\r\n                        }\r\n                    });\r\n                    resolve(promiseReturn);\r\n                });\r\n            });\r\n\r\n        });\r\n\r\n\r\n    }else if(utilityObj.mode === \"search_for\"){\r\n        // search mode\r\n        let promiseReturn = [];\r\n\r\n        // return promise\r\n        return new Promise((resolve, reject) => {\r\n            // check auth before getting doc data\r\n            checkAuth().then(function(){\r\n                // grab results where name is being searched for\r\n                namesRef.where(\"namearray\", \"array-contains-any\", [utilityObj.searchForString]).get().then(function(querySnapshot){\r\n                    querySnapshot.forEach(function(doc){\r\n                        // for each document found, array push the following\r\n                        promiseReturn.push({\r\n                            id: doc.id,\r\n                            data: doc.data()\r\n                        });\r\n                    });\r\n                }).then(function(){\r\n                    // now grab all results where requestor could be searched for, this allows duplicate results\r\n                    namesRef.where(\"requestorarray\", \"array-contains-any\", [utilityObj.searchForString]).get().then(function(querySnapshot){\r\n                        querySnapshot.forEach(function(doc){\r\n                            // for each document found\r\n                            \r\n                            // search for any matching id's in promiseReturn\r\n                            let priorExistingId = promiseReturn.findIndex(obj => obj.id === doc.id);\r\n                            if(priorExistingId === -1){\r\n                                // -1 means it did not find a prior id, so go ahead\r\n                                // array push the following\r\n                                promiseReturn.push({\r\n                                    id: doc.id,\r\n                                    data: doc.data()\r\n                                });\r\n                            }else{\r\n                                // anything else means if found something prior, so do nothing\r\n                            }\r\n                        });\r\n                        resolve(promiseReturn);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }else if(utilityObj.mode === \"new_entry\"){\r\n        /*\r\n        used for new entries\r\n        data in:\r\n        array[{name:\"\",requestor:\"\",secondLine:\"\",thirdLine:\"\",requestor:\"\",comments:\"\"},{},{},etc]\r\n        -\r\n        set return type to array before pushing\r\n        */\r\n        promiseReturn = [];\r\n\r\n        // debug: what does writeData come in as\r\n        // console.log(utilityObj.writeData);\r\n\r\n        // return promise\r\n        return new Promise((resolve, reject) => {\r\n            // check auth before submitting\r\n            checkAuth().then(function(){\r\n                utilityObj.writeData.forEach(function(arrayItem, index){\r\n                    // console.log(arrayItem);\r\n\r\n                    // lower casify and split name to an array, searching can be done easilyer\r\n                    let tagName = arrayItem.name;\r\n                    let tagRequestor = arrayItem.requestor;\r\n                    let prependNameArray = tagName.toLowerCase();\r\n                    let prependRequestorArray = tagRequestor.toLowerCase();\r\n            \r\n                    // before split, add temp var and prepend name to array, so \"Jake Smith\"\r\n                    // looks like [\"jake smith\",\"jake\",\"smith\"]\r\n                    let nameArray = prependNameArray.split(\" \");\r\n                    let requestorArray = prependRequestorArray.split(\" \");\r\n                    nameArray.unshift(prependNameArray);\r\n                    requestorArray.unshift(prependRequestorArray);\r\n                    \r\n                    // grab current timestamp\r\n                    let date = new Date();\r\n                    let currentTimestamp = date.getTime();\r\n            \r\n                    // if sign, add only sign stuff\r\n                    if(arrayItem.color === 5){\r\n                        // sign\r\n                        // make a new document in db, auto gen id\r\n                        namesRef.add({\r\n                            name: tagName,\r\n                            namearray: nameArray,\r\n                            color: 5,\r\n                            attachment: arrayItem.attachment,\r\n                            signcolor: arrayItem.signColor,\r\n                            signquantity: arrayItem.signQuantity,\r\n                            height: arrayItem.height,\r\n                            width: arrayItem.width,\r\n                            thickness: arrayItem.thickness,\r\n                            requestor: tagRequestor,\r\n                            requestorarray: requestorArray,\r\n                            comments: arrayItem.comments,\r\n                            daterequest: currentTimestamp,\r\n                            datefinished: 0\r\n                        }).then(function(){\r\n                            // debug when writing is successful\r\n                            // console.log(\"writing good\");\r\n                            resolve(true);\r\n                        });\r\n                    }else{\r\n                        // anything other than sign\r\n                        // make a new document in db, auto gen id\r\n                        namesRef.add({\r\n                            name: tagName,\r\n                            namearray: nameArray,\r\n                            color: arrayItem.color,\r\n                            titlecity: arrayItem.secondLine,\r\n                            thirdline: arrayItem.thirdLine,\r\n                            requestor: tagRequestor,\r\n                            requestorarray: requestorArray,\r\n                            comments: arrayItem.comments,\r\n                            daterequest: currentTimestamp,\r\n                            datefinished: 0,\r\n                            quantity: arrayItem.quantity\r\n                        }).then(function(){\r\n                            // debug when writing is successful\r\n                            // console.log(\"writing good\");\r\n                            resolve(true);\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n    }else if(utilityObj.mode === \"auth\"){\r\n        // if auth is called here, just do nothing, as there is a section above that handles it,\r\n        // but if this was empty it would throw some form of error\r\n    }else if(utilityObj.mode === \"update_entry\"){\r\n        // return promise\r\n        return new Promise((resolve, reject) => {\r\n\r\n            // update entry, mainly used to update if admin finished or unfinished a tag\r\n            let currentTimestamp;\r\n\r\n            // handle types\r\n            if(utilityObj.type === \"done\"){\r\n                // update to done\r\n                // grab current timestamp\r\n                let date = new Date();\r\n                currentTimestamp = date.getTime();\r\n\r\n            }else if(utilityObj.type === \"notdone\"){\r\n                // update to not done, aka undo\r\n                currentTimestamp = 0;\r\n            }else if(utilityObj.type === \"duplicate\"){\r\n                // update to duplicate entry\r\n                currentTimestamp = -1;\r\n            }else{\r\n                // mode not supported\r\n            }\r\n\r\n            // now update db for each\r\n            utilityObj.docIdArray.forEach((item, index) => {\r\n                // debug: does item come out as the doc Id?\r\n                // console.log(item);\r\n                \r\n                namesRef.doc(item).update({\r\n                    datefinished: currentTimestamp\r\n                })\r\n                .then(function() {\r\n                    console.log(\"Document successfully written on update_entry()!\");\r\n                    resolve(true);\r\n                })\r\n                .catch(function(error) {\r\n                    console.error(\"Error writing document on update_entry(): \", error);\r\n                });\r\n\r\n            });\r\n        });\r\n    }else{\r\n        // something else encountered\r\n        console.log(\"dbUtility() was called using a non supported utilityObj mode.\");\r\n        console.log(\"supported modes are 'read_all', 'search_for', 'new_entry', 'update_entry', or 'auth'.\");\r\n        console.log(utilityObj.mode);\r\n    };\r\n\r\n};\r\n","export function textValidation(inputString, minChar, strictMode){\r\n    //this will automatically convert input text and return with validated text\r\n    //console.log(\"textValidation called with: \" + inputString);\r\n    //console.log(strictMode);\r\n\r\n    /*\r\n    //check undefined\r\n    if(inputString == undefined){\r\n        //input was undefined\r\n        return 0;\r\n    }else if(inputString == \" \"){\r\n        //input was an empty string\r\n        return 0;\r\n    }else if(inputString == \"\"){\r\n        //input was an empty string\r\n        return 0;\r\n    };*/\r\n\r\n    //1st step: check all the string to make sure it has no special characters\r\n    //this is for db security purposes, only 0-9, a-Z, and !@.,?\r\n    let outputString = regexDelete(inputString, strictMode);\r\n\r\n    //1st and half step: check and cut short if string is under the minimum character limit\r\n    let stringLength = inputString.length;\r\n    if(stringLength < minChar){\r\n        //doesnt meet requirement\r\n        return \"\";\r\n    };\r\n\r\n    //2nd step: add spaces after commas\r\n    outputString = addCommaSpaces(outputString);\r\n\r\n    //3rd step: title caps everything\r\n    outputString = titleCapsify(outputString);\r\n\r\n    //4th step: check state names and shorten to abbreviation\r\n    outputString = stateToAbbv(outputString);\r\n\r\n    //console.log(outputString);\r\n    return outputString;\r\n};\r\n\r\nfunction regexDelete(string, strictMode){\r\n    // check if strict mode enabled, set regex accordingly\r\n\r\n    let regex;\r\n    if(strictMode !== undefined || strictMode === true){\r\n        // restricted name version\r\n        regex = /\\w|\\n|\\r|\\t|\\d|[,@ /&\"']|[A-Za-zÀ-ÖØ-öø-ÿ]/g;\r\n        //console.log(\"strict\");\r\n    }else{\r\n        // regular unrestricted version\r\n        regex = /\\w|\\n|\\r|\\t|\\d|[.!,?@ /&*()#$%-=+\"']|[A-Za-zÀ-ÖØ-öø-ÿ]/g; // old: /\\w|\\n|\\r|\\t|\\d|[.!,?@ ]/g, it did not allow accented characters nor /&'\"()#$%\r\n        //console.log(\"non-strict\");\r\n    };\r\n\r\n    //check if string is empty\r\n    if(string===\"\"){\r\n        //if empty, do nothing\r\n        return \"\";\r\n    }else{\r\n        //check an entire string for valid characters, then return only those\r\n        let found = string.match(regex);\r\n\r\n        //because it returns an array of all the characters, need to compile them into\r\n        //a string, join(\"\") works but join() nor toString() works without adding commas\r\n        let compiledString = found.join(\"\");\r\n\r\n        //console.dir(compiledString);\r\n        return compiledString;\r\n    }\r\n    \r\n};\r\n\r\nfunction addCommaSpaces(inputString){\r\n    //add appropriate spacing after commas if not exist\r\n\r\n    //split spaces into array\r\n    let splitString = inputString.split(\",\");\r\n\r\n    //check length of array, 1 for no comma, 2 for one comma\r\n    if(splitString.length > 1){\r\n        //has at least one comma\r\n        let stringSelection = splitString[1];\r\n\r\n        //check if the string on 2nd word starts with a space, delete if so\r\n        if(stringSelection[0] === \" \"){\r\n            //has space already, join only with comma\r\n            splitString = splitString.join(\",\");\r\n        }else{\r\n            //doesnt have space, add one\r\n            splitString = splitString.join(\", \");\r\n        };\r\n        //console.log(splitString);\r\n        \r\n        return splitString;\r\n    } else{\r\n        //has no commas, can just return w/ no modification\r\n        return inputString;\r\n    };\r\n    \r\n};\r\n\r\nfunction titleCapsify(inputString){\r\n    //title caps first letter of each word\r\n    //console.log(inputString);\r\n\r\n    //split spaces into array\r\n    let splitString = inputString.split(\" \");\r\n\r\n    //if the following is nothing it will throw an error, so delete it\r\n    //before it throws an error, this is a temporary state before adding another word\r\n    //console.dir(splitString[splitString.length - 1]);\r\n    if(splitString[splitString.length - 1] === \"\"){\r\n        //remove it from array\r\n        splitString.pop();\r\n    };\r\n    \r\n    let combinedString = splitString.map(function(word){\r\n        //make first character uppercase\r\n        let firstChar = word[0].toUpperCase();\r\n\r\n        //delete that first lowercase character\r\n        //slice in this case actually saves the remaining char's instead\r\n        word = word.slice(1);\r\n\r\n        //combine characters into a word\r\n        word = firstChar + \"\" + word;\r\n        return word;\r\n    });\r\n\r\n    //join all words together to form full name before returning\r\n    combinedString = combinedString.join(\" \");\r\n    //console.log(combinedString);\r\n    return combinedString;\r\n};\r\n\r\nfunction stateToAbbv(inputString){\r\n    //compile a list of all state names, but not Georgia since that could be the country, so don't correct it\r\n    const stateFull = [\"Alabama\", \"Alaska\",\"Arizona\",\"Arkansas\",\"California\",\"Colorado\",\"Connecticut\",\"Delaware\",\"District of Columbia\",\"Florida\",\"Hawaii\",\"Idaho\",\"Illinois\",\"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\"Massachusetts\",\"Michigan\",\"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\"Nebraska\",\"Nevada\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\"New York\",\"North Carolina\",\"North Dakota\",\"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\"Rhode Island\",\"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\"Wisconsin\",\"Wyoming\"];\r\n    const stateAbbv = [\"AL\",\"AK\",\"AZ\",\"AR\",\"CA\",\"CO\",\"CT\",\"DE\",\"DC\",\"FL\",\"HI\",\"ID\",\"IL\",\"IN\",\"IA\",\"KS\",\"KY\",\"LA\",\"ME\",\"MD\",\"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\"NC\",\"ND\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\"];\r\n    const stateAbbvTitleCaps = [\"Al\",\"Ak\",\"Az\",\"Ar\",\"Ca\",\"Co\",\"Ct\",\"De\",\"Dc\",\"Fl\",\"Hi\",\"Id\",\"Il\",\"In\",\"Ia\",\"Ks\",\"Ky\",\"La\",\"Me\",\"Md\",\"Ma\",\"Mi\",\"Mn\",\"Ms\",\"Mo\",\"Mt\",\"Ne\",\"Nv\",\"Nh\",\"Nj\",\"Nm\",\"Ny\",\"Nc\",\"Nd\",\"Oh\",\"Ok\",\"Or\",\"Pa\",\"Ri\",\"Sc\",\"Sd\",\"Tn\",\"Tx\",\"Ut\",\"Vt\",\"Va\",\"Wa\",\"Wv\",\"Wi\",\"Wy\"];\r\n    //console.log(stateFull.length); //stateAbbvTitleCaps is just for searching purposes\r\n\r\n    //split and grab the 2nd item in array, check to see if its a state name\r\n    let splitString = inputString.split(\",\");\r\n    \r\n    // sometimes there is an escape \\r, so regex it out so it can properly validate multi tag excel inputs\r\n    let lastIndex = splitString.length - 1;\r\n    splitString[lastIndex] = splitString[lastIndex].replace(/(\\r\\n|\\n|\\r)/gm, \"\");\r\n    //console.log(splitString);\r\n    \r\n    //get rid of the first character which is a space thanks to add comma spaces\r\n    //only if splitString[1] exists\r\n    let splicedString;\r\n    if(splitString.length === 2){\r\n        //\r\n        splicedString = splitString[1].slice(1);\r\n    };\r\n    \r\n    //if the comma isnt a thing, rearrange things so they are in data format can check for state abbrev\r\n    if(splitString.length === 1){ //\"park city utah\" no comma before state\r\n        //check the last word\r\n        splitString = splitString[0].split(\" \"); //[\"park\",\"city\",\"utah\"]\r\n\r\n        //temp save last\r\n        let tempPossibleState = splitString[splitString.length - 1];\r\n\r\n        //remove last\r\n        splitString.pop(); //[\"park\",\"city\"]\r\n        \r\n        //join all\r\n        let tempJoinString = [];\r\n        tempJoinString[0] = splitString.join(\" \"); //\"park city\"\r\n        \r\n        //now need to join the first parts and leave the last part like [\"park city\", \"utah\"]\r\n        tempJoinString.push(tempPossibleState);\r\n        splitString = tempJoinString;\r\n        //console.log(tempJoinString);\r\n\r\n        splicedString = splitString[1];\r\n    };\r\n\r\n    //console.log(splicedString);\r\n    \r\n    let stateSearch = stateFull.indexOf(splicedString); //-1 if no result, # of index if match\r\n    if(stateSearch !== -1){\r\n        //found match\r\n        return splitString[0] + \", \" + stateAbbv[stateSearch];\r\n    }else{\r\n        //no match found in the statefull\r\n\r\n        //start a new search for searching stateabbv for capitalization purposes\r\n        let innerStateSearch = stateAbbvTitleCaps.indexOf(splicedString);\r\n        if(innerStateSearch !== -1){\r\n            //found inner match\r\n            return splitString[0] + \", \" + stateAbbv[innerStateSearch];\r\n        }else{\r\n            //in 2 searches, found nothing\r\n            return inputString;\r\n        };\r\n    };\r\n};","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}"],"sourceRoot":""}