{"version":3,"sources":["js/CreatePreviewImage.js"],"names":["CreatePreviewImage","data","pixelHeight","pixelWidth","tagType","colorCode","bg","img","defName","defSecond","quantity","colorCodeToClass","splitClasses","newLineContents","name","signColor","split","toLowerCase","parseFloat","height","width","xs","md","lg","className","secondLine","thirdLine","style","textAlign","margin","display","flexDirection","map","mapItem","index","key"],"mappings":"0GAAA,+DAsMeA,UAvGf,SAA4BC,GAsBxB,IAKIC,EACAC,EANAC,EA5GR,SAA0BC,GAUtB,IAAID,EAAU,CACVE,GAAI,GACJC,IAAK,aACLC,QAAS,OACTC,UAAW,WACXC,SAAU,MAmEd,OA/DiB,IAAdL,EAGCD,EAAQE,GAAK,YACO,IAAdD,GAGND,EAAQE,GAAK,eACbF,EAAQG,IAAM,cACM,IAAdF,GAGND,EAAQE,GAAK,aACbF,EAAQG,IAAM,eACM,IAAdF,GAGND,EAAQE,GAAK,cACbF,EAAQM,SAAW,MACC,IAAdL,GAGND,EAAQE,GAAK,WACbF,EAAQI,QAAU,OAClBJ,EAAQK,UAAY,8BACpBL,EAAQM,SAAW,IACC,IAAdL,GAGND,EAAQE,GAAK,YACbF,EAAQK,UAAY,SACA,IAAdJ,GAGND,EAAQE,GAAK,eACbF,EAAQG,IAAM,aACdH,EAAQK,UAAY,SACA,IAAdJ,GAGND,EAAQE,GAAK,aACbF,EAAQG,IAAM,cACdH,EAAQK,UAAY,SACA,KAAdJ,GAGND,EAAQE,GAAK,cACbF,EAAQK,UAAY,QACpBL,EAAQM,SAAW,MACC,KAAdL,GAGND,EAAQE,GAAK,aACbF,EAAQI,QAAU,oEAClBJ,EAAQK,UAAY,2EACpBL,EAAQM,SAAW,IAInBN,EAAQE,GAAK,YAIVF,EA0BOO,CAAiBV,EAAKA,KAAKI,WAEzCD,EAAQE,GAAKF,EAAQE,GAAK,4BAK1B,IAAIM,EAAe,GACfC,EAAkBZ,EAAKA,KAAKa,KAyBhC,OAtB2B,IAAxBb,EAAKA,KAAKI,aAGTO,EAAeX,EAAKA,KAAKc,UAAUC,MAAM,QAC5B,GAAK,SAAWJ,EAAa,GAAGK,cAC7CL,EAAa,GAAK,MAAQA,EAAa,GAAGK,cAE1Cf,EAAcgB,WAAWjB,EAAKA,KAAKkB,QACnChB,EAAae,WAAWjB,EAAKA,KAAKmB,OAGlClB,GAAe,GACfC,GAAc,GACdD,GAA4B,KAC5BC,GAA0B,KAE1BU,EAAkBA,EAAgBG,MAAM,OAOxC,kBAAC,IAAD,CAAKK,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,UAAU,QAEJ,IAAxBvB,EAAKA,KAAKI,WACX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAKmB,UAAYpB,EAAQE,MAEC,eAAhBF,EAAQG,MACV,yBAAKiB,UAAYpB,EAAQG,MAG7B,yBAAKiB,UAAU,gBACX,yBAAKA,UAAU,qCACTvB,EAAKA,KAAKa,MAEhB,yBAAKU,UAAU,uCACTvB,EAAKA,KAAKwB,YAEhB,yBAAKD,UAAU,uCACTvB,EAAKA,KAAKyB,cAOH,IAAxBzB,EAAKA,KAAKI,WACX,kBAAC,IAAD,CAAWsB,MAAO,CACdP,MAAOjB,EACPgB,OAAQjB,EACR0B,UAAW,SACXC,OAAQ,OACRC,QAAS,OACTC,cAAe,OAChBP,UAAYZ,EAAa,GAAK,IAAMA,EAAa,GAAK,aACrD,yBAAKe,MAAO,CAAEG,QAAS,OAAQC,cAAe,SAAUF,OAAQ,SAExDhB,EAAgBmB,KAAI,SAACC,EAASC,GAAV,OAChB,kBAAC,IAAD,CAAKV,UAAU,yBAAyBW,IAAMD,GAAUD,W","file":"static/js/11.cdac98f1.chunk.js","sourcesContent":["import React from 'react';\r\nimport { \r\n    Col,\r\n    Row,\r\n    Container\r\n} from 'react-bootstrap';\r\nimport '../css/tags.css';\r\nimport '../css/signcolor.css';\r\n\r\nfunction colorCodeToClass(colorCode){\r\n    /*\r\n    tagType obj are the classes to apply and default texts on each\r\n    bg background class, \r\n    img is the deer head logo, null-space is the default class that deletes the class\r\n    in the event that there is no deer head\r\n    defName: default Name placeholder\r\n    defSecond: default second line text placeholder\r\n    quantity: the default quantity for each tag type(unchangeable, only for info purposes)\r\n    */\r\n    let tagType = {\r\n        bg: \"\",\r\n        img: \"null-space\",\r\n        defName: \"Name\",\r\n        defSecond: \"City, ST\",\r\n        quantity: \"x2\"\r\n    };\r\n\r\n    //translate color code to image type using classes\r\n    if(colorCode === 1){\r\n                \r\n        //1: green pin no deerhead(normal nametag and default selection)\r\n        tagType.bg = \"tag-green\";\r\n    } else if(colorCode === 2){\r\n\r\n        //2: green magnet deerhead\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n    } else if(colorCode === 3){\r\n\r\n        //3: bronze magnet engraved deerhead\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvwhite-img\";\r\n    } else if(colorCode === 4){\r\n\r\n        //4: outdoor tags\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.quantity = \"x3\";\r\n    } else if(colorCode === 5){\r\n\r\n        //5: sign, add details in comments\r\n        tagType.bg = \"tag-sign\";\r\n        tagType.defName = \"Sign\";\r\n        tagType.defSecond = \"Put details in the comments\";\r\n        tagType.quantity = \"\";\r\n    } else if(colorCode === 7){\r\n\r\n        //7: repeat 1 but with title instead of city, st\r\n        tagType.bg = \"tag-green\";\r\n        tagType.defSecond = \"Title\";\r\n    } else if(colorCode === 8){\r\n\r\n        //8: repeat 2 but with title instead of city, st\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n        tagType.defSecond = \"Title\";\r\n    } else if(colorCode === 9){\r\n\r\n        //9: repeat 3 but with title instead of city, st\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvwhite-img\";\r\n        tagType.defSecond = \"Title\";\r\n    } else if(colorCode === 10){\r\n\r\n        //10: repeat 4 but with title instead of city, st\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.defSecond = \"Title\";\r\n        tagType.quantity = \"x3\";\r\n    } else if(colorCode === 11){\r\n\r\n        //11: basket check tag\r\n        tagType.bg = \"tag-basket\";\r\n        tagType.defName = \"<p style='font-size:60px;position:relative;top:-20%;'>&#8226;</p>\";\r\n        tagType.defSecond = \"<p style='font-size:19px;position:relative;bottom:30%;'>Basket Check</p>\";\r\n        tagType.quantity = \"\";\r\n    } else{\r\n\r\n        //anything else, other, details in comments\r\n        tagType.bg = \"tag-other\";\r\n    }\r\n\r\n    //return value, e.g. tagType = { bg: tag-green, img: null-space }\r\n    return tagType;\r\n};\r\n\r\n\r\nfunction CreatePreviewImage(data) {\r\n    /*\r\n    data use format for non signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        secondLine,\r\n        colorCode,\r\n        thirdLine(if it exists)\r\n    } />\r\n    -\r\n    data use format for signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        height,\r\n        width,\r\n        signColor,\r\n        attachment,\r\n        thickness\r\n    } />\r\n    */\r\n\r\n    //console.log(data); //correct injection would be e.g. data.data.colorCode\r\n    let tagType = colorCodeToClass(data.data.colorCode);\r\n    //console.log(tagType.img);\r\n    tagType.bg = tagType.bg + \"  justify-content-between\";\r\n\r\n    //if custom sign\r\n    let pixelHeight;\r\n    let pixelWidth;\r\n    let splitClasses = [];\r\n    let newLineContents = data.data.name;\r\n    //console.log(data.data.colorCode);\r\n    \r\n    if(data.data.colorCode === 5){\r\n        //grab signcolor classes\r\n        //console.log(data.data.quantity);\r\n        splitClasses = data.data.signColor.split(\" / \");\r\n        splitClasses[0] = \"color-\" + splitClasses[0].toLowerCase();\r\n        splitClasses[1] = \"bg-\" + splitClasses[1].toLowerCase();\r\n        \r\n        pixelHeight = parseFloat(data.data.height);\r\n        pixelWidth = parseFloat(data.data.width);\r\n\r\n        //do sign math\r\n        pixelHeight *= 50;\r\n        pixelWidth *= 50;\r\n        pixelHeight = pixelHeight + \"px\";\r\n        pixelWidth = pixelWidth + \"px\";\r\n\r\n        newLineContents = newLineContents.split(\"\\n\");\r\n        //console.log(newLineContents);\r\n    };\r\n    \r\n\r\n    //return page with compiled data\r\n    return (\r\n        <Col xs={12} md={6} lg={4} className=\"px-0\">\r\n            {\r\n                (data.data.colorCode !== 5) &&\r\n                <Container>\r\n                    <Row className={ tagType.bg }>\r\n                        {\r\n                            !(tagType.img === \"null-space\") &&\r\n                            <div className={ tagType.img }>\r\n                            </div>\r\n                        }\r\n                        <div className=\"title-parent\">\r\n                            <div className=\"title-text justify-content-center\">\r\n                                { data.data.name }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.secondLine }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.thirdLine }\r\n                            </div>\r\n                        </div>\r\n                    </Row>\r\n                </Container>\r\n            }\r\n            {\r\n                (data.data.colorCode === 5) &&\r\n                <Container style={{ \r\n                    width: pixelWidth,\r\n                    height: pixelHeight,\r\n                    textAlign: \"center\",\r\n                    margin: \"auto\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\"\r\n                }} className={ splitClasses[1] + \" \" + splitClasses[0] + \" bg-basic\" }>\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\", margin: \"auto\" }}>\r\n                        {\r\n                            newLineContents.map((mapItem, index) => \r\n                                <Row className=\"justify-content-center\" key={ index }>{ mapItem }</Row>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </Container>\r\n            }\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default CreatePreviewImage;"],"sourceRoot":""}