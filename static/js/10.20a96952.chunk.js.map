{"version":3,"sources":["../node_modules/warning/warning.js","../node_modules/react-bootstrap/esm/InputGroup.js","../node_modules/react-bootstrap/esm/Feedback.js","../node_modules/react-bootstrap/esm/FormContext.js","../node_modules/react-bootstrap/esm/FormControl.js","js/StatusPage.js"],"names":["warning","module","exports","InputGroup","React","forwardRef","_ref","ref","bsPrefix","size","className","_ref$as","as","Component","props","_objectWithoutPropertiesLoose","useBootstrapPrefix","createElement","_extends","classNames","InputGroupAppend","createWithBsPrefix","InputGroupPrepend","InputGroupText","displayName","Text","Radio","type","Checkbox","Append","Prepend","propTypes","PropTypes","string","isRequired","elementType","Feedback","defaultProps","FormContext","createContext","controlId","undefined","FormControl","classes","_classes","id","isValid","isInvalid","plaintext","readOnly","useContext","_classes2","_classes3","CreatePreviewImage","lazy","renderLoader","variant","animation","role","grabStatus","dateFinished","returnObj","text","class","finDaysAgo","Date","now","Math","round","StatusPage","useState","latestVersion","setLatestVersion","useEffect","localVersion","localStorage","getItem","parseInt","console","log","window","location","reload","setItem","dbUtility","mode","then","appVersion","data","color","comments","datefinished","daterequest","reqDaysAgo","attachment","signColor","signQuantity","height","width","thickness","dataRow","setDataRow","showPage","setShowPage","tagsAreDone","setTagsAreDone","searchValue","setSearchValue","adminPadding","setAdminPadding","h4Title","setH4Title","searchBarPlaceholder","setSearchBarPlaceholder","tagsNeedUpdate","statusTags","length","setDataRowAdmin","searchForString","returnResult","dataRowAdmin","adminMode","xs","to","placeholder","aria-label","aria-describedby","onChange","e","thisSearchValue","target","value","toLowerCase","onKeyPress","key","map","mapItem","index","md","disabled","onClick","tempIdArray","push","docIdArray","fallback","name","secondLine","titlecity","thirdLine","thirdline","colorCode","signcolor","requestor","requestTimestamp","floor","grabDaysAgo","quantity"],"mappings":"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","file":"static/js/10.20a96952.chunk.js","sourcesContent":["/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n    var argIndex = 0;\n    var message = 'Warning: ' +\n      format.replace(/%s/g, function() {\n        return args[argIndex++];\n      });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  }\n\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n          'message argument'\n      );\n    }\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\n\n/**\n *\n * @property {InputGroupAppend} Append\n * @property {InputGroupPrepend} Prepend\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nvar InputGroup = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"size\", \"className\", \"as\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n  return React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix, size && bsPrefix + \"-\" + size)\n  }));\n});\nvar InputGroupAppend = createWithBsPrefix('input-group-append');\nvar InputGroupPrepend = createWithBsPrefix('input-group-prepend');\nvar InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nvar InputGroupCheckbox = function InputGroupCheckbox(props) {\n  return React.createElement(InputGroupText, null, React.createElement(\"input\", _extends({\n    type: \"checkbox\"\n  }, props)));\n};\n\nvar InputGroupRadio = function InputGroupRadio(props) {\n  return React.createElement(InputGroupText, null, React.createElement(\"input\", _extends({\n    type: \"radio\"\n  }, props)));\n};\n\nInputGroup.displayName = 'InputGroup';\nInputGroup.Text = InputGroupText;\nInputGroup.Radio = InputGroupRadio;\nInputGroup.Checkbox = InputGroupCheckbox;\nInputGroup.Append = InputGroupAppend;\nInputGroup.Prepend = InputGroupPrepend;\nexport default InputGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nvar propTypes = {\n  /**\n   * Specify whether the feedback is for valid or invalid fields\n   *\n   * @type {('valid'|'invalid')}\n   */\n  type: PropTypes.string.isRequired,\n  as: PropTypes.elementType\n};\nvar defaultProps = {\n  type: 'valid'\n};\nvar Feedback = React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\nfunction (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      type = _ref.type,\n      props = _objectWithoutPropertiesLoose(_ref, [\"as\", \"className\", \"type\"]);\n\n  return React.createElement(Component, _extends({}, props, {\n    ref: ref,\n    className: classNames(className, type && type + \"-feedback\")\n  }));\n});\nFeedback.displayName = 'Feedback';\nFeedback.propTypes = propTypes;\nFeedback.defaultProps = defaultProps;\nexport default Feedback;","import React from 'react';\nvar FormContext = React.createContext({\n  controlId: undefined\n});\nexport default FormContext;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport warning from 'warning';\nimport Feedback from './Feedback';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar FormControl = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      type = _ref.type,\n      size = _ref.size,\n      id = _ref.id,\n      className = _ref.className,\n      isValid = _ref.isValid,\n      isInvalid = _ref.isInvalid,\n      plaintext = _ref.plaintext,\n      readOnly = _ref.readOnly,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'input' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"type\", \"size\", \"id\", \"className\", \"isValid\", \"isInvalid\", \"plaintext\", \"readOnly\", \"as\"]);\n\n  var _useContext = useContext(FormContext),\n      controlId = _useContext.controlId;\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-control');\n  var classes;\n\n  if (plaintext) {\n    var _classes;\n\n    classes = (_classes = {}, _classes[bsPrefix + \"-plaintext\"] = true, _classes);\n  } else if (type === 'file') {\n    var _classes2;\n\n    classes = (_classes2 = {}, _classes2[bsPrefix + \"-file\"] = true, _classes2);\n  } else {\n    var _classes3;\n\n    classes = (_classes3 = {}, _classes3[bsPrefix] = true, _classes3[bsPrefix + \"-\" + size] = size, _classes3);\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(controlId == null || !id, '`controlId` is ignored on `<FormControl>` when `id` is specified.') : void 0;\n  return React.createElement(Component, _extends({}, props, {\n    type: type,\n    ref: ref,\n    readOnly: readOnly,\n    id: id || controlId,\n    className: classNames(className, classes, isValid && \"is-valid\", isInvalid && \"is-invalid\")\n  }));\n});\nFormControl.displayName = 'FormControl';\nFormControl.Feedback = Feedback;\nexport default FormControl;","import React, { \r\n    useState, \r\n    useEffect,\r\n    Suspense,\r\n    lazy\r\n} from 'react';\r\nimport { \r\n    Container, \r\n    Button,\r\n    Row,\r\n    Col,\r\n    Spinner,\r\n    InputGroup,\r\n    FormControl\r\n} from 'react-bootstrap';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { dbUtility } from './dbUtility.js';\r\nimport '../css/nav.css';\r\nimport '../css/tags.css';\r\nimport '../css/admin.css';\r\n\r\n\r\n\r\n\r\n\r\n// lazy loads\r\nconst CreatePreviewImage = lazy( () => import('./CreatePreviewImage.js'));\r\n\r\n\r\n// lazy load spinner\r\nconst renderLoader = (\r\n    <Spinner variant=\"danger\" animation=\"border\" role=\"status\">\r\n      <span className=\"sr-only\">\r\n        Loading...\r\n      </span>\r\n    </Spinner>\r\n  );\r\n\r\n\r\n// getting amount of days ago from current to requested date\r\nconst grabDaysAgo = ((requestTimestamp) => {\r\n    // this was once a global thing, but it was having negative day errors when going live build\r\n    let currentTimestamp = Date.now();\r\n\r\n    // then for each item in data row, grab and assign the following\r\n    let reqDaysAgo = (currentTimestamp - requestTimestamp) / 8640000;\r\n    return((Math.floor(reqDaysAgo)) / 10);\r\n});\r\n\r\n\r\n// getting status class and accompanying text\r\nconst grabStatus = (dateFinished => {\r\n    let returnObj = {};\r\n    if(dateFinished === 0){\r\n        // date finished is 0 which means unfinished\r\n        returnObj.text = \"Still Working...\";\r\n        returnObj.class = \"status-yellow\";\r\n        return returnObj;\r\n    }else if(dateFinished === -1){\r\n        // -1 indicates a marked for duplicate entry\r\n        returnObj.text = \"Marked as Duplicate\";\r\n        returnObj.class = \"status-red\";\r\n        return returnObj;\r\n    }else{\r\n        let currentTimestamp = Date.now();\r\n        \r\n        // date not 0, which means done, so get how many days ago done\r\n\r\n        // how many days ago?\r\n        let finDaysAgo = (currentTimestamp - dateFinished) / 8640000;\r\n        finDaysAgo = Math.round(finDaysAgo) / 10;\r\n\r\n        returnObj.text = \"Finished \" + finDaysAgo + \" Days Ago!\";\r\n        returnObj.class = \"status-green\";\r\n        return returnObj;\r\n    };\r\n});\r\n\r\n\r\n\r\n\r\n\r\nfunction StatusPage(props){\r\n    // ---------- VERSION CONTROL ----------\r\n    const[latestVersion, setLatestVersion] = useState(-1);\r\n    useEffect(() => {\r\n        // database came back with version\r\n\r\n        // grab localStorage\r\n        let localVersion = localStorage.getItem(\"version\");\r\n        localVersion = parseInt(localVersion);\r\n        if((localVersion !== latestVersion) && (latestVersion !== -1)){\r\n            console.log(\"wrong local version: \" + localVersion + \" of latest: \" + latestVersion);\r\n            // if versions don't match(and it isn't the initial state of -1), force refresh\r\n            window.location.reload(true);\r\n            \r\n            // update local\r\n            localStorage.setItem(\"version\", latestVersion);\r\n        }else if(localVersion === latestVersion){\r\n            console.log(\"running latest version\");\r\n        };\r\n    },[latestVersion]);\r\n\r\n    // grab appversion from \"appVersion\" tag in database\r\n    dbUtility({\r\n        mode: \"get_app_version\"\r\n    }).then((appVersion) => {\r\n        appVersion = parseInt(appVersion);\r\n        setLatestVersion(appVersion);\r\n    });\r\n\r\n\r\n    // debug: props.adminMode is true or false, props.dataRowAdmin would be the dataRowAdmin\r\n    // console.log(props);\r\n\r\n    // tag rows of data, these MUST be filled with the data type or else it will freak out\r\n    const[dataRow, setDataRow] = useState([{\r\n        id: 0,\r\n        data: {\r\n            color: \"\",\r\n            comments: \"\",\r\n            datefinished: 0,\r\n            daterequest: 0,\r\n            reqDaysAgo: 0,\r\n            attachment: \"\",\r\n            signColor: \"White / Green\",\r\n            signQuantity: 1,\r\n            height: 1,\r\n            width: 1,\r\n            thickness: \"\"\r\n        }\r\n    }]);\r\n\r\n    // this is to show and hide a load spinner, for some reason suspense isn't working with the tags not showing up\r\n    const[showPage, setShowPage] = useState(false);\r\n\r\n    // display all tags system done tag\r\n    const[tagsAreDone, setTagsAreDone] = useState(false);\r\n\r\n    // search value\r\n    const[searchValue, setSearchValue] = useState(\"\");\r\n\r\n    // container width padding, empty for normal mode, \"px-0\" for admin mode\r\n    const[adminPadding, setAdminPadding] = useState(\"\");\r\n\r\n    // h4 title\r\n    const[h4Title, setH4Title] = useState(\"STATUS for UNFINISHED TAGS:\");\r\n\r\n    // search bar placeholder\r\n    const[searchBarPlaceholder, setSearchBarPlaceholder] = useState(\"Search Already Ordered Tags\");\r\n\r\n    // function for done or undo button clicked, only on admin page\r\n    const tagsNeedUpdate = () => {\r\n        // immediately set the loader\r\n        setShowPage(false);\r\n        \r\n\r\n        // check if something was searched\r\n        if(searchValue === \"\"){\r\n            // empty string means no search query, so just read all mode\r\n\r\n            // read everything again\r\n            dbUtility({\r\n                mode: \"read_all\"\r\n            })\r\n            .then((statusTags) => {\r\n                // debug: this is what the promise resolved from in dbUtility()\r\n                // console.log(statusTags);\r\n\r\n                // setDataRow to the value of the db read\r\n                setDataRow(statusTags);\r\n                \r\n\r\n                // if statusTags are empty, set the tags to show\r\n                if(statusTags.length === 0){\r\n                    setTagsAreDone(true);\r\n                }\r\n\r\n                // hide manual non suspense spinner\r\n                setShowPage(true);\r\n\r\n                // update lift state up for admin page\r\n                props.setDataRowAdmin(statusTags);\r\n            });\r\n            \r\n        }else{\r\n            // anything else means search query, so search for mode\r\n            // console.log(searchValue);\r\n\r\n            // immediately show loader spinner\r\n            setH4Title(renderLoader);\r\n\r\n            // this is only for the admin page\r\n            dbUtility({\r\n                mode: \"read_all\"\r\n            })\r\n            .then((statusTags) => {\r\n                // update lift state up for admin page\r\n                props.setDataRowAdmin(statusTags);\r\n\r\n            })\r\n            .then(() => {\r\n\r\n                // this is for the status page, but only when it is on admin mode\r\n                dbUtility({\r\n                    mode: \"search_for\",\r\n                    searchForString: searchValue\r\n                }).then((returnResult) => {\r\n                    // returnResult is an array of documents that match\r\n                    setDataRow(returnResult);\r\n    \r\n                    \r\n                }).then(() => {\r\n                    // show result\r\n                    setShowPage(true);\r\n\r\n                    // immediately show loader spinner\r\n                    setH4Title(\"Results for: \" + searchValue);\r\n                });\r\n            });\r\n\r\n        };\r\n\r\n        \r\n    };\r\n\r\n\r\n    // run once only on mount\r\n    useEffect(() => {\r\n        \r\n\r\n        // grab all the unfinished tags using dbUtility promise\r\n        dbUtility({\r\n            mode: \"read_all\"\r\n        })\r\n        .then((statusTags) => {\r\n            // debug: this is what the promise resolved from in dbUtility()\r\n            // console.log(statusTags);\r\n\r\n            // setDataRow to the value of the db read\r\n            // a console.log here will NOT work!\r\n            setDataRow(statusTags);\r\n\r\n            // if statusTags are empty, set the tags to show\r\n            if(statusTags.length === 0){\r\n                setTagsAreDone(true);\r\n            }\r\n\r\n            // hide manual non suspense spinner\r\n            setShowPage(true);\r\n        });\r\n    },[]);\r\n\r\n    // run when dataRowAdmin updates\r\n    useEffect(() => {\r\n        // debug: did passing state down work?\r\n        // console.log(\"456\");\r\n\r\n        // now update itself to reflect changes\r\n        dbUtility({\r\n            mode: \"read_all\"\r\n        })\r\n        .then((statusTags) => {\r\n            // debug: this is what the promise resolved from in dbUtility()\r\n            // console.log(statusTags);\r\n\r\n            // setDataRow to the value of the db read\r\n            // a console.log here will NOT work!\r\n            setDataRow(statusTags);\r\n\r\n            // if statusTags are empty, set the tags to show\r\n            if(statusTags.length === 0){\r\n                setTagsAreDone(true);\r\n            }\r\n\r\n            // hide manual non suspense spinner\r\n            setShowPage(true);\r\n        });\r\n    },[props.dataRowAdmin]);\r\n\r\n\r\n    useEffect(() => {\r\n        // set h4 title and search bar placeholder on adminmode\r\n        if(props.adminMode){\r\n            setH4Title(\"Edit Individual Tag Status\");\r\n            setSearchBarPlaceholder(\"Search for Specific Tags\");\r\n            setAdminPadding(\"px-0\");\r\n        }\r\n    },[props.adminMode]);\r\n\r\n\r\n    useEffect(() => {\r\n        // console.log(dataRow);\r\n    },[dataRow]);\r\n\r\n\r\n    // return\r\n    return (\r\n        <Container className={ adminPadding }>\r\n            <Row className=\"justify-content-between mt-1 nav-h4-bar-bg print-hide\">\r\n                {\r\n                    !props.adminMode &&\r\n                    <Col xs=\"auto\" className=\"p-0\">\r\n                        <NavLink to=\"/\">\r\n                            <Button>\r\n                                BACK\r\n                            </Button>\r\n                        </NavLink>\r\n                    </Col>\r\n                }\r\n                <Col xs=\"auto\">\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        { h4Title }\r\n                    </h4>\r\n                </Col>\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                <InputGroup id=\"status-search-bar\">\r\n                    <FormControl\r\n                        placeholder={ searchBarPlaceholder }\r\n                        aria-label=\"Search\"\r\n                        aria-describedby=\"basic-addon1\"\r\n                        id=\"status-search-bar-inner\"\r\n                        onChange={ (e) => {\r\n                            // on value change set searchValue to string\r\n                            let thisSearchValue = e.target.value;\r\n\r\n                            // lower casify it\r\n                            thisSearchValue = thisSearchValue.toLowerCase();\r\n\r\n                            setSearchValue(thisSearchValue);\r\n                        }}\r\n                        onKeyPress={ (e) => {\r\n                            if(e.key === 'Enter'){\r\n                                // if enter was pressed\r\n                                // console.log(searchValue);\r\n\r\n                                // if search value is empty, reset\r\n                                if(searchValue === \"\"){\r\n                                    // set the h4 title\r\n                                    setH4Title(\"Edit Individual Tag Status\");\r\n\r\n                                    dbUtility({\r\n                                        mode: \"read_all\"\r\n                                    })\r\n                                    .then((statusTags) => {\r\n                                        // debug: this is what the promise resolved from in dbUtility()\r\n                                        // console.log(statusTags);\r\n                            \r\n                                        // setDataRow to the value of the db read\r\n                                        // a console.log here will NOT work!\r\n                                        setDataRow(statusTags);\r\n                            \r\n                                        // if statusTags are empty, set the tags to show\r\n                                        if(statusTags.length === 0){\r\n                                            setTagsAreDone(true);\r\n                                        }\r\n                            \r\n                                        // hide manual non suspense spinner\r\n                                        setShowPage(true);\r\n                                    });\r\n                                }else{\r\n                                    // immediately show loader spinner\r\n                                    setH4Title(renderLoader);\r\n    \r\n    \r\n                                    // search using dbUtility\r\n                                    dbUtility({\r\n                                        mode: \"search_for\",\r\n                                        searchForString: searchValue\r\n                                    }).then((returnResult) => {\r\n                                        // sort by not done first, so admin page is easier to match tags\r\n                                        console.log(returnResult);\r\n\r\n                                        // returnResult is an array of documents that match\r\n                                        setDataRow(returnResult);\r\n    \r\n                                        // set the h4 title\r\n                                        setH4Title(\"Results for: \" + searchValue);\r\n                                    });\r\n                                };\r\n                            }\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n                </Col>\r\n            </Row>\r\n            {\r\n            (!showPage) &&\r\n            <Row>\r\n                <Spinner variant=\"danger\" animation=\"border\" role=\"status\">\r\n                    <span className=\"sr-only\">\r\n                        Loading...\r\n                    </span>\r\n                </Spinner>\r\n            </Row>\r\n            }\r\n            {\r\n                (tagsAreDone && !props.adminMode) &&\r\n                <Row className=\"justify-content-center mt-2\">\r\n                    <h5 className=\"green-text mt-2\">All tags in the system are done.</h5>\r\n                </Row>\r\n            }\r\n            {\r\n                showPage &&\r\n                dataRow.map((mapItem, index) => \r\n                    <Row className=\"mt-1 justify-content-between status-row\" key={ \"status-\" + mapItem.id }>\r\n                        {\r\n                            props.adminMode &&\r\n                            <Col xs={ 12 } md={ 1 } className=\"px-0\">\r\n                                <Row className=\"justify-content-center mt-1\">\r\n                                    <Col xs=\"auto\">\r\n                                        <Button \r\n                                            variant=\"success\" \r\n                                            className=\"admin-change-status-button\"\r\n                                            disabled={ \r\n                                                grabStatus(mapItem.data.datefinished).class === \"status-green\" ? true : false \r\n                                            }\r\n                                            onClick={ () => {\r\n                                                // update the entry with DONE\r\n                                                let tempIdArray = [];\r\n                                                tempIdArray.push(mapItem.id);\r\n                                                dbUtility({\r\n                                                    mode: \"update_entry\",\r\n                                                    type: \"done\",\r\n                                                    docIdArray: tempIdArray\r\n                                                }).then(() => {\r\n                                                    // somehow need to re-update\r\n\r\n                                                    tagsNeedUpdate();\r\n                                                });\r\n                                            }}>\r\n                                            &#10004;\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"justify-content-center mt-1\">\r\n                                    <Col xs=\"auto\">\r\n                                        <Button \r\n                                            variant=\"danger\" \r\n                                            className=\"admin-change-status-button\"\r\n                                            disabled={ \r\n                                                grabStatus(mapItem.data.datefinished).class === \"status-green\" ? true : false \r\n                                            }\r\n                                            onClick={ () => {\r\n                                                // update the entry with DONE\r\n                                                let tempIdArray = [];\r\n                                                tempIdArray.push(mapItem.id);\r\n                                                dbUtility({\r\n                                                    mode: \"update_entry\",\r\n                                                    type: \"duplicate\",\r\n                                                    docIdArray: tempIdArray\r\n                                                }).then(() => {\r\n                                                    // somehow need to re-update\r\n\r\n                                                    tagsNeedUpdate();\r\n                                                });\r\n                                            }}>\r\n                                            &#x2398;\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                                <Row className=\"justify-content-center mt-1\">\r\n                                    <Col xs=\"auto\">\r\n                                        <Button \r\n                                            variant=\"warning\" \r\n                                            className=\"admin-change-status-button\"\r\n                                            disabled={ \r\n                                            grabStatus(mapItem.data.datefinished).class === \"status-yellow\" ? true : false \r\n                                        }\r\n                                        onClick={ () => {\r\n                                            // debug: grab id of item clicked on\r\n                                            // console.log(mapItem.id);\r\n                                            let tempIdArray = [];\r\n                                            tempIdArray.push(mapItem.id);\r\n\r\n                                            // update the entry with UNDO / notdone\r\n                                            dbUtility({\r\n                                                mode: \"update_entry\",\r\n                                                type: \"notdone\",\r\n                                                docIdArray: tempIdArray\r\n                                            }).then(() => {\r\n                                                // somehow need to re-update\r\n                                                tagsNeedUpdate();\r\n                                            });\r\n                                        }}>\r\n                                            &#10226;\r\n                                        </Button>\r\n                                    </Col>\r\n                                </Row>\r\n                            </Col>\r\n                        }\r\n                        <Col xs={ 12 } md={ props.adminMode ? 5 : 6 } className=\"px-0\">\r\n                            <Suspense fallback={ renderLoader }>\r\n                                {\r\n                                    (mapItem.data.color !== 5) &&\r\n                                    <CreatePreviewImage data={{ \r\n                                        name: mapItem.data.name,\r\n                                        secondLine: mapItem.data.titlecity,\r\n                                        thirdLine: mapItem.data.thirdline,\r\n                                        colorCode: mapItem.data.color\r\n                                    }} />\r\n                                }\r\n                                {\r\n                                    (mapItem.data.color === 5) &&\r\n                                    <CreatePreviewImage data={{ \r\n                                        name: mapItem.data.name,\r\n                                        colorCode: 5,\r\n                                        signColor: mapItem.data.signcolor,\r\n                                        attachment: mapItem.data.attachment,\r\n                                        height: mapItem.data.height,\r\n                                        width: mapItem.data.width\r\n                                    }} />\r\n                                }\r\n                            </Suspense>\r\n                        </Col>\r\n                        <Col xs={ 12 } md={ 4 } className=\"px-0\">\r\n                            <Row>\r\n                                <Col>\r\n                                    <p className=\"status-b-col-text\">Requestor: { mapItem.data.requestor }</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p className=\"status-b-col-text\">Requested: { grabDaysAgo(mapItem.data.daterequest) } Days Ago</p>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    {\r\n                                        (mapItem.data.color !== 5) &&\r\n                                        <p className=\"status-b-col-text\">Quantity: { mapItem.data.quantity }</p>\r\n                                    }\r\n                                </Col>\r\n                            </Row>\r\n                            <Row>\r\n                                <Col>\r\n                                    <p className=\"status-b-col-text\">Comments: { mapItem.data.comments }</p>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n                        <Col xs={ 12 } md={ 2 } className={ grabStatus(mapItem.data.datefinished).class }>\r\n                            <p>STATUS: { grabStatus(mapItem.data.datefinished).text }</p>\r\n                        </Col>\r\n                    </Row>\r\n                )\r\n            }\r\n        </Container>\r\n    );\r\n  }\r\n  \r\n  export default StatusPage;"],"sourceRoot":""}