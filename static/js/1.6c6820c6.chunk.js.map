{"version":3,"sources":["js/CreatePreviewImage.js","js/dbUtility.js","js/textValidation.js"],"names":["CreatePreviewImage","data","pixelHeight","pixelWidth","tagType","colorCode","bg","img","defName","defSecond","quantity","colorCodeToClass","splitClasses","newLineContents","name","signColor","split","toLowerCase","parseFloat","height","width","xs","md","lg","className","secondLine","thirdLine","style","textAlign","margin","display","flexDirection","map","mapItem","index","key","namesRef","promiseReturn","loginAs","user","pass","Promise","resolve","reject","firebase","auth","setPersistence","Auth","Persistence","NONE","then","signInWithEmailAndPassword","catch","error","errorCode","code","errorMessage","message","msg","checkAuth","onAuthStateChanged","console","log","email","dbUtility","utilityObj","apps","initializeApp","apiKey","authDomain","projectId","db","firestore","collection","sqrtNonPattern","Math","sqrt","mode","authUser","authPass","returned","where","get","querySnapshot","forEach","doc","findIndex","obj","id","push","searchForString","writeData","arrayItem","tagName","tagRequestor","requestor","prependNameArray","prependRequestorArray","nameArray","requestorArray","unshift","currentTimestamp","Date","getTime","color","add","namearray","attachment","signcolor","signquantity","signQuantity","thickness","requestorarray","comments","daterequest","datefinished","titlecity","thirdline","type","date","docIdArray","item","update","textValidation","inputString","minChar","outputString","string","match","join","regexDelete","length","splicedString","stateAbbv","splitString","slice","tempPossibleState","pop","tempJoinString","stateSearch","indexOf","innerStateSearch","stateToAbbv","combinedString","word","firstChar","toUpperCase","titleCapsify","stringSelection","addCommaSpaces"],"mappings":"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","file":"static/js/1.6c6820c6.chunk.js","sourcesContent":["import React from 'react';\r\nimport { \r\n    Col,\r\n    Row,\r\n    Container\r\n} from 'react-bootstrap';\r\nimport '../css/tags.css';\r\nimport '../css/signcolor.css';\r\n\r\nfunction colorCodeToClass(colorCode){\r\n    /*\r\n    tagType obj are the classes to apply and default texts on each\r\n    bg background class, \r\n    img is the deer head logo, null-space is the default class that deletes the class\r\n    in the event that there is no deer head\r\n    defName: default Name placeholder\r\n    defSecond: default second line text placeholder\r\n    quantity: the default quantity for each tag type(unchangeable, only for info purposes)\r\n    */\r\n    let tagType = {\r\n        bg: \"\",\r\n        img: \"null-space\",\r\n        defName: \"Name\",\r\n        defSecond: \"City, ST\",\r\n        quantity: \"x2\"\r\n    };\r\n\r\n    //translate color code to image type using classes\r\n    if(colorCode === 1){\r\n                \r\n        //1: green pin no deerhead(normal nametag and default selection)\r\n        tagType.bg = \"tag-green\";\r\n    } else if(colorCode === 2){\r\n\r\n        //2: green magnet deerhead\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n    } else if(colorCode === 3){\r\n\r\n        //3: bronze magnet engraved deerhead\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvwhite-img\";\r\n    } else if(colorCode === 4){\r\n\r\n        //4: outdoor tags\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.quantity = \"x3\";\r\n    } else if(colorCode === 5){\r\n\r\n        //5: sign, add details in comments\r\n        tagType.bg = \"tag-sign\";\r\n        tagType.defName = \"Sign\";\r\n        tagType.defSecond = \"Put details in the comments\";\r\n        tagType.quantity = \"\";\r\n    } else if(colorCode === 7){\r\n\r\n        //7: repeat 1 but with title instead of city, st\r\n        tagType.bg = \"tag-green\";\r\n        tagType.defSecond = \"Title\";\r\n    } else if(colorCode === 8){\r\n\r\n        //8: repeat 2 but with title instead of city, st\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n        tagType.defSecond = \"Title\";\r\n    } else if(colorCode === 9){\r\n\r\n        //9: repeat 3 but with title instead of city, st\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvwhite-img\";\r\n        tagType.defSecond = \"Title\";\r\n    } else if(colorCode === 10){\r\n\r\n        //10: repeat 4 but with title instead of city, st\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.defSecond = \"Title\";\r\n        tagType.quantity = \"x3\";\r\n    } else if(colorCode === 11){\r\n\r\n        //11: basket check tag\r\n        tagType.bg = \"tag-basket\";\r\n        tagType.defName = \"<p style='font-size:60px;position:relative;top:-20%;'>&#8226;</p>\";\r\n        tagType.defSecond = \"<p style='font-size:19px;position:relative;bottom:30%;'>Basket Check</p>\";\r\n        tagType.quantity = \"\";\r\n    } else{\r\n\r\n        //anything else, other, details in comments\r\n        tagType.bg = \"tag-other\";\r\n    }\r\n\r\n    //return value, e.g. tagType = { bg: tag-green, img: null-space }\r\n    return tagType;\r\n};\r\n\r\n\r\nfunction CreatePreviewImage(data) {\r\n    /*\r\n    data use format for non signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        secondLine,\r\n        colorCode,\r\n        thirdLine(if it exists)\r\n    } />\r\n    -\r\n    data use format for signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        height,\r\n        width,\r\n        signColor,\r\n        attachment,\r\n        thickness\r\n    } />\r\n    */\r\n\r\n    //console.log(data); //correct injection would be e.g. data.data.colorCode\r\n    let tagType = colorCodeToClass(data.data.colorCode);\r\n    //console.log(tagType.img);\r\n    tagType.bg = tagType.bg + \"  justify-content-between\";\r\n\r\n    //if custom sign\r\n    let pixelHeight;\r\n    let pixelWidth;\r\n    let splitClasses = [];\r\n    let newLineContents = data.data.name;\r\n    //console.log(data.data.colorCode);\r\n    \r\n    if(data.data.colorCode === 5){\r\n        //grab signcolor classes\r\n        //console.log(data.data.quantity);\r\n        splitClasses = data.data.signColor.split(\" / \");\r\n        splitClasses[0] = \"color-\" + splitClasses[0].toLowerCase();\r\n        splitClasses[1] = \"bg-\" + splitClasses[1].toLowerCase();\r\n        \r\n        pixelHeight = parseFloat(data.data.height);\r\n        pixelWidth = parseFloat(data.data.width);\r\n\r\n        //do sign math\r\n        pixelHeight *= 50;\r\n        pixelWidth *= 50;\r\n        pixelHeight = pixelHeight + \"px\";\r\n        pixelWidth = pixelWidth + \"px\";\r\n\r\n        newLineContents = newLineContents.split(\"\\n\");\r\n        //console.log(newLineContents);\r\n    };\r\n    \r\n\r\n    //return page with compiled data\r\n    return (\r\n        <Col xs={12} md={6} lg={4} className=\"px-0\">\r\n            {\r\n                (data.data.colorCode !== 5) &&\r\n                <Container>\r\n                    <Row className={ tagType.bg }>\r\n                        {\r\n                            !(tagType.img === \"null-space\") &&\r\n                            <div className={ tagType.img }>\r\n                            </div>\r\n                        }\r\n                        <div className=\"title-parent\">\r\n                            <div className=\"title-text justify-content-center\">\r\n                                { data.data.name }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.secondLine }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.thirdLine }\r\n                            </div>\r\n                        </div>\r\n                    </Row>\r\n                </Container>\r\n            }\r\n            {\r\n                (data.data.colorCode === 5) &&\r\n                <Container style={{ \r\n                    width: pixelWidth,\r\n                    height: pixelHeight,\r\n                    textAlign: \"center\",\r\n                    margin: \"auto\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\"\r\n                }} className={ splitClasses[1] + \" \" + splitClasses[0] + \" bg-basic\" }>\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\", margin: \"auto\" }}>\r\n                        {\r\n                            newLineContents.map((mapItem, index) => \r\n                                <Row className=\"justify-content-center\" key={ index }>{ mapItem }</Row>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </Container>\r\n            }\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default CreatePreviewImage;","import firebase from 'firebase/app';\r\nimport 'firebase/auth';\r\nimport 'firebase/firestore';\r\n\r\n//highest order variables\r\nlet namesRef; //db reference\r\nlet promiseReturn;\r\n\r\nfunction loginAs(user, pass){\r\n    return new Promise((resolve, reject) => {\r\n        \r\n        firebase.auth().setPersistence(firebase.auth.Auth.Persistence.NONE)\r\n        .then(function() {\r\n            //persistence types:\r\n            //.NONE = reload will not keep session\r\n            //.SESSION = reload will keep session, but closing and reopening will not\r\n            \r\n            return firebase.auth().signInWithEmailAndPassword(user, pass);\r\n        })\r\n        .then(function(){\r\n            resolve(true);\r\n        })\r\n        .catch(function(error) {\r\n            // Handle Errors here.\r\n            let errorCode = error.code;\r\n            let errorMessage = error.message;\r\n            //console.log(errorCode + \" -1- \" + errorMessage);\r\n\r\n            reject({\r\n                code: errorCode,\r\n                msg: errorMessage\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\nfunction checkAuth(){\r\n    //check auth\r\n    return new Promise((resolve, reject) => {\r\n        firebase.auth().onAuthStateChanged(function(user) {\r\n            if(user){\r\n                // User is signed in.\r\n                console.log(\"checkAuth() passed with user: \" + user.email);\r\n        \r\n                resolve(user.email);\r\n            }else{\r\n                // No user is signed in.\r\n                console.log(\"checkAuth() failed: no credentials.\");\r\n            };\r\n        });\r\n\r\n    });\r\n};\r\n\r\nexport function dbUtility(utilityObj){\r\n    /*\r\n    this is a master use-all use-anywhere connect to db PROMISE\r\n    so if you are switching from firebase to something else, you know\r\n    exactly what needs to be replaced\r\n    -\r\n    its a promise because it relies on waiting on the authentication mainly\r\n    so can use it like dbUtility({mode:\"\"}).then(() => { //do stuff here });\r\n    -\r\n    utilityObj has the following data structure for its modes:\r\n    {\r\n        mode: \"auth\",\r\n        authUser: \"\",\r\n        authPass: \"\"\r\n    }\r\n    {\r\n        mode: \"new_entry\",\r\n        writeData: [{name:,requestor:,etc},{},//etc]\r\n    }\r\n    {\r\n        mode: \"search_for\", //returns array full of found tags\r\n        searchForString: \"string to search\"\r\n    }\r\n    {\r\n        mode: \"read_all\" //returns array full of objects full of tags\r\n    }\r\n    {\r\n        mode: \"update_entry\",\r\n        type: \"done\" or \"notdone\"\r\n        docIdArray: [\"id\",\"id\",\"id\",//etc]\r\n    }\r\n    */\r\n   \r\n\r\n   //if not yet initialized, initialize\r\n   //debug: typeof firebase.apps[0] comes undefined if not previously init, or object if init\r\n   //console.dir(typeof firebase.apps[0]);\r\n   if(typeof firebase.apps[0] == \"undefined\"){\r\n       //not init yet\r\n       \r\n       //firebase init using firestore\r\n       firebase.initializeApp({\r\n           apiKey: 'AIzaSyA1uPdDnmLSWqkuEkFlGH5YF7UvxvszceU',\r\n           authDomain: 'nametags-4019a.firebaseapp.com',\r\n           projectId: 'nametags-4019a'\r\n        });\r\n        \r\n        //creation of db\r\n        const db = firebase.firestore();\r\n        namesRef = db.collection(\"names\");\r\n        \r\n        //db authenticate as anon\r\n        //scramble\r\n        let sqrtNonPattern = Math.sqrt(4356);\r\n        sqrtNonPattern = \"iamanonymous\" + sqrtNonPattern;\r\n        sqrtNonPattern = sqrtNonPattern + \"6\";\r\n        loginAs(\"anonymous@deervalley.com\",sqrtNonPattern);\r\n        \r\n    }\r\n    \r\n\r\n    //authenticate\r\n    if(utilityObj.mode === \"auth\"){\r\n        return new Promise((resolve, reject) => {\r\n            //first login, must wait so it is a promise\r\n            loginAs(utilityObj.authUser, utilityObj.authPass).then( () => {\r\n                //now we need to use check auth in order to grab the user\r\n                checkAuth().then( returned => {\r\n                    //only if user is admin, resolve\r\n                    //console.log(\"pio \" + returned);\r\n                    resolve(returned);\r\n                }).catch( error => {\r\n                    \r\n                });\r\n            }).catch( error => {\r\n                reject(error);\r\n            });\r\n        });\r\n    };\r\n    \r\n\r\n    //mode check\r\n    if(utilityObj.mode === \"read_all\"){\r\n        /*\r\n        read all mode, but because of read limits on google firebase free version, only\r\n        grab the unfinished tags\r\n        -\r\n        set return type to array before pushing\r\n        */\r\n        promiseReturn = [];\r\n        \r\n        //return promise\r\n        return new Promise((resolve, reject) => {\r\n\r\n            //check auth before getting doc data\r\n            checkAuth().then(function(){\r\n                namesRef.where(\"datefinished\", \"==\", 0).get().then(function(querySnapshot){\r\n                    querySnapshot.forEach(function(doc){\r\n                        //for each document found as unfinished, array push the following\r\n\r\n                        //search for any matching id's in promiseReturn\r\n                        //this section is because for some reason it was duplicating, so now it only does one once\r\n                        let priorExistingId = promiseReturn.findIndex(obj => obj.id === doc.id);\r\n                        if(priorExistingId === -1){\r\n                            //-1 means it did not find a prior id, so go ahead\r\n                            //array push the following\r\n                            promiseReturn.push({\r\n                                id: doc.id,\r\n                                data: doc.data()\r\n                            });\r\n                        }else{\r\n                            //anything else means if found something prior, so do nothing\r\n                        }\r\n                    });\r\n                    resolve(promiseReturn);\r\n                });\r\n            });\r\n\r\n        });\r\n\r\n\r\n    }else if(utilityObj.mode === \"search_for\"){\r\n        //search mode\r\n        let promiseReturn = [];\r\n\r\n        //return promise\r\n        return new Promise((resolve, reject) => {\r\n            //check auth before getting doc data\r\n            checkAuth().then(function(){\r\n                //grab results where name is being searched for\r\n                namesRef.where(\"namearray\", \"array-contains-any\", [utilityObj.searchForString]).get().then(function(querySnapshot){\r\n                    querySnapshot.forEach(function(doc){\r\n                        //for each document found, array push the following\r\n                        promiseReturn.push({\r\n                            id: doc.id,\r\n                            data: doc.data()\r\n                        });\r\n                    });\r\n                }).then(function(){\r\n                    //now grab all results where requestor could be searched for, this allows duplicate results\r\n                    namesRef.where(\"requestorarray\", \"array-contains-any\", [utilityObj.searchForString]).get().then(function(querySnapshot){\r\n                        querySnapshot.forEach(function(doc){\r\n                            //for each document found\r\n                            \r\n                            //search for any matching id's in promiseReturn\r\n                            let priorExistingId = promiseReturn.findIndex(obj => obj.id === doc.id);\r\n                            if(priorExistingId === -1){\r\n                                //-1 means it did not find a prior id, so go ahead\r\n                                //array push the following\r\n                                promiseReturn.push({\r\n                                    id: doc.id,\r\n                                    data: doc.data()\r\n                                });\r\n                            }else{\r\n                                //anything else means if found something prior, so do nothing\r\n                            }\r\n                        });\r\n                        resolve(promiseReturn);\r\n                    });\r\n                });\r\n            });\r\n        });\r\n    }else if(utilityObj.mode === \"new_entry\"){\r\n        /*\r\n        used for new entries\r\n        data in:\r\n        array[{name:\"\",requestor:\"\",secondLine:\"\",thirdLine:\"\",requestor:\"\",comments:\"\"},{},{},etc]\r\n        -\r\n        set return type to array before pushing\r\n        */\r\n        promiseReturn = [];\r\n\r\n        //debug: what does writeData come in as\r\n        //console.log(utilityObj.writeData);\r\n\r\n        //return promise\r\n        return new Promise((resolve, reject) => {\r\n            //check auth before submitting\r\n            checkAuth().then(function(){\r\n                utilityObj.writeData.forEach(function(arrayItem, index){\r\n                    //console.log(arrayItem);\r\n\r\n                    //lower casify and split name to an array, searching can be done easilyer\r\n                    let tagName = arrayItem.name;\r\n                    let tagRequestor = arrayItem.requestor;\r\n                    let prependNameArray = tagName.toLowerCase();\r\n                    let prependRequestorArray = tagRequestor.toLowerCase();\r\n            \r\n                    //before split, add temp var and prepend name to array, so \"Jake Smith\"\r\n                    //looks like [\"jake smith\",\"jake\",\"smith\"]\r\n                    let nameArray = prependNameArray.split(\" \");\r\n                    let requestorArray = prependRequestorArray.split(\" \");\r\n                    nameArray.unshift(prependNameArray);\r\n                    requestorArray.unshift(prependRequestorArray);\r\n                    \r\n                    //grab current timestamp\r\n                    let date = new Date();\r\n                    let currentTimestamp = date.getTime();\r\n            \r\n                    //if sign, add only sign stuff\r\n                    if(arrayItem.color === 5){\r\n                        //sign\r\n                        //make a new document in db, auto gen id\r\n                        namesRef.add({\r\n                            name: tagName,\r\n                            namearray: nameArray,\r\n                            color: 5,\r\n                            attachment: arrayItem.attachment,\r\n                            signcolor: arrayItem.signColor,\r\n                            signquantity: arrayItem.signQuantity,\r\n                            height: arrayItem.height,\r\n                            width: arrayItem.width,\r\n                            thickness: arrayItem.thickness,\r\n                            requestor: tagRequestor,\r\n                            requestorarray: requestorArray,\r\n                            comments: arrayItem.comments,\r\n                            daterequest: currentTimestamp,\r\n                            datefinished: 0\r\n                        }).then(function(){\r\n                            //debug when writing is successful\r\n                            //console.log(\"writing good\");\r\n                            resolve(true);\r\n                        });\r\n                    }else{\r\n                        //anything other than sign\r\n                        //make a new document in db, auto gen id\r\n                        namesRef.add({\r\n                            name: tagName,\r\n                            namearray: nameArray,\r\n                            color: arrayItem.color,\r\n                            titlecity: arrayItem.secondLine,\r\n                            thirdline: arrayItem.thirdLine,\r\n                            requestor: tagRequestor,\r\n                            requestorarray: requestorArray,\r\n                            comments: arrayItem.comments,\r\n                            daterequest: currentTimestamp,\r\n                            datefinished: 0,\r\n                            quantity: arrayItem.quantity\r\n                        }).then(function(){\r\n                            //debug when writing is successful\r\n                            //console.log(\"writing good\");\r\n                            resolve(true);\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        });\r\n\r\n    }else if(utilityObj.mode === \"auth\"){\r\n        //if auth is called here, just do nothing, as there is a section above that handles it,\r\n        //but if this was empty it would throw some form of error\r\n    }else if(utilityObj.mode === \"update_entry\"){\r\n        //return promise\r\n        return new Promise((resolve, reject) => {\r\n\r\n            //update entry, mainly used to update if admin finished or unfinished a tag\r\n            let currentTimestamp;\r\n\r\n            //handle types\r\n            if(utilityObj.type === \"done\"){\r\n                //update to done\r\n                //grab current timestamp\r\n                let date = new Date();\r\n                currentTimestamp = date.getTime();\r\n\r\n            }else if(utilityObj.type === \"notdone\"){\r\n                //update to not done, aka undo\r\n                currentTimestamp = 0;\r\n            }else{\r\n                //mode not supported\r\n            }\r\n\r\n            //now update db for each\r\n            utilityObj.docIdArray.forEach((item, index) => {\r\n                //debug: does item come out as the doc Id?\r\n                //console.log(item);\r\n                \r\n                namesRef.doc(item).update({\r\n                    datefinished: currentTimestamp\r\n                })\r\n                .then(function() {\r\n                    console.log(\"Document successfully written on update_entry()!\");\r\n                    resolve(true);\r\n                })\r\n                .catch(function(error) {\r\n                    console.error(\"Error writing document on update_entry(): \", error);\r\n                });\r\n\r\n            });\r\n        });\r\n    }else{\r\n        //something else encountered\r\n        console.log(\"dbUtility() was called using a non supported utilityObj mode.\");\r\n        console.log(\"supported modes are 'read_all', 'search_for', 'new_entry', 'update_entry', or 'auth'.\");\r\n        console.log(utilityObj.mode);\r\n    };\r\n\r\n};\r\n","export function textValidation(inputString, minChar){\r\n    //this will automatically convert input text and return with validated text\r\n    //console.log(\"textValidation called with: \" + inputString);\r\n\r\n    /*\r\n    //check undefined\r\n    if(inputString == undefined){\r\n        //input was undefined\r\n        return 0;\r\n    }else if(inputString == \" \"){\r\n        //input was an empty string\r\n        return 0;\r\n    }else if(inputString == \"\"){\r\n        //input was an empty string\r\n        return 0;\r\n    };*/\r\n\r\n    //1st step: check all the string to make sure it has no special characters\r\n    //this is for db security purposes, only 0-9, a-Z, and !@.,?\r\n    let outputString = regexDelete(inputString);\r\n\r\n    //1st and half step: check and cut short if string is under the minimum character limit\r\n    let stringLength = inputString.length;\r\n    if(stringLength < minChar){\r\n        //doesnt meet requirement\r\n        return \"\";\r\n    };\r\n\r\n    //2nd step: add spaces after commas\r\n    outputString = addCommaSpaces(outputString);\r\n\r\n    //3rd step: title caps everything\r\n    outputString = titleCapsify(outputString);\r\n\r\n    //4th step: check state names and shorten to abbreviation\r\n    outputString = stateToAbbv(outputString);\r\n\r\n    //console.log(outputString);\r\n    return outputString;\r\n};\r\n\r\nfunction regexDelete(string){\r\n    //check if string is empty\r\n    if(string===\"\"){\r\n        //if empty, do nothing\r\n        return \"\";\r\n    }else{\r\n        //check an entire string for valid characters, then return only those\r\n        const regex = /\\w|\\n|\\r|\\t|\\d|[.!,?@ ]/g;\r\n        let found = string.match(regex);\r\n\r\n        //because it returns an array of all the characters, need to compile them into\r\n        //a string, join(\"\") works but join() nor toString() works without adding commas\r\n        let compiledString = found.join(\"\");\r\n\r\n        //console.dir(compiledString);\r\n        return compiledString;\r\n    }\r\n    \r\n};\r\n\r\nfunction addCommaSpaces(inputString){\r\n    //add appropriate spacing after commas if not exist\r\n\r\n    //split spaces into array\r\n    let splitString = inputString.split(\",\");\r\n\r\n    //check length of array, 1 for no comma, 2 for one comma\r\n    if(splitString.length > 1){\r\n        //has at least one comma\r\n        let stringSelection = splitString[1];\r\n\r\n        //check if the string on 2nd word starts with a space, delete if so\r\n        if(stringSelection[0] === \" \"){\r\n            //has space already, join only with comma\r\n            splitString = splitString.join(\",\");\r\n        }else{\r\n            //doesnt have space, add one\r\n            splitString = splitString.join(\", \");\r\n        };\r\n        //console.log(splitString);\r\n        \r\n        return splitString;\r\n    } else{\r\n        //has no commas, can just return w/ no modification\r\n        return inputString;\r\n    };\r\n    \r\n};\r\n\r\nfunction titleCapsify(inputString){\r\n    //title caps first letter of each word\r\n    //console.log(inputString);\r\n\r\n    //split spaces into array\r\n    let splitString = inputString.split(\" \");\r\n\r\n    //if the following is nothing it will throw an error, so delete it\r\n    //before it throws an error, this is a temporary state before adding another word\r\n    //console.dir(splitString[splitString.length - 1]);\r\n    if(splitString[splitString.length - 1] === \"\"){\r\n        //remove it from array\r\n        splitString.pop();\r\n    };\r\n    \r\n    let combinedString = splitString.map(function(word){\r\n        //make first character uppercase\r\n        let firstChar = word[0].toUpperCase();\r\n\r\n        //delete that first lowercase character\r\n        //slice in this case actually saves the remaining char's instead\r\n        word = word.slice(1);\r\n\r\n        //combine characters into a word\r\n        word = firstChar + \"\" + word;\r\n        return word;\r\n    });\r\n\r\n    //join all words together to form full name before returning\r\n    combinedString = combinedString.join(\" \");\r\n    //console.log(combinedString);\r\n    return combinedString;\r\n};\r\n\r\nfunction stateToAbbv(inputString){\r\n    //compile a list of all state names\r\n    const stateFull = [\"Alabama\", \"Alaska\",\"Arizona\",\"Arkansas\",\"California\",\"Colorado\",\"Connecticut\",\"Delaware\",\"District of Columbia\",\"Florida\",\"Georgia\",\"Hawaii\",\"Idaho\",\"Illinois\",\"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\"Massachusetts\",\"Michigan\",\"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\"Nebraska\",\"Nevada\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\"New York\",\"North Carolina\",\"North Dakota\",\"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\"Rhode Island\",\"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\"Wisconsin\",\"Wyoming\"];\r\n    const stateAbbv = [\"AL\",\"AK\",\"AZ\",\"AR\",\"CA\",\"CO\",\"CT\",\"DE\",\"DC\",\"FL\",\"GA\",\"HI\",\"ID\",\"IL\",\"IN\",\"IA\",\"KS\",\"KY\",\"LA\",\"ME\",\"MD\",\"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\"NC\",\"ND\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\"];\r\n    const stateAbbvTitleCaps = [\"Al\",\"Ak\",\"Az\",\"Ar\",\"Ca\",\"Co\",\"Ct\",\"De\",\"Dc\",\"Fl\",\"Ga\",\"Hi\",\"Id\",\"Il\",\"In\",\"Ia\",\"Ks\",\"Ky\",\"La\",\"Me\",\"Md\",\"Ma\",\"Mi\",\"Mn\",\"Ms\",\"Mo\",\"Mt\",\"Ne\",\"Nv\",\"Nh\",\"Nj\",\"Nm\",\"Ny\",\"Nc\",\"Nd\",\"Oh\",\"Ok\",\"Or\",\"Pa\",\"Ri\",\"Sc\",\"Sd\",\"Tn\",\"Tx\",\"Ut\",\"Vt\",\"Va\",\"Wa\",\"Wv\",\"Wi\",\"Wy\"];\r\n    //console.log(stateFull.length); //stateAbbvTitleCaps is just for searching purposes\r\n\r\n    //split and grab the 2nd item in array, check to see if its a state name\r\n    let splitString = inputString.split(\",\");\r\n\r\n\r\n    //get rid of the first character which is a space thanks to add comma spaces\r\n    //only if splitString[1] exists\r\n    let splicedString;\r\n    if(splitString.length === 2){\r\n        //\r\n        splicedString = splitString[1].slice(1);\r\n    };\r\n    \r\n    //if the comma isnt a thing, rearrange things so they are in data format can check for state abbrev\r\n    if(splitString.length === 1){ //\"park city utah\" no comma before state\r\n        //check the last word\r\n        splitString = splitString[0].split(\" \"); //[\"park\",\"city\",\"utah\"]\r\n\r\n        //temp save last\r\n        let tempPossibleState = splitString[splitString.length - 1];\r\n\r\n        //remove last\r\n        splitString.pop(); //[\"park\",\"city\"]\r\n        \r\n        //join all\r\n        let tempJoinString = [];\r\n        tempJoinString[0] = splitString.join(\" \"); //\"park city\"\r\n        \r\n        //now need to join the first parts and leave the last part like [\"park city\", \"utah\"]\r\n        tempJoinString.push(tempPossibleState);\r\n        splitString = tempJoinString;\r\n        //console.log(tempJoinString);\r\n\r\n        splicedString = splitString[1];\r\n    };\r\n\r\n    //console.log(splicedString);\r\n    \r\n    let stateSearch = stateFull.indexOf(splicedString); //-1 if no result, # of index if match\r\n    if(stateSearch !== -1){\r\n        //found match\r\n        return splitString[0] + \", \" + stateAbbv[stateSearch];\r\n    }else{\r\n        //no match found in the statefull\r\n\r\n        //start a new search for searching stateabbv for capitalization purposes\r\n        let innerStateSearch = stateAbbvTitleCaps.indexOf(splicedString);\r\n        if(innerStateSearch !== -1){\r\n            //found inner match\r\n            return splitString[0] + \", \" + stateAbbv[innerStateSearch];\r\n        }else{\r\n            //in 2 searches, found nothing\r\n            return inputString;\r\n        };\r\n    };\r\n};"],"sourceRoot":""}