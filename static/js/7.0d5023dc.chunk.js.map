{"version":3,"sources":["js/CreateTagPage.js","js/CreatePreviewImage.js","../node_modules/warning/warning.js","js/textValidation.js","../node_modules/react-bootstrap/esm/InputGroup.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/react-bootstrap/esm/Feedback.js","../node_modules/react-bootstrap/esm/FormContext.js","../node_modules/react-bootstrap/esm/FormControl.js"],"names":["CreateTagPage","useState","latestVersion","setLatestVersion","useEffect","localVersion","localStorage","getItem","parseInt","console","log","window","location","reload","setItem","dbUtility","mode","then","appVersion","thisColorCode","useParams","id","history","useHistory","name","color","secondLine","thirdLine","requestor","comments","quantity","submitArray","setSubmitArray","setSubmitGrey","setStatusTextIndex","submitGrey","statusTextIndex","className","xs","to","md","lg","data","colorCode","placeholder","aria-label","onChange","e","validatedText","textValidation","target","value","priorSubmitObj","as","Prepend","Radio","defaultChecked","checked","oldSubmitArray","Append","Text","type","disabled","onClick","writeData","statusBack","push","CreatePreviewImage","pixelHeight","pixelWidth","tagType","bg","img","defName","defSecond","colorCodeToClass","splitClasses","newLineContents","signColor","split","toLowerCase","parseFloat","height","width","style","textAlign","margin","display","flexDirection","map","mapItem","index","key","warning","module","exports","inputString","minChar","strictMode","outputString","string","regex","undefined","match","join","regexDelete","length","splicedString","stateAbbv","splitString","lastIndex","replace","slice","tempPossibleState","pop","tempJoinString","stateSearch","indexOf","innerStateSearch","stateToAbbv","combinedString","word","firstChar","toUpperCase","titleCapsify","stringSelection","addCommaSpaces","InputGroup","React","forwardRef","_ref","ref","bsPrefix","size","_ref$as","Component","props","_objectWithoutPropertiesLoose","useBootstrapPrefix","createElement","_extends","classNames","InputGroupAppend","createWithBsPrefix","InputGroupPrepend","InputGroupText","displayName","Checkbox","_toConsumableArray","arr","Array","isArray","i","arr2","iter","Symbol","iterator","Object","prototype","toString","call","from","TypeError","propTypes","PropTypes","isRequired","elementType","Feedback","defaultProps","FormContext","createContext","controlId","FormControl","classes","_classes","isValid","isInvalid","plaintext","readOnly","useContext","_classes2","_classes3"],"mappings":"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","file":"static/js/7.0d5023dc.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useHistory, NavLink, useParams } from \"react-router-dom\";\r\n\r\n// layout import\r\nimport { \r\n    Container, \r\n    Button,\r\n    Row,\r\n    Col,\r\n    InputGroup,\r\n    FormControl\r\n} from 'react-bootstrap';\r\nimport '../css/nav.css';\r\n\r\n// utility import\r\nimport CreatePreviewImage from './CreatePreviewImage.js';\r\nimport { textValidation } from './textValidation.js';\r\nimport { dbUtility } from './dbUtility.js';\r\n\r\n\r\n// start page\r\nconst CreateTagPage = () => {\r\n    // ---------- VERSION CONTROL ----------\r\n    const[latestVersion, setLatestVersion] = useState(-1);\r\n    useEffect(() => {\r\n        // database came back with version\r\n\r\n        // grab localStorage\r\n        let localVersion = localStorage.getItem(\"version\");\r\n        localVersion = parseInt(localVersion);\r\n        if((localVersion !== latestVersion) && (latestVersion !== -1)){\r\n            console.log(\"wrong local version: \" + localVersion + \" of latest: \" + latestVersion);\r\n            // if versions don't match(and it isn't the initial state of -1), force refresh\r\n            window.location.reload(true);\r\n            \r\n            // update local\r\n            localStorage.setItem(\"version\", latestVersion);\r\n        }else if(localVersion === latestVersion){\r\n            console.log(\"running latest version\");\r\n        };\r\n    },[latestVersion]);\r\n\r\n    // grab appversion from \"appVersion\" tag in database\r\n    dbUtility({\r\n        mode: \"get_app_version\"\r\n    }).then((appVersion) => {\r\n        appVersion = parseInt(appVersion);\r\n        setLatestVersion(appVersion);\r\n    });\r\n\r\n\r\n\r\n    \r\n    // the number it grabs in the url is actually a string, so make it int\r\n    let thisColorCode = parseInt(useParams().id);\r\n    \r\n    // debug: this should be the colorCode in the url e.g. /create/3 so \"3\"\r\n    // console.log(thisColorCode);\r\n\r\n\r\n    // this is to be able to load status window when tag created\r\n    let history = useHistory();\r\n    \r\n\r\n    // set the submit array(same data format as multi tag) to default values\r\n    const[ submitArray, setSubmitArray ] = useState([{\r\n        name: \"\",\r\n        color: thisColorCode,\r\n        secondLine: \"\",\r\n        thirdLine: \"\",\r\n        requestor: \"\",\r\n        comments: \"\",\r\n        quantity: (() => { // new version of default quantity setter is an 'immediately invoked function expression'\r\n            if(thisColorCode === 1){\r\n\r\n                // plain green tag\r\n                return \"2-PINS\";\r\n            }else if(thisColorCode === 4 || thisColorCode === 12){\r\n\r\n                // ski patrol and black outdoor tag with deerhead\r\n                return \"3-VELCRO\"\r\n            }else if(thisColorCode ===  13){\r\n\r\n                // old mtn ops window tag\r\n                return \"3-CARDS\"\r\n            }else{\r\n\r\n                // everything else\r\n                return \"2-MAGNETS\"\r\n            };\r\n        })(),\r\n        // old quantity setter was a ternary: (thisColorCode === 1) ? \"2 PINS\" : \"2 MAGNETS\"\r\n    }]);\r\n\r\n\r\n    // submit button on request\r\n    const submitRequest = () => {\r\n        // check to make sure user hasn't done in-browser html magic to bypass disabled submit button\r\n        // an empty or invalid request\r\n        if(submitGrey === false){\r\n            // pass, as its unlikely to change a react page variable in browser unless superuser\r\n\r\n            // change status text to loading\r\n            setStatusTextIndex(3);\r\n\r\n            // db new entry\r\n            dbUtility({\r\n                mode: \"new_entry\",\r\n                writeData: submitArray\r\n            }).then(function(statusBack){\r\n                // console.log(statusBack)\r\n                // on success, navigate to /status\r\n                history.push(\"/status\");\r\n            });\r\n        }else{\r\n            // failed, this shouldn't happen though\r\n        };\r\n    }\r\n\r\n    /*\r\n    // debug: what is submitArray on update\r\n    useEffect(() => {\r\n        console.log(submitArray);\r\n    },[submitArray]);\r\n    */\r\n\r\n    // update the status text and disable/enable button\r\n    useEffect(() => {\r\n        // also update the submission status, e.g. you need X or Y to submit\r\n        // if empty string or 0\r\n        if(submitArray[0].name === \"\" && submitArray[0].requestor === \"\"){\r\n            // false due to name AND requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(0);\r\n        }else if(submitArray[0].name === \"\"){\r\n            // false only to name\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(2);\r\n        }else if(submitArray[0].requestor === \"\"){\r\n            // false only to requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(1);\r\n        }else if(submitArray[0].name !== \"\" && submitArray[0].requestor !== \"\"){\r\n            // true only if name AND requestor are not empty strings set from textValidation\r\n            setSubmitGrey(false);\r\n            setStatusTextIndex(4);\r\n        }else{\r\n            // some other condition\r\n            console.log(\"updateSubmitGrey() ran into some other condition on validation!\");\r\n        };\r\n\r\n    },[submitArray]);\r\n\r\n\r\n    // submit grey button text and status text\r\n    const[ submitGrey, setSubmitGrey ] = useState(true);\r\n    // for the status text, only the index of it changes, not the actual string [4] is empty string\r\n    const statusText = [\r\n        \"There must be a requestor, The Name on the tag must be at least 3 characters\",\r\n        \"There must be a requestor.\",\r\n        \"The Name on the tag must be at least 3 characters\",\r\n        \"Submitting...\",\r\n        \"\"\r\n    ];\r\n    const[ statusTextIndex, setStatusTextIndex ] = useState(0);\r\n\r\n\r\n    // setting layout sizes\r\n    const xsSize = 12;\r\n    const mdSize = 6;\r\n    // const lgSize = 6;\r\n\r\n    // return\r\n    return (\r\n        <Container>\r\n            <Row className=\"justify-content-between nav-h4-bar-bg\">\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    <NavLink to=\"/\">\r\n                        <Button>\r\n                            BACK\r\n                        </Button>\r\n                    </NavLink>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                {\r\n                    // color codes and their titles in the navbar\r\n                    thisColorCode === 1 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW GREEN TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    thisColorCode === 2 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW GREEN DEERHEAD TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    thisColorCode === 3 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW BRONZE TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    thisColorCode === 14 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW BLACK DIAMOND LODGE TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    thisColorCode === 4 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW REGULAR OUTDOOR TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    thisColorCode === 12 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW OUTDOOR SKI PATROL TAG\r\n                    </h4>\r\n                }\r\n                {\r\n                    thisColorCode === 13 &&\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW WINDOW TAG FOR UNDERARMOUR\r\n                    </h4>\r\n                }\r\n                </Col>\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    <NavLink to={\"/createmultiple/\" + thisColorCode }>\r\n                        <Button>\r\n                            NEED MULTIPLES?\r\n                        </Button>\r\n                    </NavLink>\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mt-3\">\r\n                <Col xs={xsSize} md={mdSize} lg={4} className=\"justify-content-center\">\r\n                    <Row>Preview: </Row>\r\n                    <Row>\r\n                        <CreatePreviewImage data={{ \r\n                            colorCode: thisColorCode, \r\n                            name: submitArray[0].name,\r\n                            secondLine: submitArray[0].secondLine,\r\n                            thirdLine: submitArray[0].thirdLine\r\n                        }} />\r\n                    </Row>\r\n                </Col>\r\n                <Col xs={xsSize} md={mdSize} lg={8}>\r\n                    <Row>\r\n                        <InputGroup className=\"mt-4\">\r\n                            <FormControl\r\n                                placeholder=\"Requestor's Name and Department\"\r\n                                aria-label=\"Requestor\"\r\n                                onChange={ e => {\r\n                                    // text validate\r\n                                    let validatedText = textValidation(e.target.value, 3);\r\n\r\n                                    // only update if not false\r\n                                    if(validatedText !== 0){\r\n                                        // grab prior values except for changed element\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.requestor = validatedText;\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }else{\r\n                                        // otherwise just set it to empty string\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.requestor = \"\";\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </InputGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <FormControl\r\n                                placeholder=\"Name on tag\"\r\n                                aria-label=\"Name\"\r\n                                onChange={ e => {\r\n                                    // text validate\r\n                                    let validatedText = textValidation(e.target.value, 3, true);\r\n\r\n                                    // only update if not false\r\n                                    if(validatedText !== 0){\r\n                                        // grab prior values except for changed element\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.name = validatedText;\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }else{\r\n                                        // otherwise just set it to empty string\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.name = \"\";\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </InputGroup>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        placeholder=\"Title OR: City, ST\"\r\n                        aria-label=\"Second Line\"\r\n                        onChange={ e => {\r\n                            // text validate\r\n                            let validatedText = textValidation(e.target.value, 3, true);\r\n\r\n                            // grab prior values except for changed element\r\n                            let priorSubmitObj = submitArray[0];\r\n                            priorSubmitObj.secondLine = validatedText;\r\n                            setSubmitArray([priorSubmitObj]);\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        placeholder=\"Third Line(if applicable)\"\r\n                        aria-label=\"Third Line\"\r\n                        onChange={ e => {\r\n                            // text validate\r\n                            let validatedText = textValidation(e.target.value, 3, true);\r\n\r\n                            // grab prior values except for changed element\r\n                            let priorSubmitObj = submitArray[0];\r\n                            priorSubmitObj.thirdLine = validatedText;\r\n                            setSubmitArray([priorSubmitObj]);\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        as=\"textarea\"\r\n                        placeholder=\"Comments\"\r\n                        aria-label=\"Comments\"\r\n                        onChange={ e => {\r\n                            // text validate\r\n                            let validatedText = textValidation(e.target.value);\r\n\r\n                            // grab prior values except for changed element\r\n                            let priorSubmitObj = submitArray[0];\r\n                            priorSubmitObj.comments = validatedText;\r\n                            setSubmitArray([priorSubmitObj]);\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            {\r\n                (thisColorCode === 1 || thisColorCode === 2 || thisColorCode === 3) &&\r\n                <Row className=\"justify-content-between pinmag-row mt-3\">\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN\" \r\n                                        defaultChecked={ (thisColorCode === 1) ? true : false }\r\n                                        onChange={e => {\r\n                                            // if checked is true\r\n                                            if(e.target.checked){\r\n                                                // set value accordingly\r\n                                                let oldSubmitArray = submitArray;\r\n                                                oldSubmitArray[0].quantity = \"2-PINS\";\r\n                                                setSubmitArray([...oldSubmitArray]);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>2 PINS</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN\" \r\n                                        defaultChecked={ (thisColorCode !== 1) ? true : false }\r\n                                        onChange={e => {\r\n                                            // if checked is true\r\n                                            if(e.target.checked){\r\n                                                // set value accordingly\r\n                                                let oldSubmitArray = submitArray;\r\n                                                oldSubmitArray[0].quantity = \"2-MAGNETS\";\r\n                                                setSubmitArray([...oldSubmitArray]);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>2 MAGNETS</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN and MAG\" \r\n                                        onChange={e => {\r\n                                            // if checked is true\r\n                                            if(e.target.checked){\r\n                                                // set value accordingly\r\n                                                let oldSubmitArray = submitArray;\r\n                                                oldSubmitArray[0].quantity = \"1-PIN + 1-MAGNET\";\r\n                                                setSubmitArray([...oldSubmitArray]);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>1 PIN + 1 MAGNET</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            {\r\n                (thisColorCode === 12 || thisColorCode === 4) &&\r\n                <Row>\r\n                    <Col>\r\n                        <p className=\"mt-2 red-text\">\r\n                            Each name ordered will come with 3 outdoor tags with velcro.\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            {\r\n                (thisColorCode === 13) &&\r\n                <Row>\r\n                    <Col>\r\n                        <p className=\"mt-2 red-text\">\r\n                            Each name ordered will come with 3 outdoor tags that should slip right into the window of the uniform.\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            {\r\n                (thisColorCode === 1 || thisColorCode === 2 || thisColorCode === 3 || thisColorCode === 14) &&\r\n                <Row>\r\n                    <Col>\r\n                        <p className=\"mt-2 red-text\">\r\n                            Pins may be provided if magnet supply is low or out!\r\n                            <br />\r\n                            Deer Heads: Managers, Supervisors, Guest Svc, Directors, VPs, Attendants, Bronze Tags, Lodges, Fireside, and Chefs\r\n                            <br />\r\n                            Plain Tag: Everybody else\r\n                        </p>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            <Row className=\"mt-3 justify-content-end\">\r\n                <Col xs={xsSize} md={mdSize} lg=\"auto\">\r\n                    <p className=\"mt-2\">{ statusText[statusTextIndex] }</p>\r\n                </Col>\r\n                <Col xs={xsSize} md={mdSize} lg=\"auto\">\r\n                    <Button type=\"submit\" disabled={ submitGrey } onClick={ submitRequest }>Submit Request</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\n  \r\n  export default CreateTagPage;","import React from 'react';\r\nimport { \r\n    Col,\r\n    Row,\r\n    Container\r\n} from 'react-bootstrap';\r\nimport '../css/tags.css';\r\nimport '../css/signcolor.css';\r\n\r\nfunction colorCodeToClass(colorCode){\r\n    /*\r\n    tagType obj are the classes to apply and default texts on each\r\n    bg background class, \r\n    img is the deer head logo, null-space is the default class that deletes the class\r\n    in the event that there is no deer head\r\n    defName: default Name placeholder\r\n    defSecond: default second line text placeholder\r\n    quantity: the default quantity for each tag type(unchangeable, only for info purposes)\r\n    -\r\n    see CreateSignColor for tag id list\r\n    */\r\n    let tagType = {\r\n        bg: \"\",\r\n        img: \"null-space\",\r\n        defName: \"Name\",\r\n        defSecond: \"City, ST\",\r\n        quantity: \"x2\"\r\n    };\r\n\r\n    // translate color code to image type using classes\r\n    if(colorCode === 1){\r\n                \r\n        // 1: green pin no deerhead(normal nametag and default selection)\r\n        tagType.bg = \"tag-green\";\r\n    }else if(colorCode === 2){\r\n\r\n        // 2: green magnet deerhead\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n    }else if(colorCode === 3){\r\n\r\n        // 3: bronze magnet engraved deerhead\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvblack-img\";\r\n    }else if(colorCode === 4){\r\n\r\n        // 4: outdoor tags\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.img = \"dvwhite-img\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 5){\r\n\r\n        // 5: sign, add details in comments\r\n        tagType.bg = \"tag-sign\";\r\n        tagType.defName = \"Sign\";\r\n        tagType.defSecond = \"Put details in the comments\";\r\n        tagType.quantity = \"\";\r\n    }else if(colorCode === 7){\r\n\r\n        // 7: repeat 1 but with title instead of city, st\r\n        tagType.bg = \"tag-green\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 8){\r\n\r\n        // 8: repeat 2 but with title instead of city, st\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 9){\r\n\r\n        // 9: repeat 3 but with title instead of city, st\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvwhite-img\";\r\n        tagType.defSecond = \"Title\";\r\n    }else if(colorCode === 10){\r\n\r\n        // 10: repeat 4 but with title instead of city, st\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.defSecond = \"Title\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 11){\r\n\r\n        // 11: basket check tag\r\n        tagType.bg = \"tag-basket\";\r\n        tagType.defName = \"<p style='font-size:60px;position:relative;top:-20%;'>&#8226;</p>\";\r\n        tagType.defSecond = \"<p style='font-size:19px;position:relative;bottom:30%;'>Basket Check</p>\";\r\n        tagType.quantity = \"\";\r\n    }else if(colorCode === 12){\r\n\r\n        // 12: outdoor tag for ski patrol\r\n        tagType.bg = \"tag-patrol\";\r\n        tagType.img = \"dvpatrol-img\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 13){\r\n\r\n        // 13: old outdoor tags that fit inside old mtn ops uniforms\r\n        tagType.bg = \"tag-oldoutdoor\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 14){\r\n\r\n        // 14: black diamond tags\r\n        tagType.bg = \"tag-blackdiamond\";\r\n        tagType.img = \"dvblackdiamond-img\";\r\n        tagType.quantity = \"x2\";\r\n    }else if(colorCode === 15){\r\n\r\n        // 15: regular black indoor\r\n        tagType.bg = \"tag-black\";\r\n        tagType.quantity = \"x2\";\r\n    }else if(colorCode === 16){\r\n\r\n        // 16: club 1981 -- blk text, silver bg\r\n        tagType.bg = \"tag-blackdiamond\";\r\n        tagType.img = \"dvclub-img\";\r\n        tagType.quantity = \"x2\";\r\n    }else{\r\n\r\n        // anything else, other, details in comments\r\n        tagType.bg = \"tag-other\";\r\n    }\r\n\r\n    // return value, e.g. tagType = { bg: tag-green, img: null-space }\r\n    return tagType;\r\n};\r\n\r\n\r\nfunction CreatePreviewImage(data) {\r\n    /*\r\n    data use format for non signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        secondLine,\r\n        colorCode,\r\n        thirdLine(if it exists)\r\n    } />\r\n    -\r\n    data use format for signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        height,\r\n        width,\r\n        signColor,\r\n        attachment,\r\n        thickness\r\n    } />\r\n    */\r\n\r\n    // console.log(data); // correct injection would be e.g. data.data.colorCode\r\n    let tagType = colorCodeToClass(data.data.colorCode);\r\n    // console.log(tagType.img);\r\n    tagType.bg = tagType.bg + \"  justify-content-between\";\r\n\r\n    // if custom sign\r\n    let pixelHeight;\r\n    let pixelWidth;\r\n    let splitClasses = [];\r\n    let newLineContents = data.data.name;\r\n    // console.log(data.data.colorCode);\r\n    \r\n    if(data.data.colorCode === 5){\r\n        // grab signcolor classes\r\n        // console.log(data.data.quantity);\r\n        splitClasses = data.data.signColor.split(\" / \");\r\n        splitClasses[0] = \"color-\" + splitClasses[0].toLowerCase();\r\n        splitClasses[1] = \"bg-\" + splitClasses[1].toLowerCase();\r\n        \r\n        pixelHeight = parseFloat(data.data.height);\r\n        pixelWidth = parseFloat(data.data.width);\r\n\r\n        // do sign maths\r\n        pixelHeight *= 50;\r\n        pixelWidth *= 50;\r\n        pixelHeight = pixelHeight + \"px\";\r\n        pixelWidth = pixelWidth + \"px\";\r\n\r\n        newLineContents = newLineContents.split(\"\\n\");\r\n        // console.log(newLineContents);\r\n    };\r\n    \r\n\r\n    // return page with compiled data\r\n    return (\r\n        <Col xs={12} md={6} lg={4} className=\"px-0\">\r\n            {\r\n                (data.data.colorCode !== 5) &&\r\n                <Container>\r\n                    <Row className={ tagType.bg }>\r\n                        {\r\n                            !(tagType.img === \"null-space\") &&\r\n                            <div className={ tagType.img }>\r\n                            </div>\r\n                        }\r\n                        <div className=\"title-parent\">\r\n                            <div className=\"title-text justify-content-center\">\r\n                                { data.data.name }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.secondLine }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.thirdLine }\r\n                            </div>\r\n                        </div>\r\n                    </Row>\r\n                </Container>\r\n            }\r\n            {\r\n                (data.data.colorCode === 5) &&\r\n                <Container style={{ \r\n                    width: pixelWidth,\r\n                    height: pixelHeight,\r\n                    textAlign: \"center\",\r\n                    margin: \"auto\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\"\r\n                }} className={ splitClasses[1] + \" \" + splitClasses[0] + \" bg-basic\" }>\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\", margin: \"auto\" }}>\r\n                        {\r\n                            newLineContents.map((mapItem, index) => \r\n                                <Row className=\"justify-content-center\" key={ index }>{ mapItem }</Row>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </Container>\r\n            }\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default CreatePreviewImage;","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\n/**\n * Similar to invariant but only logs a warning if the condition is not met.\n * This can be used to log issues in development environments in critical\n * paths. Removing the logging code for production environments will keep the\n * same logic and follow the same code paths.\n */\n\nvar __DEV__ = process.env.NODE_ENV !== 'production';\n\nvar warning = function() {};\n\nif (__DEV__) {\n  var printWarning = function printWarning(format, args) {\n    var len = arguments.length;\n    args = new Array(len > 1 ? len - 1 : 0);\n    for (var key = 1; key < len; key++) {\n      args[key - 1] = arguments[key];\n    }\n    var argIndex = 0;\n    var message = 'Warning: ' +\n      format.replace(/%s/g, function() {\n        return args[argIndex++];\n      });\n    if (typeof console !== 'undefined') {\n      console.error(message);\n    }\n    try {\n      // --- Welcome to debugging React ---\n      // This error was thrown as a convenience so that you can use this stack\n      // to find the callsite that caused this warning to fire.\n      throw new Error(message);\n    } catch (x) {}\n  }\n\n  warning = function(condition, format, args) {\n    var len = arguments.length;\n    args = new Array(len > 2 ? len - 2 : 0);\n    for (var key = 2; key < len; key++) {\n      args[key - 2] = arguments[key];\n    }\n    if (format === undefined) {\n      throw new Error(\n          '`warning(condition, format, ...args)` requires a warning ' +\n          'message argument'\n      );\n    }\n    if (!condition) {\n      printWarning.apply(null, [format].concat(args));\n    }\n  };\n}\n\nmodule.exports = warning;\n","export function textValidation(inputString, minChar, strictMode){\r\n    //this will automatically convert input text and return with validated text\r\n    //console.log(\"textValidation called with: \" + inputString);\r\n    //console.log(strictMode);\r\n\r\n    /*\r\n    //check undefined\r\n    if(inputString == undefined){\r\n        //input was undefined\r\n        return 0;\r\n    }else if(inputString == \" \"){\r\n        //input was an empty string\r\n        return 0;\r\n    }else if(inputString == \"\"){\r\n        //input was an empty string\r\n        return 0;\r\n    };*/\r\n\r\n    //1st step: check all the string to make sure it has no special characters\r\n    //this is for db security purposes, only 0-9, a-Z, and !@.,?\r\n    let outputString = regexDelete(inputString, strictMode);\r\n\r\n    //1st and half step: check and cut short if string is under the minimum character limit\r\n    let stringLength = inputString.length;\r\n    if(stringLength < minChar){\r\n        //doesnt meet requirement\r\n        return \"\";\r\n    };\r\n\r\n    //2nd step: add spaces after commas\r\n    outputString = addCommaSpaces(outputString);\r\n\r\n    //3rd step: title caps everything\r\n    outputString = titleCapsify(outputString);\r\n\r\n    //4th step: check state names and shorten to abbreviation\r\n    outputString = stateToAbbv(outputString);\r\n\r\n    //console.log(outputString);\r\n    return outputString;\r\n};\r\n\r\nfunction regexDelete(string, strictMode){\r\n    // check if strict mode enabled, set regex accordingly\r\n\r\n    let regex;\r\n    if(strictMode !== undefined || strictMode === true){\r\n        // restricted name version\r\n        regex = /\\w|\\n|\\r|\\t|\\d|[,@ /&\"']|[A-Za-zÀ-ÖØ-öø-ÿ]/g;\r\n        //console.log(\"strict\");\r\n    }else{\r\n        // regular unrestricted version\r\n        regex = /\\w|\\n|\\r|\\t|\\d|[.!,?@ /&*()#$%-=+\"']|[A-Za-zÀ-ÖØ-öø-ÿ]/g; // old: /\\w|\\n|\\r|\\t|\\d|[.!,?@ ]/g, it did not allow accented characters nor /&'\"()#$%\r\n        //console.log(\"non-strict\");\r\n    };\r\n\r\n    //check if string is empty\r\n    if(string===\"\"){\r\n        //if empty, do nothing\r\n        return \"\";\r\n    }else{\r\n        //check an entire string for valid characters, then return only those\r\n        let found = string.match(regex);\r\n\r\n        //because it returns an array of all the characters, need to compile them into\r\n        //a string, join(\"\") works but join() nor toString() works without adding commas\r\n        let compiledString = found.join(\"\");\r\n\r\n        //console.dir(compiledString);\r\n        return compiledString;\r\n    }\r\n    \r\n};\r\n\r\nfunction addCommaSpaces(inputString){\r\n    //add appropriate spacing after commas if not exist\r\n\r\n    //split spaces into array\r\n    let splitString = inputString.split(\",\");\r\n\r\n    //check length of array, 1 for no comma, 2 for one comma\r\n    if(splitString.length > 1){\r\n        //has at least one comma\r\n        let stringSelection = splitString[1];\r\n\r\n        //check if the string on 2nd word starts with a space, delete if so\r\n        if(stringSelection[0] === \" \"){\r\n            //has space already, join only with comma\r\n            splitString = splitString.join(\",\");\r\n        }else{\r\n            //doesnt have space, add one\r\n            splitString = splitString.join(\", \");\r\n        };\r\n        //console.log(splitString);\r\n        \r\n        return splitString;\r\n    } else{\r\n        //has no commas, can just return w/ no modification\r\n        return inputString;\r\n    };\r\n    \r\n};\r\n\r\nfunction titleCapsify(inputString){\r\n    //title caps first letter of each word\r\n    //console.log(inputString);\r\n\r\n    //split spaces into array\r\n    let splitString = inputString.split(\" \");\r\n\r\n    //if the following is nothing it will throw an error, so delete it\r\n    //before it throws an error, this is a temporary state before adding another word\r\n    //console.dir(splitString[splitString.length - 1]);\r\n    if(splitString[splitString.length - 1] === \"\"){\r\n        //remove it from array\r\n        splitString.pop();\r\n    };\r\n    \r\n    let combinedString = splitString.map(function(word){\r\n        //make first character uppercase\r\n        let firstChar = word[0].toUpperCase();\r\n\r\n        //delete that first lowercase character\r\n        //slice in this case actually saves the remaining char's instead\r\n        word = word.slice(1);\r\n\r\n        //combine characters into a word\r\n        word = firstChar + \"\" + word;\r\n        return word;\r\n    });\r\n\r\n    //join all words together to form full name before returning\r\n    combinedString = combinedString.join(\" \");\r\n    //console.log(combinedString);\r\n    return combinedString;\r\n};\r\n\r\nfunction stateToAbbv(inputString){\r\n    //compile a list of all state names, but not Georgia since that could be the country, so don't correct it\r\n    const stateFull = [\"Alabama\", \"Alaska\",\"Arizona\",\"Arkansas\",\"California\",\"Colorado\",\"Connecticut\",\"Delaware\",\"District of Columbia\",\"Florida\",\"Hawaii\",\"Idaho\",\"Illinois\",\"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\"Massachusetts\",\"Michigan\",\"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\"Nebraska\",\"Nevada\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\"New York\",\"North Carolina\",\"North Dakota\",\"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\"Rhode Island\",\"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\"Wisconsin\",\"Wyoming\"];\r\n    const stateAbbv = [\"AL\",\"AK\",\"AZ\",\"AR\",\"CA\",\"CO\",\"CT\",\"DE\",\"DC\",\"FL\",\"HI\",\"ID\",\"IL\",\"IN\",\"IA\",\"KS\",\"KY\",\"LA\",\"ME\",\"MD\",\"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\"NC\",\"ND\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\"];\r\n    const stateAbbvTitleCaps = [\"Al\",\"Ak\",\"Az\",\"Ar\",\"Ca\",\"Co\",\"Ct\",\"De\",\"Dc\",\"Fl\",\"Hi\",\"Id\",\"Il\",\"In\",\"Ia\",\"Ks\",\"Ky\",\"La\",\"Me\",\"Md\",\"Ma\",\"Mi\",\"Mn\",\"Ms\",\"Mo\",\"Mt\",\"Ne\",\"Nv\",\"Nh\",\"Nj\",\"Nm\",\"Ny\",\"Nc\",\"Nd\",\"Oh\",\"Ok\",\"Or\",\"Pa\",\"Ri\",\"Sc\",\"Sd\",\"Tn\",\"Tx\",\"Ut\",\"Vt\",\"Va\",\"Wa\",\"Wv\",\"Wi\",\"Wy\"];\r\n    //console.log(stateFull.length); //stateAbbvTitleCaps is just for searching purposes\r\n\r\n    //split and grab the 2nd item in array, check to see if its a state name\r\n    let splitString = inputString.split(\",\");\r\n    \r\n    // sometimes there is an escape \\r, so regex it out so it can properly validate multi tag excel inputs\r\n    let lastIndex = splitString.length - 1;\r\n    splitString[lastIndex] = splitString[lastIndex].replace(/(\\r\\n|\\n|\\r)/gm, \"\");\r\n    //console.log(splitString);\r\n    \r\n    //get rid of the first character which is a space thanks to add comma spaces\r\n    //only if splitString[1] exists\r\n    let splicedString;\r\n    if(splitString.length === 2){\r\n        //\r\n        splicedString = splitString[1].slice(1);\r\n    };\r\n    \r\n    //if the comma isnt a thing, rearrange things so they are in data format can check for state abbrev\r\n    if(splitString.length === 1){ //\"park city utah\" no comma before state\r\n        //check the last word\r\n        splitString = splitString[0].split(\" \"); //[\"park\",\"city\",\"utah\"]\r\n\r\n        //temp save last\r\n        let tempPossibleState = splitString[splitString.length - 1];\r\n\r\n        //remove last\r\n        splitString.pop(); //[\"park\",\"city\"]\r\n        \r\n        //join all\r\n        let tempJoinString = [];\r\n        tempJoinString[0] = splitString.join(\" \"); //\"park city\"\r\n        \r\n        //now need to join the first parts and leave the last part like [\"park city\", \"utah\"]\r\n        tempJoinString.push(tempPossibleState);\r\n        splitString = tempJoinString;\r\n        //console.log(tempJoinString);\r\n\r\n        splicedString = splitString[1];\r\n    };\r\n\r\n    //console.log(splicedString);\r\n    \r\n    let stateSearch = stateFull.indexOf(splicedString); //-1 if no result, # of index if match\r\n    if(stateSearch !== -1){\r\n        //found match\r\n        return splitString[0] + \", \" + stateAbbv[stateSearch];\r\n    }else{\r\n        //no match found in the statefull\r\n\r\n        //start a new search for searching stateabbv for capitalization purposes\r\n        let innerStateSearch = stateAbbvTitleCaps.indexOf(splicedString);\r\n        if(innerStateSearch !== -1){\r\n            //found inner match\r\n            return splitString[0] + \", \" + stateAbbv[innerStateSearch];\r\n        }else{\r\n            //in 2 searches, found nothing\r\n            return inputString;\r\n        };\r\n    };\r\n};","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport createWithBsPrefix from './createWithBsPrefix';\nimport { useBootstrapPrefix } from './ThemeProvider';\n\n/**\n *\n * @property {InputGroupAppend} Append\n * @property {InputGroupPrepend} Prepend\n * @property {InputGroupText} Text\n * @property {InputGroupRadio} Radio\n * @property {InputGroupCheckbox} Checkbox\n */\nvar InputGroup = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"size\", \"className\", \"as\"]);\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'input-group');\n  return React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, bsPrefix, size && bsPrefix + \"-\" + size)\n  }));\n});\nvar InputGroupAppend = createWithBsPrefix('input-group-append');\nvar InputGroupPrepend = createWithBsPrefix('input-group-prepend');\nvar InputGroupText = createWithBsPrefix('input-group-text', {\n  Component: 'span'\n});\n\nvar InputGroupCheckbox = function InputGroupCheckbox(props) {\n  return React.createElement(InputGroupText, null, React.createElement(\"input\", _extends({\n    type: \"checkbox\"\n  }, props)));\n};\n\nvar InputGroupRadio = function InputGroupRadio(props) {\n  return React.createElement(InputGroupText, null, React.createElement(\"input\", _extends({\n    type: \"radio\"\n  }, props)));\n};\n\nInputGroup.displayName = 'InputGroup';\nInputGroup.Text = InputGroupText;\nInputGroup.Radio = InputGroupRadio;\nInputGroup.Checkbox = InputGroupCheckbox;\nInputGroup.Append = InputGroupAppend;\nInputGroup.Prepend = InputGroupPrepend;\nexport default InputGroup;","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nvar propTypes = {\n  /**\n   * Specify whether the feedback is for valid or invalid fields\n   *\n   * @type {('valid'|'invalid')}\n   */\n  type: PropTypes.string.isRequired,\n  as: PropTypes.elementType\n};\nvar defaultProps = {\n  type: 'valid'\n};\nvar Feedback = React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\nfunction (_ref, ref) {\n  var _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      className = _ref.className,\n      type = _ref.type,\n      props = _objectWithoutPropertiesLoose(_ref, [\"as\", \"className\", \"type\"]);\n\n  return React.createElement(Component, _extends({}, props, {\n    ref: ref,\n    className: classNames(className, type && type + \"-feedback\")\n  }));\n});\nFeedback.displayName = 'Feedback';\nFeedback.propTypes = propTypes;\nFeedback.defaultProps = defaultProps;\nexport default Feedback;","import React from 'react';\nvar FormContext = React.createContext({\n  controlId: undefined\n});\nexport default FormContext;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React, { useContext } from 'react';\nimport warning from 'warning';\nimport Feedback from './Feedback';\nimport FormContext from './FormContext';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar FormControl = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      type = _ref.type,\n      size = _ref.size,\n      id = _ref.id,\n      className = _ref.className,\n      isValid = _ref.isValid,\n      isInvalid = _ref.isInvalid,\n      plaintext = _ref.plaintext,\n      readOnly = _ref.readOnly,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'input' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"type\", \"size\", \"id\", \"className\", \"isValid\", \"isInvalid\", \"plaintext\", \"readOnly\", \"as\"]);\n\n  var _useContext = useContext(FormContext),\n      controlId = _useContext.controlId;\n\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'form-control');\n  var classes;\n\n  if (plaintext) {\n    var _classes;\n\n    classes = (_classes = {}, _classes[bsPrefix + \"-plaintext\"] = true, _classes);\n  } else if (type === 'file') {\n    var _classes2;\n\n    classes = (_classes2 = {}, _classes2[bsPrefix + \"-file\"] = true, _classes2);\n  } else {\n    var _classes3;\n\n    classes = (_classes3 = {}, _classes3[bsPrefix] = true, _classes3[bsPrefix + \"-\" + size] = size, _classes3);\n  }\n\n  process.env.NODE_ENV !== \"production\" ? warning(controlId == null || !id, '`controlId` is ignored on `<FormControl>` when `id` is specified.') : void 0;\n  return React.createElement(Component, _extends({}, props, {\n    type: type,\n    ref: ref,\n    readOnly: readOnly,\n    id: id || controlId,\n    className: classNames(className, classes, isValid && \"is-valid\", isInvalid && \"is-invalid\")\n  }));\n});\nFormControl.displayName = 'FormControl';\nFormControl.Feedback = Feedback;\nexport default FormControl;"],"sourceRoot":""}