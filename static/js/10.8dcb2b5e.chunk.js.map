{"version":3,"sources":["js/ExcelTable.js","js/CreateMultiTagPage.js","img/excel4.png"],"names":["ExcelTable","data","useEffect","doCellChange","e","idX","parseInt","target","id","idY","slice","type","key","oldTableData","newValidatedValue","textValidation","value","name","secondLine","thirdLine","setData","refToFocus","document","getElementById","focus","checkAddCell","index","length","select","pasteData","dataToSplit","clipboardData","getData","preventDefault","originX","splitByRow","split","pop","forEach","rowItem","rowIndex","colItem","colIndex","validatedValue","push","className","map","item","FormControl","defaultValue","aria-label","onKeyDown","onBlur","onFocus","onPaste","CreateMultiTagPage","thisColorCode","useParams","history","useHistory","useState","showExampleModal","setShowExampleModal","tempComments","setTempComments","tempRequestor","setTempRequestor","tempQuantity","setTempQuantity","color","requestor","comments","quantity","submitArray","setSubmitArray","submitGrey","setSubmitGrey","statusTextIndex","setStatusTextIndex","tableData","setTableData","dataToPush","realIndex","console","log","Container","Row","Col","xs","to","Button","InputGroup","placeholder","aria-describedby","onChange","validatedText","lg","variant","onClick","Modal","size","show","onHide","Header","closeButton","Body","src","ExampleImg","alt","i","inputData","as","md","Prepend","Radio","defaultChecked","checked","Append","Text","CreatePreviewImage","colorCode","disabled","dbUtility","mode","writeData","then","statusBack","module","exports"],"mappings":"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","file":"static/js/10.8dcb2b5e.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { \r\n    FormControl\r\n} from 'react-bootstrap';\r\nimport '../css/datasheet.css';\r\nimport { textValidation } from './textValidation';\r\n\r\nfunction ExcelTable(data) {\r\n    /*\r\n    this function is for excel table stuff\r\n    -\r\n    data format:\r\n    tableData = [{\r\n        name: \"\",\r\n        secondLine: \"\",\r\n        thirdLine: \"\"\r\n    },{},{},etc]\r\n    */\r\n    //console.log(data);\r\n    //console.log(data.setData);\r\n\r\n\r\n    //debug: when data.data changes, log it\r\n    useEffect(() => {\r\n        //console.log(data.data);\r\n    },[data.data]);\r\n\r\n\r\n    //perform a cell change on key down and blur\r\n    const doCellChange = (e) => {\r\n        //console.log(e.key);\r\n        \r\n        //integerify the cell id\r\n        let idX = parseInt(e.target.id[0]);\r\n        let idY = parseInt(e.target.id.slice(2)); //need slice, because it might be multiple digits long\r\n        \r\n        //on enter, tab, or blur\r\n        if(e.type === \"blur\" || e.key === \"Enter\" || e.key === \"Tab\"){\r\n            //debug: value, then id\r\n            //console.log(\"val: \" + e.target.value);\r\n            //console.log(e.target.id);\r\n            \r\n    \r\n            //make change to cell by setting placeholder to value\r\n            //first grab current data\r\n            let oldTableData = data.data;\r\n\r\n            //text validation\r\n            let newValidatedValue = textValidation(e.target.value);\r\n            \r\n            //translate int X(0, 1, 2) to string object version(.name, .secondLine, .thirdLine)\r\n            if(idX === 0){\r\n                //set data to name\r\n                oldTableData[idY].name = newValidatedValue;\r\n\r\n                //recursively set the cells value to what the data says it should be\r\n                e.target.value = data.data[idY].name;\r\n            }else if(idX === 1){\r\n                //set data to secondLine\r\n                oldTableData[idY].secondLine = newValidatedValue;\r\n\r\n                //recursively set the cells value to what the data says it should be\r\n                e.target.value = data.data[idY].secondLine;\r\n            }else{\r\n                //set data to thirdLine\r\n                oldTableData[idY].thirdLine = newValidatedValue;\r\n\r\n                //recursively set the cells value to what the data says it should be\r\n                e.target.value = data.data[idY].thirdLine;\r\n            }\r\n            \r\n            //now update data\r\n            //console.log(oldTableData[0].name);\r\n            data.setData([...oldTableData]);\r\n\r\n        }\r\n        \r\n        \r\n        //only if enter key pressed, refocus on input below\r\n        //tab doesnt need this because it does it by default\r\n        if(e.key === 'Enter'){\r\n            //use idY as index, grab ref+1, then strinfigy it\r\n            let refToFocus = idY + 1;\r\n            refToFocus = \"0-\" + refToFocus;\r\n\r\n            //debug: react reference was acting funny, so vanilla js focus below\r\n            //refArray.current[refToFocus].current.focus();\r\n            document.getElementById(refToFocus).focus();\r\n        };\r\n\r\n\r\n        //arrow key pressing\r\n        if(e.key === 'ArrowUp'){\r\n            //use idY as index, grab ref+1, then strinfigy it\r\n            let refToFocus = idY - 1;\r\n\r\n            //error catching\r\n            if(refToFocus < 0){\r\n                refToFocus = 0;\r\n            }\r\n\r\n            //compile id string\r\n            refToFocus = idX + \"-\" + refToFocus;\r\n\r\n\r\n            //debug: react reference was acting funny, so vanilla js focus below\r\n            //refArray.current[refToFocus].current.focus();\r\n            document.getElementById(refToFocus).focus();\r\n        }else if(e.key === 'ArrowDown'){\r\n            //use idY as index, grab ref+1, then strinfigy it\r\n            let refToFocus = idY + 1;\r\n            refToFocus = idX + \"-\" + refToFocus;\r\n\r\n            //debug: react reference was acting funny, so vanilla js focus below\r\n            //refArray.current[refToFocus].current.focus();\r\n            document.getElementById(refToFocus).focus();\r\n        }else if(e.key === 'ArrowLeft'){\r\n            //use idY as index, grab ref+1, then strinfigy it\r\n            let refToFocus = idX - 1;\r\n\r\n            //error catching\r\n            if(refToFocus < 0){\r\n                refToFocus = 2;\r\n            }\r\n\r\n            //compile id string\r\n            refToFocus = refToFocus + \"-\" + idY;\r\n\r\n            //debug: react reference was acting funny, so vanilla js focus below\r\n            //refArray.current[refToFocus].current.focus();\r\n            document.getElementById(refToFocus).focus();\r\n        }else if(e.key === 'ArrowRight'){\r\n            //use idY as index, grab ref+1, then strinfigy it\r\n            let refToFocus = idX + 1;\r\n\r\n            //error catching\r\n            if(refToFocus > 2){\r\n                refToFocus = 0;\r\n            }\r\n\r\n            //compile id string\r\n            refToFocus = refToFocus + \"-\" + idY;\r\n\r\n            //debug: react reference was acting funny, so vanilla js focus below\r\n            //refArray.current[refToFocus].current.focus();\r\n            document.getElementById(refToFocus).focus();\r\n        };\r\n    };\r\n\r\n\r\n    //on focus, it will check if it is the last row, because of focus it will throw a hard\r\n    //error if it is allowed to focus to a row that doesn't exist\r\n    //so, if it doesn't exist on focus, create another row\r\n    const checkAddCell = (e, index) => {\r\n        //console.log(index);\r\n        //console.log(data.data.length);\r\n        if((index + 1) === data.data.length){\r\n            data.setData([...data.data,{\r\n                name: \"\",\r\n                secondLine: \"\",\r\n                thirdLine: \"\"\r\n            }]);\r\n        }\r\n\r\n        //it will also select whole thing\r\n        const toSelect = document.getElementById(e.target.id);\r\n        toSelect.select();\r\n    };\r\n\r\n\r\n    //on paste\r\n    const pasteData = (e) => {\r\n        //debug: clipboard paste data\r\n        //console.log(e.clipboardData.getData('Text'));\r\n        //console.dir(e.target.value);\r\n\r\n        //grab paste data, set a mutable table data set\r\n        let dataToSplit = e.clipboardData.getData('Text');\r\n        let oldTableData = data.data;\r\n\r\n        //prevent it from actually pasting anything\r\n        e.preventDefault()\r\n\r\n        //grab origin index(X/Y index that was pasted into)\r\n        let idX = parseInt(e.target.id[0]);\r\n        let idY = parseInt(e.target.id.slice(2)); //need slice, because it might be multiple digits long\r\n\r\n        //set originX so you can restore it later\r\n        let originX = idX;\r\n        //console.log(\"X: \" + idX + \" - Y: \" + idY);\r\n\r\n\r\n        //split by new line, then delete last empty array\r\n        let splitByRow = dataToSplit.split(\"\\n\");\r\n        splitByRow.pop();\r\n\r\n        //for each row\r\n        splitByRow.forEach((rowItem, rowIndex) => {\r\n            let splitByCol = rowItem.split(\"\\t\");\r\n\r\n            //for each column within each row\r\n            splitByCol.forEach((colItem, colIndex) => {\r\n                //console.log(\"X: \" + idX + \" - Y: \" + idY + \" - \" + colItem);\r\n                \r\n                //text verify it\r\n                let validatedValue = textValidation(colItem);\r\n                \r\n                //make the value equal to validated text\r\n                //colItem.value = validatedValue;\r\n                \r\n                //main section where items must be inserted into old table data\r\n                //translate int X(0, 1, 2) to string object version(.name, .secondLine, .thirdLine)\r\n                if(idX === 0){\r\n                    //name\r\n                    oldTableData[idY].name = validatedValue;\r\n\r\n                    //only if the cell is at origin\r\n                    if(rowIndex === 0 && colIndex === 0){\r\n                        //recursively set the cells value to what the data says it should be\r\n                        e.target.value = data.data[idY].name;\r\n                    }\r\n                }else if(idX === 1){\r\n                    //secondLine\r\n                    oldTableData[idY].secondLine = validatedValue;\r\n\r\n                    //only if the cell is at origin\r\n                    if(rowIndex === 0 && colIndex === 0){\r\n                        //recursively set the cells value to what the data says it should be\r\n                        e.target.value = data.data[idY].secondLine;\r\n                    }\r\n                }else if(idX === 2){\r\n                    //thirdLine\r\n                    oldTableData[idY].thirdLine = validatedValue;\r\n\r\n                    //only if the cell is at origin\r\n                    if(rowIndex === 0 && colIndex === 0){\r\n                        //recursively set the cells value to what the data says it should be\r\n                        e.target.value = data.data[idY].thirdLine;\r\n                    }\r\n                }else{\r\n                    //fourth column, just do nothing, this is the X overflow\r\n                }\r\n\r\n                //advance the col\r\n                idX++;\r\n            });\r\n\r\n            //add row\r\n            oldTableData.push({\r\n                name: \"\",\r\n                secondLine: \"\",\r\n                thirdLine: \"\"\r\n            });\r\n\r\n            //advance the row and reset col\r\n            idY++;\r\n            idX = originX;\r\n        });\r\n\r\n        //update data\r\n        data.setData([...oldTableData]);\r\n\r\n        //this section used to be dedicated to focusing on the row below what was pasted,\r\n        //but if that exceeded the table data length before it had a chance to update, then it would throw\r\n        //error, and it is too much effort to program in such a small feature\r\n        //console.log(splitByRow);\r\n    }\r\n    \r\n\r\n    return(\r\n        <table>\r\n            <tbody>\r\n                <tr>\r\n                    <td className=\"td-cell\">NAME / Ski-Basket Check #</td>\r\n                    <td className=\"td-cell\">City, ST / Title</td>\r\n                    <td className=\"td-cell\">Third Line</td>\r\n                </tr>\r\n                {\r\n                    data.data.map((item, index) => \r\n                        <tr key={ index }>\r\n                            <td className=\"td-cell\">\r\n                                <FormControl\r\n                                    defaultValue={ item.name }\r\n                                    className=\"cell-input\"\r\n                                    aria-label=\"cell input\"\r\n                                    id={ \"0-\" + index }\r\n                                    onKeyDown={ (e) => {doCellChange(e) }}\r\n                                    onBlur={ (e) => {doCellChange(e) }}\r\n                                    onFocus={ (e) => {checkAddCell(e, index) }}\r\n                                    onPaste={ (e) => {pasteData(e) }}\r\n                                />\r\n                            </td>\r\n                            <td className=\"td-cell\">\r\n                                <FormControl\r\n                                    defaultValue={ item.secondLine }\r\n                                    className=\"cell-input\"\r\n                                    aria-label=\"cell input\"\r\n                                    id={ \"1-\" + index }\r\n                                    onKeyDown={ (e) => {doCellChange(e) }}\r\n                                    onBlur={ (e) => {doCellChange(e) }}\r\n                                    onFocus={ (e) => {checkAddCell(e, index) }}\r\n                                    onPaste={ (e) => {pasteData(e) }}\r\n                                />\r\n                            </td>\r\n                            <td className=\"td-cell\">\r\n                                <FormControl\r\n                                    defaultValue={ item.thirdLine }\r\n                                    className=\"cell-input\"\r\n                                    aria-label=\"cell input\"\r\n                                    id={ \"2-\" + index }\r\n                                    onKeyDown={ (e) => {doCellChange(e) }}\r\n                                    onBlur={ (e) => {doCellChange(e) }}\r\n                                    onFocus={ (e) => {checkAddCell(e, index) }}\r\n                                    onPaste={ (e) => {pasteData(e) }}\r\n                                />\r\n                            </td>\r\n                        </tr>\r\n                    )\r\n                }\r\n            </tbody>\r\n        </table>\r\n    );\r\n};\r\n\r\nexport default ExcelTable;","import React, { useState, useEffect } from 'react';\r\nimport { useHistory, NavLink, useParams } from \"react-router-dom\";\r\n\r\n//layout import\r\nimport { \r\n    Container, \r\n    Button,\r\n    Row,\r\n    Col,\r\n    InputGroup,\r\n    FormControl,\r\n    Modal\r\n} from 'react-bootstrap';\r\nimport '../css/nav.css';\r\nimport '../css/datasheet.css';\r\nimport ExampleImg from '../img/excel4.png';\r\n\r\n//utility import\r\nimport CreatePreviewImage from './CreatePreviewImage.js';\r\nimport ExcelTable from './ExcelTable.js';\r\nimport { textValidation } from './textValidation.js';\r\nimport { dbUtility } from './dbUtility.js';\r\n\r\n\r\n//start page\r\nconst CreateMultiTagPage = () => {\r\n    //debug: this should be the colorCode in the url e.g. /create/3 so \"3\"\r\n    //console.log(match.params.id);\r\n    //the number it grabs in the url is actually a string, so make it int\r\n    let thisColorCode = parseInt(useParams().id);\r\n\r\n\r\n    //this is to be able to load status window when tag created\r\n    let history = useHistory();\r\n\r\n\r\n    //hide/show modal\r\n    const[showExampleModal, setShowExampleModal] = useState(false);\r\n\r\n\r\n    //comments and requestor temp storage\r\n    const[tempComments, setTempComments] = useState(\"\");\r\n    const[tempRequestor, setTempRequestor] = useState(\"\");\r\n    const[tempQuantity, setTempQuantity] = useState((thisColorCode === 1) ? \"2 PINS\" : \"2 MAGNETS\");\r\n    \r\n\r\n    //set the submit array(same data format as multi tag) to default values\r\n    const[ submitArray, setSubmitArray ] = useState([{\r\n        name: \"\",\r\n        color: thisColorCode,\r\n        secondLine: \"\",\r\n        thirdLine: \"\",\r\n        requestor: \"\",\r\n        comments: \"\",\r\n        quantity: (thisColorCode === 1) ? \"2 PINS\" : \"2 MAGNETS\",\r\n    }]);\r\n\r\n\r\n    //submit button on request\r\n    const submitRequest = () => {\r\n        //check to make sure user hasn't done in-browser html magic to bypass disabled submit button\r\n        //an empty or invalid request\r\n        if(submitGrey === false){\r\n            //pass, as its unlikely to change a react page variable in browser unless superuser\r\n\r\n            //change status text to loading\r\n            setStatusTextIndex(3);\r\n\r\n            //db new entry\r\n            dbUtility({\r\n                mode: \"new_entry\",\r\n                writeData: submitArray\r\n            }).then(function(statusBack){\r\n                //console.log(statusBack)\r\n                //on success, navigate to /status\r\n                history.push(\"/status\");\r\n            });\r\n        }else{\r\n            //failed, this shouldn't happen though\r\n        };\r\n    }\r\n\r\n\r\n    //submit grey button text and status text\r\n    const[ submitGrey, setSubmitGrey ] = useState(true);\r\n    //for the status text, only the index of it changes, not the actual string [4] is empty string\r\n    const statusText = [\r\n        \"There must be a requestor, there must be at least 1 name or check #\",\r\n        \"There must be a requestor.\",\r\n        \"The Name on the tag must be at least 3 characters\",\r\n        \"Submitting...\",\r\n        \"\"\r\n    ];\r\n    const[ statusTextIndex, setStatusTextIndex ] = useState(0);\r\n\r\n\r\n    //adding rows on button click\r\n    const addRows = () => {\r\n        let i;\r\n        let inputData = [];\r\n\r\n        //add 10 rows on click\r\n        for(i = 0; i < 10; i++){\r\n            //\r\n            inputData.push({ name: \"\", secondLine: \"\", thirdLine: \"\" });\r\n        }\r\n        setTableData([...tableData,...inputData]);\r\n    }\r\n\r\n\r\n    //excel spreadsheet stuff\r\n    const[tableData, setTableData] = useState([\r\n        { name: \"\", secondLine: \"\", thirdLine: \"\" },\r\n        { name: \"\", secondLine: \"\", thirdLine: \"\" },\r\n        { name: \"\", secondLine: \"\", thirdLine: \"\" },\r\n        { name: \"\", secondLine: \"\", thirdLine: \"\" },\r\n        { name: \"\", secondLine: \"\", thirdLine: \"\" },\r\n        { name: \"\", secondLine: \"\", thirdLine: \"\" },\r\n        { name: \"\", secondLine: \"\", thirdLine: \"\" },\r\n        { name: \"\", secondLine: \"\", thirdLine: \"\" }\r\n    ]);\r\n\r\n\r\n    \r\n    //update submitArray when excel table updates\r\n    useEffect(() => {\r\n        //console.dir(tableData);\r\n        let dataToPush = [];\r\n        let realIndex = 0;\r\n\r\n        //it needs to shave off the empty lines\r\n        tableData.forEach((item, index) => {\r\n            \r\n            //check just the name column in each\r\n            if(item.name === \"\"){\r\n                //if empty do nothing\r\n            }else{\r\n                //anything else means it has data, according to .name property\r\n                \r\n                //actual push it\r\n                dataToPush.push(item);\r\n\r\n                //add extra values\r\n                dataToPush[realIndex].color = thisColorCode;\r\n                dataToPush[realIndex].comments = tempComments;\r\n                dataToPush[realIndex].requestor = tempRequestor;\r\n                dataToPush[realIndex].quantity = tempQuantity;\r\n                \r\n                realIndex++;\r\n            };\r\n        });\r\n\r\n        //update submitArray\r\n        setSubmitArray([...dataToPush]);\r\n    },[tableData,tempComments,tempRequestor,thisColorCode,tempQuantity]);\r\n    \r\n\r\n\r\n    //when submitArray updates\r\n    useEffect(() => {\r\n        //console.log(submitArray);\r\n\r\n        //check submit grey button for errors\r\n        //also update the submission status, e.g. you need X or Y to submit\r\n        //if empty string or 0\r\n        //console.log(submitArray.length);\r\n\r\n        //catch an error where it replaces the template with nothing\r\n        if(submitArray.length === 0){\r\n            //\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(0);\r\n        }else if(submitArray[0].name === \"\" && submitArray[0].requestor === \"\"){\r\n            //false due to name AND requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(0);\r\n        }else if(submitArray[0].name === \"\"){\r\n            //false only to name\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(2);\r\n        }else if(submitArray[0].requestor === \"\"){\r\n            //false only to requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(1);\r\n        }else if(submitArray[0].name !== \"\" && submitArray[0].requestor !== \"\"){\r\n            //true only if name AND requestor are not empty strings set from textValidation\r\n            setSubmitGrey(false);\r\n            setStatusTextIndex(4);\r\n        }else{\r\n            //some other condition\r\n            console.log(\"use Effect [submitArray] ran into some other condition on validation!\");\r\n        };\r\n    },[submitArray]);\r\n\r\n\r\n    //return\r\n    return (\r\n        <Container>\r\n            <Row className=\"justify-content-between nav-h4-bar-bg\">\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    <NavLink to=\"/\">\r\n                        <Button>\r\n                            BACK\r\n                        </Button>\r\n                    </NavLink>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        MULTIPLE TAGS\r\n                    </h4>\r\n                </Col>\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    \r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mt-3\">\r\n                <InputGroup>\r\n                    <FormControl\r\n                        placeholder=\"Requestor (or: WHO to Mail it to)\"\r\n                        aria-label=\"Requestor\"\r\n                        aria-describedby=\"basic-addon1\"\r\n                        onChange={ e => {\r\n                            //text validate\r\n                            let validatedText = textValidation(e.target.value);\r\n                            \r\n                            //set temp requestor storage\r\n                            setTempRequestor(validatedText);\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row className=\"justify-content-between\">\r\n                <Col xs={  12  } lg={ 3 }>\r\n                    <Row className=\"mt-3\">\r\n                        <Button variant=\"primary\" className=\"multi-left-button\" onClick={ () => {\r\n                            setShowExampleModal(true);\r\n                        }}>\r\n                            See Example\r\n                        </Button>\r\n                        <Modal size=\"xl\" show={ showExampleModal } onHide={ () => {\r\n                            setShowExampleModal(false);\r\n                        }}>\r\n                            <Modal.Header closeButton></Modal.Header>\r\n                            <Modal.Body>\r\n\r\n                                <img id=\"example-img-id\" src={ ExampleImg } alt=\"example of how to paste from excel\" />\r\n                            </Modal.Body>\r\n                        </Modal>\r\n                    </Row>\r\n                    <Row className=\"mt-3 justify-content-between\">\r\n                        <Button className=\"multi-left-button\" onClick={ addRows }>\r\n                            Add 10 Rows\r\n                        </Button>\r\n                    </Row>\r\n                </Col>\r\n                <Col xs={  12  } lg={ 9 } className=\"px-0 mt-3\">\r\n                    <InputGroup id=\"comment-box\">\r\n                        <FormControl\r\n                            as=\"textarea\"\r\n                            placeholder=\"Comments\"\r\n                            aria-label=\"Comments\"\r\n                            aria-describedby=\"basic-addon1\"\r\n                            onChange={ e => {\r\n                                //text validate\r\n                                let validatedText = textValidation(e.target.value);\r\n\r\n                                //set temp comments storage\r\n                                setTempComments(validatedText);\r\n                            }}\r\n                        />\r\n                    </InputGroup>\r\n                </Col>\r\n\r\n                \r\n            </Row>\r\n            <Row className=\"mt-3\">\r\n                <ExcelTable data={ tableData } setData={ setTableData } />\r\n            </Row>\r\n            {\r\n                (thisColorCode === 1 || thisColorCode === 2 || thisColorCode === 3) &&\r\n                <Row className=\"justify-content-between pinmag-row mt-3\">\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN\" \r\n                                        defaultChecked={ (thisColorCode === 1) ? true : false }\r\n                                        onChange={e => {\r\n                                            //if checked is true\r\n                                            if(e.target.checked){\r\n                                                //set value accordingly\r\n                                                setTempQuantity(\"2 PINS\");\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>2 PINS</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN\" \r\n                                        defaultChecked={ (thisColorCode !== 1) ? true : false }\r\n                                        onChange={e => {\r\n                                            //if checked is true\r\n                                            if(e.target.checked){\r\n                                                //set value accordingly\r\n                                                setTempQuantity(\"2 MAGNETS\");\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>2 MAGNETS</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN and MAG\" \r\n                                        onChange={e => {\r\n                                            //if checked is true\r\n                                            if(e.target.checked){\r\n                                                //set value accordingly\r\n                                                setTempQuantity(\"1 PIN + 1 MAGNET\");\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>1 PIN + 1 MAGNET</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            <Row>\r\n                <h5>Preview:</h5>\r\n\r\n            </Row>\r\n            <Row className=\"mt-3\">\r\n                {\r\n                    submitArray.map((item, index) =>\r\n                        <Col xs={ 12 } md={ 6 } lg={ 4 } key={ index }>\r\n                            <CreatePreviewImage data={{ \r\n                                colorCode: thisColorCode, \r\n                                name: item.name,\r\n                                secondLine: item.secondLine,\r\n                                thirdLine: item.thirdLine\r\n                            }} />\r\n                        </Col>\r\n                    )\r\n                }\r\n            </Row>\r\n            <Row className=\"mt-3 justify-content-end\">\r\n                <Col xs={ 12 } md={ 12 } lg=\"auto\">\r\n                    <p className=\"mt-2\">{ statusText[statusTextIndex] }</p>\r\n                </Col>\r\n                <Col xs={ 12 } md={ 12 } lg=\"auto\">\r\n                    <Button type=\"submit\" disabled={ submitGrey } onClick={ submitRequest }>Submit Request</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n};\r\n\r\nexport default CreateMultiTagPage;","module.exports = __webpack_public_path__ + \"static/media/excel4.4dd2aaaf.png\";"],"sourceRoot":""}