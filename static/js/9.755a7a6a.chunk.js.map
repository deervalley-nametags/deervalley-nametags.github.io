{"version":3,"sources":["../../../src/Print.jsx","js/PrintOutdoorTag.js","js/AdminPage.js","js/CreatePreviewImage.js"],"names":["PropTypes","contextTypes","PrintProvider","Print","printOffsetLeft","printOffsetTop","this","props","debug","isSingle","main","context","printProvider","regPrintable","window","bodyRect","document","elem","elemRect","unregPrintable","children","single","exclusive","printOnly","main_","s","excl_","isPrint","offset_","marginTop","marginLeft","className","globalClassName","ref","style","React","Component","PrintOutdoorTag","useEffect","idString","index","printString","thirdLine","name","secondLine","Container","Button","onClick","frames","focus","print","close","id","title","srcDoc","AdminPage","useState","adminLabel","setAdminLabel","goodJobTag","setGoodJobTag","data","color","comments","requestor","datefinished","daterequest","reqDaysAgo","height","width","attachment","thickness","signColor","dataRowAdmin","setDataRowAdmin","adminTodoTableData","setAdminTodoTableData","adminDisplay","setAdminDisplay","copiedClipboardIndex","setCopiedClipboardIndex","inputRef","useRef","adminPassValue","setAdminPassValue","tryLogin","event","key","dbUtility","mode","authUser","authPass","then","resolutionState","catch","error","msg","current","statusTags","addEventListener","getSelection","removeAllRanges","dataByColor","forEach","item","adminTodoCode","thirdline","colorCode","adminTodoCodeIndex","findIndex","obj","push","titlecity","signcolor","signQuantity","signquantity","length","Row","Col","xs","to","InputGroup","FormControl","placeholder","type","aria-label","aria-describedby","onChange","e","preValue","target","value","onKeyPress","Spinner","variant","animation","role","map","mapItem","node","querySelector","range","createRange","selectNodeContents","select","addRange","execCommand","copyToClipboard","lg","CreatePreviewImage","parseInt","slice","md","reformattedData","docIdArray","mapItemChild","colSpan","childIndex","StatusPage","adminMode","pixelHeight","pixelWidth","tagType","bg","img","defName","defSecond","quantity","colorCodeToClass","splitClasses","newLineContents","split","toLowerCase","parseFloat","textAlign","margin","display","flexDirection"],"mappings":"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","file":"static/js/9.755a7a6a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PrintProvider from './PrintProvider';\nimport { debug } from './common';\nimport s from './Print.css';\n\nconst propTypes = {\n  name: PropTypes.string,\n  children: PropTypes.node.isRequired,\n  main: PropTypes.bool,\n  single: PropTypes.bool,\n  exclusive: PropTypes.bool,\n  printOnly: PropTypes.bool\n};\nconst contextTypes = PrintProvider.childContextTypes;\n\nexport default class Print extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      printOffsetLeft: 0,\n      printOffsetTop: 0\n    };\n  }\n  componentDidMount() {\n\n    if (this.props.name) {\n      debug('init printable', this.props.name);\n      const isSingle = (this.props.main || this.props.single);\n      this.context.printProvider && this.context.printProvider.regPrintable(this.props.name, <Print {...this.props} />, isSingle);\n    }\n\n    if (this.props.main || this.props.single) {\n\n      window.matchMedia('print').onchange = () => {\n        const isPrint = window.matchMedia('print').matches;\n\n        if(isPrint){\n          const bodyRect = document.body.getBoundingClientRect();\n          const elem = this.printElement;\n          const elemRect = elem && elem.getBoundingClientRect();\n          const printOffsetLeft = elemRect && (elemRect.left - bodyRect.left);\n          const printOffsetTop = elemRect && (elemRect.top - bodyRect.top);\n\n          this.setState({\n            printOffsetTop,\n            printOffsetLeft,\n          });\n        }else{\n          this.setState({\n            printOffsetTop: 0,\n            printOffsetLeft: 0\n          })\n        }\n      };\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.props.name) {\n      debug('remove printable', this.props.name);\n      const isSingle = (this.props.main || this.props.single);\n      this.context.printProvider && this.context.printProvider.unregPrintable(this.props.name, isSingle);\n    }\n\n    if (this.props.main || this.props.single) {\n      window.matchMedia('print').onchange = null;\n    }\n  }\n\n  render() {\n\n    const { children, main, single, exclusive, printOnly } = this.props;\n    const { printOffsetLeft, printOffsetTop } = this.state;\n    const main_ = (main || single) ? s._main : '';\n    const excl_ = (exclusive || printOnly) ? s._exclusive : '';\n    const isPrint = window.matchMedia('print').matches;\n    const offset_ = ((printOffsetTop || printOffsetLeft ) && main_ && isPrint) ? { marginTop: -printOffsetTop, marginLeft: -printOffsetLeft} : {};\n    const globalClassName = 'react-easy-print-print'; // using in hiddenAll\n    const className = `${globalClassName} ${s.root} ${main_} ${excl_}`;\n    return <div ref={ (el) => this.printElement = el } style={offset_} className={className}>{children}</div>;\n  }\n}\nPrint.propTypes = propTypes;\nPrint.contextTypes = contextTypes;\n","import React, { useEffect } from 'react';\r\nimport { \r\n    Container,\r\n    Button\r\n} from 'react-bootstrap';\r\nimport '../css/print.css';\r\nimport { Print } from 'react-easy-print';\r\n\r\n\r\n\r\nfunction PrintOutdoorTag(props){\r\n    useEffect(() => {\r\n        //debug: what is passed in as props\r\n        //console.log(props.props);\r\n        //console.log(props.index);\r\n    },[props.props]);\r\n\r\n    //combine id string\r\n    let idString = \"printframe\" + props.index;\r\n    \r\n    let printString = \"\";\r\n    //compile the final printing string, depending on third line existence\r\n    if(props.props.thirdLine === \"\"){\r\n        //empty string means two line\r\n        printString = \"<div style='text-align:center;'>\" +\r\n            \"<p style='font-size:38px;font-family:calibri;margin-bottom:0px;margin-top:35px;'>\" + props.props.name + \"</p>\" +\r\n            \"<p style='font-size:38px;font-family:calibri;margin-bottom:0px;margin-top:20px;'>\" + props.props.secondLine + \"</p>\" +\r\n        \"</div>\";\r\n    }else{\r\n        //anything else means third line\r\n        printString = \"<div style='text-align:center;'>\" +\r\n            \"<p style='font-size:30px;font-family:calibri;margin-bottom:0px;margin-top:30px;'>\" + props.props.name + \"</p>\" +\r\n            \"<p style='font-size:30px;font-family:calibri;margin-bottom:0px;margin-top:10px;'>\" + props.props.secondLine + \"</p>\" +\r\n            \"<p style='font-size:30px;font-family:calibri;margin-bottom:0px;margin-top:10px;'>\" + props.props.thirdLine + \"</p>\" +\r\n        \"</div>\";\r\n    }\r\n    \r\n\r\n    const tryPrint = () => {\r\n        window.frames[idString].focus();\r\n        window.frames[idString].print();\r\n        window.frames[idString].close();\r\n    };\r\n\r\n    return(\r\n        <Container>\r\n            <Button onClick={ tryPrint }>\r\n                PRINT\r\n            </Button>\r\n            <Print single name=\"print-class\">\r\n                <iframe id={ idString } title={ idString } name={ idString } srcDoc={ printString }>\r\n\r\n                </iframe>\r\n            </Print>\r\n        </Container>\r\n    );\r\n}\r\n\r\nexport default PrintOutdoorTag;","import React, { \r\n    useState, \r\n    useRef, \r\n    useEffect\r\n} from 'react';\r\nimport { \r\n    Container, \r\n    Button,\r\n    Row,\r\n    Col,\r\n    FormControl,\r\n    InputGroup,\r\n    Spinner\r\n} from 'react-bootstrap';\r\nimport {\r\n    NavLink\r\n} from \"react-router-dom\";\r\nimport '../css/nav.css';\r\nimport '../css/admin.css';\r\nimport { dbUtility } from './dbUtility.js';\r\nimport CreatePreviewImage from './CreatePreviewImage.js';\r\nimport StatusPage from './StatusPage.js';\r\nimport PrintOutdoorTag from './PrintOutdoorTag.js';\r\n\r\n\r\nfunction copyToClipboard(id){\r\n    //this will copy to clipboard the id e.g. \"#admin-table-1\"\r\n\r\n    //convert to vanilla querySelector node\r\n    let node = document.querySelector(id);\r\n\r\n    //do range stuff, select\r\n    let range  =  document.createRange();\r\n    range.selectNodeContents(node);\r\n    let select =  window.getSelection();\r\n    select.removeAllRanges();\r\n    select.addRange(range);\r\n\r\n    //finally copy\r\n    document.execCommand('copy');\r\n\r\n    //add unselect here if wanted, but it helps to keep it selected\r\n    //window.getSelection().removeAllRanges();\r\n}\r\n\r\n\r\nfunction AdminPage() {\r\n    //admin title label\r\n    const[adminLabel, setAdminLabel] = useState(\"ADMIN LOGIN\");\r\n\r\n    //show or hide an 'all tags are done good job' tag\r\n    const[goodJobTag, setGoodJobTag] = useState(false);\r\n\r\n    //tag rows of data, these MUST be filled with the data type or else it will freak out\r\n    const[dataRowAdmin, setDataRowAdmin] = useState([{\r\n        id: 0,\r\n        data: {\r\n            color: \"\",\r\n            comments: \"\",\r\n            requestor: \"\",\r\n            datefinished: 0,\r\n            daterequest: 0,\r\n            reqDaysAgo: 0,\r\n            height: 1,\r\n            width: 1,\r\n            attachment: \"\",\r\n            thickness: \"\",\r\n            signColor: \"\"\r\n        }\r\n    }]);\r\n\r\n    \r\n    //rearrange rowData into dataByColor so we know what to show, and what to push where\r\n    //for some reason, using useState here screws the pooch, so do all the data processing in dataByColor,\r\n    //then at the very end update adminTodoTableData\r\n    const[adminTodoTableData, setAdminTodoTableData] = useState([]);\r\n\r\n    //admin function show/hide, true/false\r\n    const[adminDisplay, setAdminDisplay] = useState(false);\r\n\r\n    //which \"copied to clipboard\" index should it be displayed on\r\n    const[copiedClipboardIndex, setCopiedClipboardIndex] = useState(-1);\r\n\r\n    //this is used to focus on the input\r\n    const inputRef = useRef(null);\r\n\r\n    //pass value\r\n    const[adminPassValue, setAdminPassValue] = useState(\"\");\r\n\r\n\r\n    //on enter or submit, try to auth\r\n    const tryLogin = (event) => {\r\n        //first see if enter key\r\n        //submit button will pass \"enter\" to pass this\r\n        if(event.key === 'Enter' || event === \"Button\"){\r\n            //debug: what was entered\r\n            //console.log(adminPassValue);\r\n\r\n            //dbUtility auth\r\n            dbUtility({\r\n                mode: \"auth\",\r\n                authUser: \"emeqiss@deervalley.com\",\r\n                authPass: adminPassValue\r\n            }).then( resolutionState => {\r\n                //debug: proper admin auth\r\n                //console.log(resolutionState);\r\n\r\n                //switch panel views\r\n                setAdminDisplay(true);\r\n\r\n                //set the admin label\r\n                setAdminLabel(\"ADMIN CENTER\");\r\n\r\n            }).catch( error => {\r\n                //catch error and set title to the error message that traces from the tryLogin at dbUtility\r\n                //console.log(error);\r\n                setAdminLabel(error.msg);\r\n            });\r\n        };\r\n    };\r\n\r\n    //on mount\r\n    useEffect(() => {\r\n        //focus on the admin pass input\r\n        inputRef.current.focus();\r\n\r\n        //grab all the unfinished tags using dbUtility promise\r\n        dbUtility({\r\n            mode: \"read_all\"\r\n        })\r\n        .then((statusTags) => {\r\n            //debug: this is what the promise resolved from in dbUtility()\r\n            //console.log(statusTags);\r\n\r\n            //setDataRowAdmin to the value of the db read\r\n            //a console.log here will NOT work!\r\n            setDataRowAdmin(statusTags);\r\n\r\n            //escape to unfocus\r\n            document.addEventListener('keydown', function(event) {\r\n                //console.log(event.key);\r\n                if(event.key === \"Escape\"){\r\n                    //escape pressed, reset copied clip index\r\n                    setCopiedClipboardIndex(-1);\r\n\r\n                    //unselect\r\n                    window.getSelection().removeAllRanges();\r\n                };\r\n            });\r\n        });\r\n    }, []);\r\n\r\n    //when dataRowAdmin updates\r\n    //rearrange it by color\r\n    useEffect(() => {\r\n        /*\r\n        dataByColor format:\r\n        [{\r\n            adminTodoCode: x,\r\n            name: \"2 LINE\",\r\n            data: [{\r\n                id: \"zBcs54S\",\r\n                name: \"\",\r\n                secondLine: \"\",\r\n                (thirdLine: \"\",)\r\n                comments: \"\"\r\n            },{},{},etc]\r\n        },{},{},etc]\r\n        */\r\n        let dataByColor = [];\r\n       \r\n        dataRowAdmin.forEach((item, index) => {\r\n            //console.log(item);\r\n            //item is straight from the db, e.g. item.id, or item.data.comments\r\n            //adminTodoCode has the data format as a string: \"<colorCode>-<number of lines>\"\r\n            let adminTodoCode;\r\n            \r\n            //check if 2 or 3 line, create the item's adminTodoCode \r\n            if(item.data.thirdline === \"\"){\r\n                //empty string means 2 line\r\n                adminTodoCode = \"2-\" + item.data.color;\r\n            }else if(item.data.colorCode === 11){\r\n                //check here if its a ski tag, color code 11\r\n                adminTodoCode = \"1-\" + item.data.color;\r\n            }else{\r\n                //anything else means 3 line\r\n                adminTodoCode = \"3-\" + item.data.color;\r\n            }\r\n            //console.log(adminTodoCode);\r\n            \r\n            //check to see if the colorCode exists yet in dataByColor\r\n            let adminTodoCodeIndex = dataByColor.findIndex(obj => obj.adminTodoCode === adminTodoCode);\r\n            //console.log(adminTodoCodeIndex);\r\n            \r\n            if(adminTodoCodeIndex === -1){\r\n                //did not find prior existing, so add it\r\n\r\n                //if empty string, continue, who knows why it comes back with an empty string\r\n                if(item.data.color === \"\"){\r\n                    return;\r\n                }\r\n                \r\n                dataByColor.push({\r\n                    adminTodoCode: adminTodoCode,\r\n                    data: []\r\n                });\r\n\r\n            }\r\n            //grab the index which has the admin todo code we need to modify\r\n            adminTodoCodeIndex = dataByColor.findIndex(obj => obj.adminTodoCode === adminTodoCode);\r\n            \r\n            //grab the index, go to data array, then push new item into it\r\n            dataByColor[adminTodoCodeIndex].data.push({\r\n                id: item.id,\r\n                name: item.data.name,\r\n                secondLine: item.data.titlecity,\r\n                thirdLine: item.data.thirdline,\r\n                comments: item.data.comments,\r\n                requestor: item.data.requestor,\r\n                thickness: item.data.thickness,\r\n                height: item.data.height,\r\n                width: item.data.width,\r\n                attachment: item.data.attachment,\r\n                signColor: item.data.signcolor,\r\n                signQuantity: item.data.signquantity\r\n\r\n            });\r\n        });\r\n\r\n        //console.log(dataByColor);\r\n\r\n        //check to see if there are no tags still\r\n        if(dataRowAdmin.length === 0){\r\n            //update good job tag\r\n            setGoodJobTag(true);\r\n        }\r\n\r\n        //after all of that, set adminTodoTableData to reflect the changes\r\n        setAdminTodoTableData(dataByColor);\r\n    },[dataRowAdmin]);\r\n\r\n\r\n    //return\r\n    return (\r\n        <Container className=\"p-0\">\r\n            <Row className=\"justify-content-between nav-h4-bar-bg mx-0\">\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    <NavLink to=\"/\">\r\n                        <Button>\r\n                            HOME\r\n                        </Button>\r\n                    </NavLink>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        { adminLabel }\r\n                    </h4>\r\n                </Col>\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    <NavLink to=\"/status\">\r\n                        <Button>\r\n                            STATUS\r\n                        </Button>\r\n                    </NavLink>\r\n                </Col>\r\n            </Row>\r\n            {\r\n                !adminDisplay &&\r\n                <Row className=\"mt-2 mx-0\">\r\n                    <Col xs={ 10 } className=\"pl-0 pr-2\">\r\n                        <InputGroup>\r\n                            <FormControl\r\n                                ref={ inputRef }\r\n                                placeholder=\"Password\"\r\n                                type=\"password\"\r\n                                aria-label=\"Password\"\r\n                                aria-describedby=\"basic-addon1\"\r\n                                onChange={ (e) => {\r\n                                    //grab value\r\n                                    let preValue = e.target.value;\r\n\r\n                                    //on change, reupdate admin pass value\r\n                                    setAdminPassValue( preValue );\r\n                                }}\r\n                                onKeyPress={ (e) => tryLogin(e) }\r\n                            />\r\n                        </InputGroup>\r\n                    </Col>\r\n                    <Col xs={ 2 } className=\"px-0 align-right\">\r\n                        <Button id=\"submit-admin\" onClick={ () => tryLogin(\"Button\") }>\r\n                            Submit\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            { \r\n                //debug: change to !adminDisplay && for no-login testing, adminDisplay && for final\r\n                adminDisplay &&\r\n                <Container className=\"mt-2 mb-5 pb-4 px-4 admin-top-section\">\r\n                    <Row className=\"justify-content-center mt-1\">\r\n                        <h5 className=\"grey-text\">The Following Tags Need to be Completed:</h5>\r\n                    </Row>\r\n                    {\r\n                        (adminTodoTableData.length === 0 && !goodJobTag) &&\r\n                        <Spinner variant=\"danger\" animation=\"border\" role=\"status\">\r\n                            <span className=\"sr-only\">\r\n                                Loading...\r\n                            </span>\r\n                        </Spinner>\r\n                    }\r\n                    {\r\n                        goodJobTag &&\r\n                        <Row className=\"justify-content-center\">\r\n                            <p className=\"green-text\">All tags are completed. Good job, you!</p>\r\n                        </Row>\r\n                    }\r\n                    {\r\n                        adminTodoTableData.map((mapItem, index) => \r\n                            <Row className=\"admin-todo-item mt-2 py-3\" key={ index } onClick={ () => {\r\n                                //console.log(mapItem.adminTodoCode);\r\n                                //on click, grab index and change copiedClipboardIndex\r\n                                setCopiedClipboardIndex(index);\r\n\r\n                                //copy clipboard with id, e.g. table-data-0 for index 0\r\n                                copyToClipboard(\"#table-data-\" + index);\r\n                            }}>\r\n                                <Col xs={ 12 } lg={ 4 } className=\"px-0\">\r\n                                    <Row>\r\n                                        {\r\n                                            (mapItem.adminTodoCode[3] !== \"1\" && mapItem.adminTodoCode[2] !== \"5\") &&\r\n                                            <Col>\r\n                                                <CreatePreviewImage data={{ \r\n                                                    colorCode: parseInt(mapItem.adminTodoCode.slice(2)),\r\n                                                    name: parseInt(mapItem.adminTodoCode[0]) === 2 ? \"2 LINE\" : \"3 LINE\"\r\n                                                }} />\r\n                                            </Col>\r\n                                        }\r\n                                        {\r\n                                            (mapItem.adminTodoCode[3] === \"1\") &&\r\n                                            <Col>\r\n                                                <CreatePreviewImage data={{ \r\n                                                    colorCode: parseInt(mapItem.adminTodoCode.slice(2)),\r\n                                                    name: \"SKI / BASKET TAG\"\r\n                                                }} />\r\n                                            </Col>\r\n                                        }\r\n                                    </Row>\r\n                                    {\r\n                                        (copiedClipboardIndex === index ? true : false) &&\r\n                                        <Row>\r\n                                            <Col md={ 5 } className=\"ml-2 red-text\">\r\n                                                Copied to Clipboard! ESC to unselect\r\n                                            </Col>\r\n                                            <Col md={ 5 } className=\"text-center\">\r\n                                                <p className=\"my-0\">MARK THESE AS DONE:</p>\r\n                                                <Button onClick={ () => {\r\n                                                    //debug: what index of dataByColor was clicked?\r\n                                                    //console.log(index);\r\n\r\n                                                    //need to remap data from adminTodoTableData[index].data{ id: \"\" }\r\n                                                    //to [\"id\",\"id\",\"id\"]\r\n                                                    let reformattedData = [];\r\n                                                    //console.log(adminTodoTableData[index].data);\r\n                                                    adminTodoTableData[index].data.forEach((item) => {\r\n                                                        reformattedData.push(item.id);\r\n                                                    });\r\n\r\n                                                    //console.log(reformattedData);\r\n                                                    //send to dbUtility\r\n                                                    dbUtility({\r\n                                                        mode: \"update_entry\",\r\n                                                        type: \"done\",\r\n                                                        docIdArray: reformattedData\r\n                                                    }).then(() => {\r\n                                                        //here we need to re-set the dataRowAdmin\r\n                                                        //grab all the unfinished tags using dbUtility promise\r\n                                                        dbUtility({\r\n                                                            mode: \"read_all\"\r\n                                                        })\r\n                                                        .then((statusTags) => {\r\n                                                            //debug: this is what the promise resolved from in dbUtility()\r\n                                                            //console.log(statusTags);\r\n\r\n                                                            //setDataRowAdmin to the value of the db read\r\n                                                            //a console.log here will NOT work!\r\n                                                            setDataRowAdmin(statusTags);\r\n\r\n                                                            //set copy clipboard index back to nothing\r\n                                                            setCopiedClipboardIndex(-1);\r\n                                                        });\r\n                                                    });\r\n                                                }}>&#10004;</Button>\r\n                                            </Col>\r\n                                        </Row>\r\n                                    }\r\n                                </Col>\r\n                                <Col xs={ 6 } lg={ 4 } className=\"px-0\">\r\n                                    <table className=\"admin-table\" id={ \"table-data-\" + index }>\r\n                                        {\r\n                                            (mapItem.adminTodoCode[2] !== \"4\" && mapItem.adminTodoCode[3] !== \"1\" && mapItem.adminTodoCode[2] !== \"5\") &&\r\n                                            mapItem.data.map((mapItemChild, index) => \r\n                                                <tbody key={ mapItemChild.id }>\r\n                                                    <tr>\r\n                                                        <td className=\"admin-table-td\">{ mapItemChild.name }</td>\r\n                                                        <td className=\"admin-table-td\">{ mapItemChild.secondLine }</td>\r\n                                                        {\r\n                                                            !(mapItemChild.thirdLine === \"\") &&\r\n                                                            <td className=\"admin-table-td\">{ mapItemChild.thirdLine }</td>\r\n                                                        }\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td className=\"admin-table-td\">{ mapItemChild.name }</td>\r\n                                                        <td className=\"admin-table-td\">{ mapItemChild.secondLine }</td>\r\n                                                        {\r\n                                                            !(mapItemChild.thirdLine === \"\") &&\r\n                                                            <td className=\"admin-table-td\">{ mapItemChild.thirdLine }</td>\r\n                                                        }\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            )\r\n                                        }\r\n                                        {\r\n                                            (mapItem.adminTodoCode[2] === \"4\" || mapItem.adminTodoCode[3] === \"1\") &&\r\n                                            mapItem.data.map((mapItemChild, index) => \r\n                                                <tbody key={ mapItemChild.id }>\r\n                                                    <tr>\r\n                                                        <td className=\"admin-table-td-double\">{ mapItemChild.name }</td>\r\n                                                        {\r\n                                                            !(mapItem.adminTodoCode[3] === \"1\") &&\r\n                                                            <td className=\"admin-table-td-double\">{ mapItemChild.secondLine }</td>\r\n                                                        }\r\n                                                        {\r\n                                                            !(mapItemChild.thirdLine === \"\") &&\r\n                                                            <td className=\"admin-table-td\">{ mapItemChild.thirdLine }</td>\r\n                                                        }\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            )\r\n                                        }\r\n                                        {\r\n                                            (mapItem.adminTodoCode[2] === \"5\") &&\r\n                                            mapItem.data.map((mapItemChild, index) => \r\n                                                <tbody key={ mapItemChild.id }>\r\n                                                    <tr>\r\n                                                        <td colSpan={ 4 } className=\"admin-table-td-double\">\r\n                                                            <CreatePreviewImage data={{ \r\n                                                                colorCode: 5,\r\n                                                                name: mapItemChild.name,\r\n                                                                signColor: mapItemChild.signColor,\r\n                                                                width: mapItemChild.width,\r\n                                                                height: mapItemChild.height\r\n                                                            }} />\r\n                                                        </td>\r\n                                                    </tr>\r\n                                                    <tr>\r\n                                                        <td className=\"admin-table-td-double\">Thickness: { mapItemChild.thickness }</td>\r\n                                                        <td className=\"admin-table-td-double\">Attachment: { mapItemChild.attachment }</td>\r\n                                                        <td className=\"admin-table-td-double\">Height: { mapItemChild.height }\"</td>\r\n                                                        <td className=\"admin-table-td-double\">Width: { mapItemChild.width }\"</td>\r\n                                                    </tr>\r\n                                                </tbody>\r\n                                            )\r\n                                        }\r\n                                    </table >\r\n                                </Col>\r\n                                <Col xs={ 6 } lg={ 4 } className=\"pr-0\">\r\n                                    <table className=\"admin-table\">\r\n                                        {\r\n                                            mapItem.data.map((mapItemChild, childIndex) => \r\n                                                <tbody key={ mapItemChild.id }>\r\n                                                    <tr>\r\n                                                        {\r\n                                                            (mapItem.adminTodoCode[2] === \"4\") &&\r\n                                                            <td className=\"admin-table-td-double\">\r\n                                                                <PrintOutdoorTag props={ mapItemChild } index={ index } />\r\n                                                            </td>\r\n                                                        }\r\n                                                        <td className=\"admin-table-td-double\">{ \"Requestor: \" + mapItemChild.requestor }</td>\r\n                                                        <td className=\"admin-table-td-double\">{ \"Comments: \" + mapItemChild.comments }</td>\r\n                                                    </tr>\r\n                                                    {\r\n                                                        (mapItem.adminTodoCode[2] === \"5\") &&\r\n                                                        <tr>\r\n                                                            <td className=\"admin-table-td-double\">Quantity: { mapItemChild.signQuantity }</td>\r\n                                                            <td className=\"admin-table-td-double\">Color: { mapItemChild.signColor }</td>\r\n                                                    </tr>\r\n                                                    }\r\n                                                </tbody>\r\n                                            )\r\n                                        }\r\n                                    </table>\r\n                                </Col>\r\n                            </Row>\r\n                        )\r\n                    }\r\n                </Container>\r\n            }\r\n            {\r\n                adminDisplay &&\r\n                <Container className=\"mx-0 pb-3 px-4 pt-3 admin-bottom-section\">\r\n                    <StatusPage adminMode={ true } dataRowAdmin={ dataRowAdmin } setDataRowAdmin={ setDataRowAdmin } />\r\n                </Container>\r\n            }\r\n        </Container>\r\n    );\r\n  }\r\n  \r\n  export default AdminPage;","import React from 'react';\r\nimport { \r\n    Col,\r\n    Row,\r\n    Container\r\n} from 'react-bootstrap';\r\nimport '../css/tags.css';\r\nimport '../css/signcolor.css';\r\n\r\nfunction colorCodeToClass(colorCode){\r\n    /*\r\n    tagType obj are the classes to apply and default texts on each\r\n    bg background class, \r\n    img is the deer head logo, null-space is the default class that deletes the class\r\n    in the event that there is no deer head\r\n    defName: default Name placeholder\r\n    defSecond: default second line text placeholder\r\n    quantity: the default quantity for each tag type(unchangeable, only for info purposes)\r\n    */\r\n    let tagType = {\r\n        bg: \"\",\r\n        img: \"null-space\",\r\n        defName: \"Name\",\r\n        defSecond: \"City, ST\",\r\n        quantity: \"x2\"\r\n    };\r\n\r\n    //translate color code to image type using classes\r\n    if(colorCode === 1){\r\n                \r\n        //1: green pin no deerhead(normal nametag and default selection)\r\n        tagType.bg = \"tag-green\";\r\n    } else if(colorCode === 2){\r\n\r\n        //2: green magnet deerhead\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n    } else if(colorCode === 3){\r\n\r\n        //3: bronze magnet engraved deerhead\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvwhite-img\";\r\n    } else if(colorCode === 4){\r\n\r\n        //4: outdoor tags\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.quantity = \"x3\";\r\n    } else if(colorCode === 5){\r\n\r\n        //5: sign, add details in comments\r\n        tagType.bg = \"tag-sign\";\r\n        tagType.defName = \"Sign\";\r\n        tagType.defSecond = \"Put details in the comments\";\r\n        tagType.quantity = \"\";\r\n    } else if(colorCode === 7){\r\n\r\n        //7: repeat 1 but with title instead of city, st\r\n        tagType.bg = \"tag-green\";\r\n        tagType.defSecond = \"Title\";\r\n    } else if(colorCode === 8){\r\n\r\n        //8: repeat 2 but with title instead of city, st\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n        tagType.defSecond = \"Title\";\r\n    } else if(colorCode === 9){\r\n\r\n        //9: repeat 3 but with title instead of city, st\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvwhite-img\";\r\n        tagType.defSecond = \"Title\";\r\n    } else if(colorCode === 10){\r\n\r\n        //10: repeat 4 but with title instead of city, st\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.defSecond = \"Title\";\r\n        tagType.quantity = \"x3\";\r\n    } else if(colorCode === 11){\r\n\r\n        //11: basket check tag\r\n        tagType.bg = \"tag-basket\";\r\n        tagType.defName = \"<p style='font-size:60px;position:relative;top:-20%;'>&#8226;</p>\";\r\n        tagType.defSecond = \"<p style='font-size:19px;position:relative;bottom:30%;'>Basket Check</p>\";\r\n        tagType.quantity = \"\";\r\n    } else{\r\n\r\n        //anything else, other, details in comments\r\n        tagType.bg = \"tag-other\";\r\n    }\r\n\r\n    //return value, e.g. tagType = { bg: tag-green, img: null-space }\r\n    return tagType;\r\n};\r\n\r\n\r\nfunction CreatePreviewImage(data) {\r\n    /*\r\n    data use format for non signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        secondLine,\r\n        colorCode,\r\n        thirdLine(if it exists)\r\n    } />\r\n    -\r\n    data use format for signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        height,\r\n        width,\r\n        signColor,\r\n        attachment,\r\n        thickness\r\n    } />\r\n    */\r\n\r\n    //console.log(data); //correct injection would be e.g. data.data.colorCode\r\n    let tagType = colorCodeToClass(data.data.colorCode);\r\n    //console.log(tagType.img);\r\n    tagType.bg = tagType.bg + \"  justify-content-between\";\r\n\r\n    //if custom sign\r\n    let pixelHeight;\r\n    let pixelWidth;\r\n    let splitClasses = [];\r\n    let newLineContents = data.data.name;\r\n    //console.log(data.data.colorCode);\r\n    \r\n    if(data.data.colorCode === 5){\r\n        //grab signcolor classes\r\n        //console.log(data.data.quantity);\r\n        splitClasses = data.data.signColor.split(\" / \");\r\n        splitClasses[0] = \"color-\" + splitClasses[0].toLowerCase();\r\n        splitClasses[1] = \"bg-\" + splitClasses[1].toLowerCase();\r\n        \r\n        pixelHeight = parseFloat(data.data.height);\r\n        pixelWidth = parseFloat(data.data.width);\r\n\r\n        //do sign math\r\n        pixelHeight *= 50;\r\n        pixelWidth *= 50;\r\n        pixelHeight = pixelHeight + \"px\";\r\n        pixelWidth = pixelWidth + \"px\";\r\n\r\n        newLineContents = newLineContents.split(\"\\n\");\r\n        //console.log(newLineContents);\r\n    };\r\n    \r\n\r\n    //return page with compiled data\r\n    return (\r\n        <Col xs={12} md={6} lg={4} className=\"px-0\">\r\n            {\r\n                (data.data.colorCode !== 5) &&\r\n                <Container>\r\n                    <Row className={ tagType.bg }>\r\n                        {\r\n                            !(tagType.img === \"null-space\") &&\r\n                            <div className={ tagType.img }>\r\n                            </div>\r\n                        }\r\n                        <div className=\"title-parent\">\r\n                            <div className=\"title-text justify-content-center\">\r\n                                { data.data.name }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.secondLine }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.thirdLine }\r\n                            </div>\r\n                        </div>\r\n                    </Row>\r\n                </Container>\r\n            }\r\n            {\r\n                (data.data.colorCode === 5) &&\r\n                <Container style={{ \r\n                    width: pixelWidth,\r\n                    height: pixelHeight,\r\n                    textAlign: \"center\",\r\n                    margin: \"auto\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\"\r\n                }} className={ splitClasses[1] + \" \" + splitClasses[0] + \" bg-basic\" }>\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\", margin: \"auto\" }}>\r\n                        {\r\n                            newLineContents.map((mapItem, index) => \r\n                                <Row className=\"justify-content-center\" key={ index }>{ mapItem }</Row>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </Container>\r\n            }\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default CreatePreviewImage;"],"sourceRoot":""}