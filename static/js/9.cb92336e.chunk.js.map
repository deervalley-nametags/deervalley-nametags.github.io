{"version":3,"sources":["js/CreateTagPage.js","js/CreatePreviewImage.js","js/textValidation.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"names":["CreateTagPage","thisColorCode","parseInt","useParams","id","history","useHistory","useState","name","color","secondLine","thirdLine","requestor","comments","quantity","submitArray","setSubmitArray","useEffect","setSubmitGrey","setStatusTextIndex","console","log","submitGrey","statusTextIndex","className","xs","to","md","lg","data","colorCode","placeholder","aria-label","onChange","e","validatedText","textValidation","target","value","priorSubmitObj","as","Prepend","Radio","defaultChecked","checked","oldSubmitArray","Append","Text","type","disabled","onClick","dbUtility","mode","writeData","then","statusBack","push","CreatePreviewImage","pixelHeight","pixelWidth","tagType","bg","img","defName","defSecond","colorCodeToClass","splitClasses","newLineContents","signColor","split","toLowerCase","parseFloat","height","width","style","textAlign","margin","display","flexDirection","map","mapItem","index","key","inputString","minChar","outputString","string","match","join","regexDelete","length","splicedString","stateAbbv","splitString","slice","tempPossibleState","pop","tempJoinString","stateSearch","indexOf","innerStateSearch","stateToAbbv","combinedString","word","firstChar","toUpperCase","titleCapsify","stringSelection","addCommaSpaces","_toConsumableArray","arr","Array","isArray","i","arr2","iter","Symbol","iterator","Object","prototype","toString","call","from","TypeError"],"mappings":"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","file":"static/js/9.cb92336e.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useHistory, NavLink, useParams } from \"react-router-dom\";\r\n\r\n//layout import\r\nimport { \r\n    Container, \r\n    Button,\r\n    Row,\r\n    Col,\r\n    InputGroup,\r\n    FormControl\r\n} from 'react-bootstrap';\r\nimport '../css/nav.css';\r\n\r\n//utility import\r\nimport CreatePreviewImage from './CreatePreviewImage.js';\r\nimport { textValidation } from './textValidation.js';\r\nimport { dbUtility } from './dbUtility.js';\r\n\r\n\r\n//start page\r\nconst CreateTagPage = () => {\r\n    //the number it grabs in the url is actually a string, so make it int\r\n    let thisColorCode = parseInt(useParams().id);\r\n    \r\n    //debug: this should be the colorCode in the url e.g. /create/3 so \"3\"\r\n    //console.log(thisColorCode);\r\n\r\n\r\n    //this is to be able to load status window when tag created\r\n    let history = useHistory();\r\n    \r\n\r\n    //set the submit array(same data format as multi tag) to default values\r\n    const[ submitArray, setSubmitArray ] = useState([{\r\n        name: \"\",\r\n        color: thisColorCode,\r\n        secondLine: \"\",\r\n        thirdLine: \"\",\r\n        requestor: \"\",\r\n        comments: \"\",\r\n        quantity: (thisColorCode === 1) ? \"2 PINS\" : \"2 MAGNETS\"\r\n    }]);\r\n\r\n\r\n    //submit button on request\r\n    const submitRequest = () => {\r\n        //check to make sure user hasn't done in-browser html magic to bypass disabled submit button\r\n        //an empty or invalid request\r\n        if(submitGrey === false){\r\n            //pass, as its unlikely to change a react page variable in browser unless superuser\r\n\r\n            //change status text to loading\r\n            setStatusTextIndex(3);\r\n\r\n            //db new entry\r\n            dbUtility({\r\n                mode: \"new_entry\",\r\n                writeData: submitArray\r\n            }).then(function(statusBack){\r\n                //console.log(statusBack)\r\n                //on success, navigate to /status\r\n                history.push(\"/status\");\r\n            });\r\n        }else{\r\n            //failed, this shouldn't happen though\r\n        };\r\n    }\r\n\r\n    /*\r\n    //debug: what is submitArray on update\r\n    useEffect(() => {\r\n        console.log(submitArray);\r\n    },[submitArray]);\r\n    */\r\n\r\n    //update the status text and disable/enable button\r\n    useEffect(() => {\r\n        //also update the submission status, e.g. you need X or Y to submit\r\n        //if empty string or 0\r\n        if(submitArray[0].name === \"\" && submitArray[0].requestor === \"\"){\r\n            //false due to name AND requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(0);\r\n        }else if(submitArray[0].name === \"\"){\r\n            //false only to name\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(2);\r\n        }else if(submitArray[0].requestor === \"\"){\r\n            //false only to requestor\r\n            setSubmitGrey(true);\r\n            setStatusTextIndex(1);\r\n        }else if(submitArray[0].name !== \"\" && submitArray[0].requestor !== \"\"){\r\n            //true only if name AND requestor are not empty strings set from textValidation\r\n            setSubmitGrey(false);\r\n            setStatusTextIndex(4);\r\n        }else{\r\n            //some other condition\r\n            console.log(\"updateSubmitGrey() ran into some other condition on validation!\");\r\n        };\r\n\r\n    },[submitArray]);\r\n\r\n\r\n    //submit grey button text and status text\r\n    const[ submitGrey, setSubmitGrey ] = useState(true);\r\n    //for the status text, only the index of it changes, not the actual string [4] is empty string\r\n    const statusText = [\r\n        \"There must be a requestor, The Name on the tag must be at least 3 characters\",\r\n        \"There must be a requestor.\",\r\n        \"The Name on the tag must be at least 3 characters\",\r\n        \"Submitting...\",\r\n        \"\"\r\n    ];\r\n    const[ statusTextIndex, setStatusTextIndex ] = useState(0);\r\n\r\n\r\n    //setting layout sizes\r\n    const xsSize = 12;\r\n    const mdSize = 6;\r\n    //const lgSize = 6;\r\n\r\n    //return\r\n    return (\r\n        <Container>\r\n            <Row className=\"justify-content-between nav-h4-bar-bg\">\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    <NavLink to=\"/\">\r\n                        <Button>\r\n                            BACK\r\n                        </Button>\r\n                    </NavLink>\r\n                </Col>\r\n                <Col xs=\"auto\">\r\n                    <h4 className=\"nav-h4-bar\">\r\n                        NEW TAG\r\n                    </h4>\r\n                </Col>\r\n                <Col xs=\"auto\" className=\"p-0\">\r\n                    <NavLink to={\"/createmultiple/\" + thisColorCode }>\r\n                        <Button>\r\n                            NEED MULTIPLES?\r\n                        </Button>\r\n                    </NavLink>\r\n                </Col>\r\n            </Row>\r\n            <Row className=\"mt-3\">\r\n                <Col xs={xsSize} md={mdSize} lg={4} className=\"justify-content-center\">\r\n                    <Row>Preview: </Row>\r\n                    <Row>\r\n                        <CreatePreviewImage data={{ \r\n                            colorCode: thisColorCode, \r\n                            name: submitArray[0].name,\r\n                            secondLine: submitArray[0].secondLine,\r\n                            thirdLine: submitArray[0].thirdLine\r\n                        }} />\r\n                    </Row>\r\n                </Col>\r\n                <Col xs={xsSize} md={mdSize} lg={8}>\r\n                    <Row>\r\n                        <InputGroup className=\"mt-4\">\r\n                            <FormControl\r\n                                placeholder=\"Requestor (or: WHO to Mail it to)\"\r\n                                aria-label=\"Requestor\"\r\n                                onChange={ e => {\r\n                                    //text validate\r\n                                    let validatedText = textValidation(e.target.value, 3);\r\n\r\n                                    //only update if not false\r\n                                    if(validatedText !== 0){\r\n                                        //grab prior values except for changed element\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.requestor = validatedText;\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }else{\r\n                                        //otherwise just set it to empty string\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.requestor = \"\";\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </InputGroup>\r\n                    </Row>\r\n                    <Row>\r\n                        <InputGroup className=\"mt-3\">\r\n                            <FormControl\r\n                                placeholder=\"Name on tag\"\r\n                                aria-label=\"Name\"\r\n                                onChange={ e => {\r\n                                    //text validate\r\n                                    let validatedText = textValidation(e.target.value, 3);\r\n\r\n                                    //only update if not false\r\n                                    if(validatedText !== 0){\r\n                                        //grab prior values except for changed element\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.name = validatedText;\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }else{\r\n                                        //otherwise just set it to empty string\r\n                                        let priorSubmitObj = submitArray[0];\r\n                                        priorSubmitObj.name = \"\";\r\n                                        setSubmitArray([priorSubmitObj]);\r\n                                    }\r\n                                }}\r\n                            />\r\n                        </InputGroup>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        placeholder=\"Title OR: City, ST\"\r\n                        aria-label=\"Second Line\"\r\n                        onChange={ e => {\r\n                            //text validate\r\n                            let validatedText = textValidation(e.target.value);\r\n\r\n                            //grab prior values except for changed element\r\n                            let priorSubmitObj = submitArray[0];\r\n                            priorSubmitObj.secondLine = validatedText;\r\n                            setSubmitArray([priorSubmitObj]);\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        placeholder=\"Third Line(if applicable)\"\r\n                        aria-label=\"Third Line\"\r\n                        onChange={ e => {\r\n                            //text validate\r\n                            let validatedText = textValidation(e.target.value);\r\n\r\n                            //grab prior values except for changed element\r\n                            let priorSubmitObj = submitArray[0];\r\n                            priorSubmitObj.thirdLine = validatedText;\r\n                            setSubmitArray([priorSubmitObj]);\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            <Row>\r\n                <InputGroup className=\"mt-3\">\r\n                    <FormControl\r\n                        as=\"textarea\"\r\n                        placeholder=\"Comments\"\r\n                        aria-label=\"Comments\"\r\n                        onChange={ e => {\r\n                            //text validate\r\n                            let validatedText = textValidation(e.target.value);\r\n\r\n                            //grab prior values except for changed element\r\n                            let priorSubmitObj = submitArray[0];\r\n                            priorSubmitObj.comments = validatedText;\r\n                            setSubmitArray([priorSubmitObj]);\r\n                        }}\r\n                    />\r\n                </InputGroup>\r\n            </Row>\r\n            {\r\n                (thisColorCode === 1 || thisColorCode === 2 || thisColorCode === 3) &&\r\n                <Row className=\"justify-content-between pinmag-row mt-3\">\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN\" \r\n                                        defaultChecked={ (thisColorCode === 1) ? true : false }\r\n                                        onChange={e => {\r\n                                            //if checked is true\r\n                                            if(e.target.checked){\r\n                                                //set value accordingly\r\n                                                let oldSubmitArray = submitArray;\r\n                                                oldSubmitArray[0].quantity = \"2 PINS\";\r\n                                                setSubmitArray([...oldSubmitArray]);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>2 PINS</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN\" \r\n                                        defaultChecked={ (thisColorCode !== 1) ? true : false }\r\n                                        onChange={e => {\r\n                                            //if checked is true\r\n                                            if(e.target.checked){\r\n                                                //set value accordingly\r\n                                                let oldSubmitArray = submitArray;\r\n                                                oldSubmitArray[0].quantity = \"2 MAGNETS\";\r\n                                                setSubmitArray([...oldSubmitArray]);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>2 MAGNETS</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                    <Col xs={ 12 } md=\"auto\" className=\"px-0\">\r\n                        <label className=\"mb-0\">\r\n                            <InputGroup>\r\n                                <InputGroup.Prepend>\r\n                                    <InputGroup.Radio \r\n                                        name=\"pinmag\" \r\n                                        aria-label=\"Radio for PIN and MAG\" \r\n                                        onChange={e => {\r\n                                            //if checked is true\r\n                                            if(e.target.checked){\r\n                                                //set value accordingly\r\n                                                let oldSubmitArray = submitArray;\r\n                                                oldSubmitArray[0].quantity = \"1 PIN + 1 MAGNET\";\r\n                                                setSubmitArray([...oldSubmitArray]);\r\n                                            }\r\n                                        }}\r\n                                    />\r\n                                </InputGroup.Prepend>\r\n                                <InputGroup.Append>\r\n                                    <InputGroup.Text>1 PIN + 1 MAGNET</InputGroup.Text>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                        </label>\r\n                    </Col>\r\n                </Row>\r\n            }\r\n            <Row className=\"mt-3 justify-content-end\">\r\n                <Col xs={xsSize} md={mdSize} lg=\"auto\">\r\n                    <p className=\"mt-2\">{ statusText[statusTextIndex] }</p>\r\n                </Col>\r\n                <Col xs={xsSize} md={mdSize} lg=\"auto\">\r\n                    <Button type=\"submit\" disabled={ submitGrey } onClick={ submitRequest }>Submit Request</Button>\r\n                </Col>\r\n            </Row>\r\n        </Container>\r\n    );\r\n\r\n\r\n};\r\n\r\n\r\n  \r\n  export default CreateTagPage;","import React from 'react';\r\nimport { \r\n    Col,\r\n    Row,\r\n    Container\r\n} from 'react-bootstrap';\r\nimport '../css/tags.css';\r\nimport '../css/signcolor.css';\r\n\r\nfunction colorCodeToClass(colorCode){\r\n    /*\r\n    tagType obj are the classes to apply and default texts on each\r\n    bg background class, \r\n    img is the deer head logo, null-space is the default class that deletes the class\r\n    in the event that there is no deer head\r\n    defName: default Name placeholder\r\n    defSecond: default second line text placeholder\r\n    quantity: the default quantity for each tag type(unchangeable, only for info purposes)\r\n    -\r\n    see CreateSignColor for tag id list\r\n    */\r\n    let tagType = {\r\n        bg: \"\",\r\n        img: \"null-space\",\r\n        defName: \"Name\",\r\n        defSecond: \"City, ST\",\r\n        quantity: \"x2\"\r\n    };\r\n\r\n    // translate color code to image type using classes\r\n    if(colorCode === 1){\r\n                \r\n        // 1: green pin no deerhead(normal nametag and default selection)\r\n        tagType.bg = \"tag-green\";\r\n    } else if(colorCode === 2){\r\n\r\n        // 2: green magnet deerhead\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n    } else if(colorCode === 3){\r\n\r\n        // 3: bronze magnet engraved deerhead\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvwhite-img\";\r\n    } else if(colorCode === 4){\r\n\r\n        // 4: outdoor tags\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.img = \"dvwhite-img\";\r\n        tagType.quantity = \"x3\";\r\n    } else if(colorCode === 5){\r\n\r\n        // 5: sign, add details in comments\r\n        tagType.bg = \"tag-sign\";\r\n        tagType.defName = \"Sign\";\r\n        tagType.defSecond = \"Put details in the comments\";\r\n        tagType.quantity = \"\";\r\n    } else if(colorCode === 7){\r\n\r\n        // 7: repeat 1 but with title instead of city, st\r\n        tagType.bg = \"tag-green\";\r\n        tagType.defSecond = \"Title\";\r\n    } else if(colorCode === 8){\r\n\r\n        // 8: repeat 2 but with title instead of city, st\r\n        tagType.bg = \"tag-greenmag\";\r\n        tagType.img = \"dvgold-img\";\r\n        tagType.defSecond = \"Title\";\r\n    } else if(colorCode === 9){\r\n\r\n        // 9: repeat 3 but with title instead of city, st\r\n        tagType.bg = \"tag-bronze\";\r\n        tagType.img = \"dvwhite-img\";\r\n        tagType.defSecond = \"Title\";\r\n    } else if(colorCode === 10){\r\n\r\n        // 10: repeat 4 but with title instead of city, st\r\n        tagType.bg = \"tag-outdoor\";\r\n        tagType.defSecond = \"Title\";\r\n        tagType.quantity = \"x3\";\r\n    } else if(colorCode === 11){\r\n\r\n        // 11: basket check tag\r\n        tagType.bg = \"tag-basket\";\r\n        tagType.defName = \"<p style='font-size:60px;position:relative;top:-20%;'>&#8226;</p>\";\r\n        tagType.defSecond = \"<p style='font-size:19px;position:relative;bottom:30%;'>Basket Check</p>\";\r\n        tagType.quantity = \"\";\r\n    } else if(colorCode === 12){\r\n\r\n        // 12: outdoor tag for ski patrol\r\n        tagType.bg = \"tag-patrol\";\r\n        tagType.img = \"dvpatrol-img\";\r\n        tagType.quantity = \"x3\";\r\n    } else if(colorCode === 13){\r\n\r\n        // 13: old outdoor tags that fit inside old mtn ops uniforms\r\n        tagType.bg = \"tag-oldoutdoor\";\r\n        tagType.quantity = \"x3\";\r\n    }else if(colorCode === 11){\r\n\r\n    }else{\r\n\r\n        // anything else, other, details in comments\r\n        tagType.bg = \"tag-other\";\r\n    }\r\n\r\n    // return value, e.g. tagType = { bg: tag-green, img: null-space }\r\n    return tagType;\r\n};\r\n\r\n\r\nfunction CreatePreviewImage(data) {\r\n    /*\r\n    data use format for non signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        secondLine,\r\n        colorCode,\r\n        thirdLine(if it exists)\r\n    } />\r\n    -\r\n    data use format for signs: \r\n    <CreatePreviewImage data={ \r\n        name,\r\n        height,\r\n        width,\r\n        signColor,\r\n        attachment,\r\n        thickness\r\n    } />\r\n    */\r\n\r\n    // console.log(data); // correct injection would be e.g. data.data.colorCode\r\n    let tagType = colorCodeToClass(data.data.colorCode);\r\n    // console.log(tagType.img);\r\n    tagType.bg = tagType.bg + \"  justify-content-between\";\r\n\r\n    // if custom sign\r\n    let pixelHeight;\r\n    let pixelWidth;\r\n    let splitClasses = [];\r\n    let newLineContents = data.data.name;\r\n    // console.log(data.data.colorCode);\r\n    \r\n    if(data.data.colorCode === 5){\r\n        // grab signcolor classes\r\n        // console.log(data.data.quantity);\r\n        splitClasses = data.data.signColor.split(\" / \");\r\n        splitClasses[0] = \"color-\" + splitClasses[0].toLowerCase();\r\n        splitClasses[1] = \"bg-\" + splitClasses[1].toLowerCase();\r\n        \r\n        pixelHeight = parseFloat(data.data.height);\r\n        pixelWidth = parseFloat(data.data.width);\r\n\r\n        // do sign maths\r\n        pixelHeight *= 50;\r\n        pixelWidth *= 50;\r\n        pixelHeight = pixelHeight + \"px\";\r\n        pixelWidth = pixelWidth + \"px\";\r\n\r\n        newLineContents = newLineContents.split(\"\\n\");\r\n        // console.log(newLineContents);\r\n    };\r\n    \r\n\r\n    // return page with compiled data\r\n    return (\r\n        <Col xs={12} md={6} lg={4} className=\"px-0\">\r\n            {\r\n                (data.data.colorCode !== 5) &&\r\n                <Container>\r\n                    <Row className={ tagType.bg }>\r\n                        {\r\n                            !(tagType.img === \"null-space\") &&\r\n                            <div className={ tagType.img }>\r\n                            </div>\r\n                        }\r\n                        <div className=\"title-parent\">\r\n                            <div className=\"title-text justify-content-center\">\r\n                                { data.data.name }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.secondLine }\r\n                            </div>\r\n                            <div className=\"smaller-text justify-content-center\">\r\n                                { data.data.thirdLine }\r\n                            </div>\r\n                        </div>\r\n                    </Row>\r\n                </Container>\r\n            }\r\n            {\r\n                (data.data.colorCode === 5) &&\r\n                <Container style={{ \r\n                    width: pixelWidth,\r\n                    height: pixelHeight,\r\n                    textAlign: \"center\",\r\n                    margin: \"auto\",\r\n                    display: \"flex\",\r\n                    flexDirection: \"row\"\r\n                }} className={ splitClasses[1] + \" \" + splitClasses[0] + \" bg-basic\" }>\r\n                    <div style={{ display: \"flex\", flexDirection: \"column\", margin: \"auto\" }}>\r\n                        {\r\n                            newLineContents.map((mapItem, index) => \r\n                                <Row className=\"justify-content-center\" key={ index }>{ mapItem }</Row>\r\n                            )\r\n                        }\r\n                    </div>\r\n                </Container>\r\n            }\r\n        </Col>\r\n    );\r\n}\r\n\r\nexport default CreatePreviewImage;","export function textValidation(inputString, minChar){\r\n    //this will automatically convert input text and return with validated text\r\n    //console.log(\"textValidation called with: \" + inputString);\r\n\r\n    /*\r\n    //check undefined\r\n    if(inputString == undefined){\r\n        //input was undefined\r\n        return 0;\r\n    }else if(inputString == \" \"){\r\n        //input was an empty string\r\n        return 0;\r\n    }else if(inputString == \"\"){\r\n        //input was an empty string\r\n        return 0;\r\n    };*/\r\n\r\n    //1st step: check all the string to make sure it has no special characters\r\n    //this is for db security purposes, only 0-9, a-Z, and !@.,?\r\n    let outputString = regexDelete(inputString);\r\n\r\n    //1st and half step: check and cut short if string is under the minimum character limit\r\n    let stringLength = inputString.length;\r\n    if(stringLength < minChar){\r\n        //doesnt meet requirement\r\n        return \"\";\r\n    };\r\n\r\n    //2nd step: add spaces after commas\r\n    outputString = addCommaSpaces(outputString);\r\n\r\n    //3rd step: title caps everything\r\n    outputString = titleCapsify(outputString);\r\n\r\n    //4th step: check state names and shorten to abbreviation\r\n    outputString = stateToAbbv(outputString);\r\n\r\n    //console.log(outputString);\r\n    return outputString;\r\n};\r\n\r\nfunction regexDelete(string){\r\n    //check if string is empty\r\n    if(string===\"\"){\r\n        //if empty, do nothing\r\n        return \"\";\r\n    }else{\r\n        //check an entire string for valid characters, then return only those\r\n        const regex = /\\w|\\n|\\r|\\t|\\d|[.!,?@ ]|[A-Za-zÀ-ÖØ-öø-ÿ]/g; // old: /\\w|\\n|\\r|\\t|\\d|[.!,?@ ]/g, it did not allow accented characters\r\n        let found = string.match(regex);\r\n\r\n        //because it returns an array of all the characters, need to compile them into\r\n        //a string, join(\"\") works but join() nor toString() works without adding commas\r\n        let compiledString = found.join(\"\");\r\n\r\n        //console.dir(compiledString);\r\n        return compiledString;\r\n    }\r\n    \r\n};\r\n\r\nfunction addCommaSpaces(inputString){\r\n    //add appropriate spacing after commas if not exist\r\n\r\n    //split spaces into array\r\n    let splitString = inputString.split(\",\");\r\n\r\n    //check length of array, 1 for no comma, 2 for one comma\r\n    if(splitString.length > 1){\r\n        //has at least one comma\r\n        let stringSelection = splitString[1];\r\n\r\n        //check if the string on 2nd word starts with a space, delete if so\r\n        if(stringSelection[0] === \" \"){\r\n            //has space already, join only with comma\r\n            splitString = splitString.join(\",\");\r\n        }else{\r\n            //doesnt have space, add one\r\n            splitString = splitString.join(\", \");\r\n        };\r\n        //console.log(splitString);\r\n        \r\n        return splitString;\r\n    } else{\r\n        //has no commas, can just return w/ no modification\r\n        return inputString;\r\n    };\r\n    \r\n};\r\n\r\nfunction titleCapsify(inputString){\r\n    //title caps first letter of each word\r\n    //console.log(inputString);\r\n\r\n    //split spaces into array\r\n    let splitString = inputString.split(\" \");\r\n\r\n    //if the following is nothing it will throw an error, so delete it\r\n    //before it throws an error, this is a temporary state before adding another word\r\n    //console.dir(splitString[splitString.length - 1]);\r\n    if(splitString[splitString.length - 1] === \"\"){\r\n        //remove it from array\r\n        splitString.pop();\r\n    };\r\n    \r\n    let combinedString = splitString.map(function(word){\r\n        //make first character uppercase\r\n        let firstChar = word[0].toUpperCase();\r\n\r\n        //delete that first lowercase character\r\n        //slice in this case actually saves the remaining char's instead\r\n        word = word.slice(1);\r\n\r\n        //combine characters into a word\r\n        word = firstChar + \"\" + word;\r\n        return word;\r\n    });\r\n\r\n    //join all words together to form full name before returning\r\n    combinedString = combinedString.join(\" \");\r\n    //console.log(combinedString);\r\n    return combinedString;\r\n};\r\n\r\nfunction stateToAbbv(inputString){\r\n    //compile a list of all state names\r\n    const stateFull = [\"Alabama\", \"Alaska\",\"Arizona\",\"Arkansas\",\"California\",\"Colorado\",\"Connecticut\",\"Delaware\",\"District of Columbia\",\"Florida\",\"Georgia\",\"Hawaii\",\"Idaho\",\"Illinois\",\"Indiana\",\"Iowa\",\"Kansas\",\"Kentucky\",\"Louisiana\",\"Maine\",\"Maryland\",\"Massachusetts\",\"Michigan\",\"Minnesota\",\"Mississippi\",\"Missouri\",\"Montana\",\"Nebraska\",\"Nevada\",\"New Hampshire\",\"New Jersey\",\"New Mexico\",\"New York\",\"North Carolina\",\"North Dakota\",\"Ohio\",\"Oklahoma\",\"Oregon\",\"Pennsylvania\",\"Rhode Island\",\"South Carolina\",\"South Dakota\",\"Tennessee\",\"Texas\",\"Utah\",\"Vermont\",\"Virginia\",\"Washington\",\"West Virginia\",\"Wisconsin\",\"Wyoming\"];\r\n    const stateAbbv = [\"AL\",\"AK\",\"AZ\",\"AR\",\"CA\",\"CO\",\"CT\",\"DE\",\"DC\",\"FL\",\"GA\",\"HI\",\"ID\",\"IL\",\"IN\",\"IA\",\"KS\",\"KY\",\"LA\",\"ME\",\"MD\",\"MA\",\"MI\",\"MN\",\"MS\",\"MO\",\"MT\",\"NE\",\"NV\",\"NH\",\"NJ\",\"NM\",\"NY\",\"NC\",\"ND\",\"OH\",\"OK\",\"OR\",\"PA\",\"RI\",\"SC\",\"SD\",\"TN\",\"TX\",\"UT\",\"VT\",\"VA\",\"WA\",\"WV\",\"WI\",\"WY\"];\r\n    const stateAbbvTitleCaps = [\"Al\",\"Ak\",\"Az\",\"Ar\",\"Ca\",\"Co\",\"Ct\",\"De\",\"Dc\",\"Fl\",\"Ga\",\"Hi\",\"Id\",\"Il\",\"In\",\"Ia\",\"Ks\",\"Ky\",\"La\",\"Me\",\"Md\",\"Ma\",\"Mi\",\"Mn\",\"Ms\",\"Mo\",\"Mt\",\"Ne\",\"Nv\",\"Nh\",\"Nj\",\"Nm\",\"Ny\",\"Nc\",\"Nd\",\"Oh\",\"Ok\",\"Or\",\"Pa\",\"Ri\",\"Sc\",\"Sd\",\"Tn\",\"Tx\",\"Ut\",\"Vt\",\"Va\",\"Wa\",\"Wv\",\"Wi\",\"Wy\"];\r\n    //console.log(stateFull.length); //stateAbbvTitleCaps is just for searching purposes\r\n\r\n    //split and grab the 2nd item in array, check to see if its a state name\r\n    let splitString = inputString.split(\",\");\r\n\r\n\r\n    //get rid of the first character which is a space thanks to add comma spaces\r\n    //only if splitString[1] exists\r\n    let splicedString;\r\n    if(splitString.length === 2){\r\n        //\r\n        splicedString = splitString[1].slice(1);\r\n    };\r\n    \r\n    //if the comma isnt a thing, rearrange things so they are in data format can check for state abbrev\r\n    if(splitString.length === 1){ //\"park city utah\" no comma before state\r\n        //check the last word\r\n        splitString = splitString[0].split(\" \"); //[\"park\",\"city\",\"utah\"]\r\n\r\n        //temp save last\r\n        let tempPossibleState = splitString[splitString.length - 1];\r\n\r\n        //remove last\r\n        splitString.pop(); //[\"park\",\"city\"]\r\n        \r\n        //join all\r\n        let tempJoinString = [];\r\n        tempJoinString[0] = splitString.join(\" \"); //\"park city\"\r\n        \r\n        //now need to join the first parts and leave the last part like [\"park city\", \"utah\"]\r\n        tempJoinString.push(tempPossibleState);\r\n        splitString = tempJoinString;\r\n        //console.log(tempJoinString);\r\n\r\n        splicedString = splitString[1];\r\n    };\r\n\r\n    //console.log(splicedString);\r\n    \r\n    let stateSearch = stateFull.indexOf(splicedString); //-1 if no result, # of index if match\r\n    if(stateSearch !== -1){\r\n        //found match\r\n        return splitString[0] + \", \" + stateAbbv[stateSearch];\r\n    }else{\r\n        //no match found in the statefull\r\n\r\n        //start a new search for searching stateabbv for capitalization purposes\r\n        let innerStateSearch = stateAbbvTitleCaps.indexOf(splicedString);\r\n        if(innerStateSearch !== -1){\r\n            //found inner match\r\n            return splitString[0] + \", \" + stateAbbv[innerStateSearch];\r\n        }else{\r\n            //in 2 searches, found nothing\r\n            return inputString;\r\n        };\r\n    };\r\n};","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();\n}","export default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  }\n}","export default function _iterableToArray(iter) {\n  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === \"[object Arguments]\") return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance\");\n}"],"sourceRoot":""}